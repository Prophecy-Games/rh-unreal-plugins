/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryBucket.h"
#include "InventoryType.h"
#include "InventoryRecord.generated.h"

/*
* FRHAPI_InventoryRecord
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InventoryRecord : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid InventoryId{  };
    FGuid& GetInventoryId() { return InventoryId; }
    const FGuid& GetInventoryId() const { return InventoryId; }
    void SetInventoryId(FGuid NewValue) { InventoryId = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryType Type{  };
    ERHAPI_InventoryType& GetType() { return Type; }
    const ERHAPI_InventoryType& GetType() const { return Type; }
    void SetType(ERHAPI_InventoryType NewValue) { Type = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 LegacyInventoryId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool LegacyInventoryId_IsSet{ false };
    int32& GetLegacyInventoryId() { return LegacyInventoryId_Optional; }
    const int32& GetLegacyInventoryId() const { return LegacyInventoryId_Optional; }
    const int32& GetLegacyInventoryId(const int32& DefaultValue) const { if (LegacyInventoryId_IsSet) return LegacyInventoryId_Optional; return DefaultValue; }
    bool GetLegacyInventoryId(int32& OutValue) const { if (LegacyInventoryId_IsSet) OutValue = LegacyInventoryId_Optional; return LegacyInventoryId_IsSet; }
    int32* GetLegacyInventoryIdOrNull() { if (LegacyInventoryId_IsSet) return &LegacyInventoryId_Optional; return nullptr; }
    const int32* GetLegacyInventoryIdOrNull() const { if (LegacyInventoryId_IsSet) return &LegacyInventoryId_Optional; return nullptr; }
    void SetLegacyInventoryId(int32 NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; }
    void ClearLegacyInventoryId() { LegacyInventoryId_Optional = 0; LegacyInventoryId_IsSet = false; }
    bool IsLegacyInventoryIdDefaultValue() const { return LegacyInventoryId_IsSet && LegacyInventoryId_Optional == 0; }
    void SetLegacyInventoryIdToDefault() { LegacyInventoryId_Optional = 0; LegacyInventoryId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryBucket Bucket_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Bucket_IsSet{ false };
    ERHAPI_InventoryBucket& GetBucket() { return Bucket_Optional; }
    const ERHAPI_InventoryBucket& GetBucket() const { return Bucket_Optional; }
    const ERHAPI_InventoryBucket& GetBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (Bucket_IsSet) return Bucket_Optional; return DefaultValue; }
    bool GetBucket(ERHAPI_InventoryBucket& OutValue) const { if (Bucket_IsSet) OutValue = Bucket_Optional; return Bucket_IsSet; }
    ERHAPI_InventoryBucket* GetBucketOrNull() { if (Bucket_IsSet) return &Bucket_Optional; return nullptr; }
    const ERHAPI_InventoryBucket* GetBucketOrNull() const { if (Bucket_IsSet) return &Bucket_Optional; return nullptr; }
    void SetBucket(ERHAPI_InventoryBucket NewValue) { Bucket_Optional = NewValue; Bucket_IsSet = true; }
    void ClearBucket() { Bucket_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 Count{ 0 };
    int32& GetCount() { return Count; }
    const int32& GetCount() const { return Count; }
    void SetCount(int32 NewValue) { Count = NewValue;  }
    bool IsCountDefaultValue() const { return Count == 0; }
    void SetCountToDefault() { Count = 0;  }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Acquired{  };
    FDateTime& GetAcquired() { return Acquired; }
    const FDateTime& GetAcquired() const { return Acquired; }
    void SetAcquired(FDateTime NewValue) { Acquired = NewValue;  }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Expires_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Expires_IsSet{ false };
    FDateTime& GetExpires() { return Expires_Optional; }
    const FDateTime& GetExpires() const { return Expires_Optional; }
    const FDateTime& GetExpires(const FDateTime& DefaultValue) const { if (Expires_IsSet) return Expires_Optional; return DefaultValue; }
    bool GetExpires(FDateTime& OutValue) const { if (Expires_IsSet) OutValue = Expires_Optional; return Expires_IsSet; }
    FDateTime* GetExpiresOrNull() { if (Expires_IsSet) return &Expires_Optional; return nullptr; }
    const FDateTime* GetExpiresOrNull() const { if (Expires_IsSet) return &Expires_Optional; return nullptr; }
    void SetExpires(FDateTime NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; }
    void ClearExpires() { Expires_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }
};
