/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "FriendsApiConfig.generated.h"

/*
* FRHAPI_FriendsApiConfig
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_FriendsApiConfig : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 FriendLimit_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool FriendLimit_IsSet{ false };
    int32& GetFriendLimit() { return FriendLimit_Optional; }
    const int32& GetFriendLimit() const { return FriendLimit_Optional; }
    const int32& GetFriendLimit(const int32& DefaultValue) const { if (FriendLimit_IsSet) return FriendLimit_Optional; return DefaultValue; }
    bool GetFriendLimit(int32& OutValue) const { if (FriendLimit_IsSet) OutValue = FriendLimit_Optional; return FriendLimit_IsSet; }
    int32* GetFriendLimitOrNull() { if (FriendLimit_IsSet) return &FriendLimit_Optional; return nullptr; }
    const int32* GetFriendLimitOrNull() const { if (FriendLimit_IsSet) return &FriendLimit_Optional; return nullptr; }
    void SetFriendLimit(int32 NewValue) { FriendLimit_Optional = NewValue; FriendLimit_IsSet = true; }
    void ClearFriendLimit() { FriendLimit_Optional = 10000; FriendLimit_IsSet = false; }
    bool IsFriendLimitDefaultValue() const { return FriendLimit_IsSet && FriendLimit_Optional == 10000; }
    void SetFriendLimitToDefault() { FriendLimit_Optional = 10000; FriendLimit_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 BlockLimit_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool BlockLimit_IsSet{ false };
    int32& GetBlockLimit() { return BlockLimit_Optional; }
    const int32& GetBlockLimit() const { return BlockLimit_Optional; }
    const int32& GetBlockLimit(const int32& DefaultValue) const { if (BlockLimit_IsSet) return BlockLimit_Optional; return DefaultValue; }
    bool GetBlockLimit(int32& OutValue) const { if (BlockLimit_IsSet) OutValue = BlockLimit_Optional; return BlockLimit_IsSet; }
    int32* GetBlockLimitOrNull() { if (BlockLimit_IsSet) return &BlockLimit_Optional; return nullptr; }
    const int32* GetBlockLimitOrNull() const { if (BlockLimit_IsSet) return &BlockLimit_Optional; return nullptr; }
    void SetBlockLimit(int32 NewValue) { BlockLimit_Optional = NewValue; BlockLimit_IsSet = true; }
    void ClearBlockLimit() { BlockLimit_Optional = 10000; BlockLimit_IsSet = false; }
    bool IsBlockLimitDefaultValue() const { return BlockLimit_IsSet && BlockLimit_Optional == 10000; }
    void SetBlockLimitToDefault() { BlockLimit_Optional = 10000; BlockLimit_IsSet = true; }
};
