// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlatformID.h"
#include "PlatformSessionTemplate.generated.h"

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlatformSessionTemplate : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Platform */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_PlatformID PlatformId{  };
    /** @brief Gets the value of PlatformId */
    ERHAPI_PlatformID& GetPlatformId() { return PlatformId; }
    /** @brief Gets the value of PlatformId */
    const ERHAPI_PlatformID& GetPlatformId() const { return PlatformId; }
    /** @brief Sets the value of PlatformId */
    void SetPlatformId(ERHAPI_PlatformID NewValue) { PlatformId = NewValue;  }

    /** @brief Platform-Specific Identifier for the Platform's template */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PlatformSessionType{  };
    /** @brief Gets the value of PlatformSessionType */
    FString& GetPlatformSessionType() { return PlatformSessionType; }
    /** @brief Gets the value of PlatformSessionType */
    const FString& GetPlatformSessionType() const { return PlatformSessionType; }
    /** @brief Sets the value of PlatformSessionType */
    void SetPlatformSessionType(FString NewValue) { PlatformSessionType = NewValue;  }

    /** @brief Product-defined custom metadata */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> Metadata_Optional{  };
    /** @brief true if Metadata_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Metadata_IsSet{ false };
    /** @brief Gets the value of Metadata_Optional, regardless of it having been set */
    TMap<FString, FString>& GetMetadata() { return Metadata_Optional; }
    /** @brief Gets the value of Metadata_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetMetadata() const { return Metadata_Optional; }
    /** @brief Gets the value of Metadata_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetMetadata(const TMap<FString, FString>& DefaultValue) const { if (Metadata_IsSet) return Metadata_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Metadata_Optional and returns true if it has been set, otherwise returns false */
    bool GetMetadata(TMap<FString, FString>& OutValue) const { if (Metadata_IsSet) OutValue = Metadata_Optional; return Metadata_IsSet; }
    /** @brief Returns a pointer to Metadata_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetMetadataOrNull() { if (Metadata_IsSet) return &Metadata_Optional; return nullptr; }
    /** @brief Returns a pointer to Metadata_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetMetadataOrNull() const { if (Metadata_IsSet) return &Metadata_Optional; return nullptr; }
    /** @brief Sets the value of Metadata_Optional and also sets Metadata_IsSet to true */
    void SetMetadata(TMap<FString, FString> NewValue) { Metadata_Optional = NewValue; Metadata_IsSet = true; }
     /** @brief Clears the value of Metadata_Optional and sets Metadata_IsSet to false */
    void ClearMetadata() { Metadata_IsSet = false; }
};
