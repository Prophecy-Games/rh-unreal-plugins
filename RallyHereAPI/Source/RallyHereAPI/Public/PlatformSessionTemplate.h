/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlatformID.h"
#include "PlatformSessionTemplate.generated.h"

/*
* FRHAPI_PlatformSessionTemplate
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlatformSessionTemplate : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Platform */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_PlatformID PlatformId{  };
    ERHAPI_PlatformID& GetPlatformId() { return PlatformId; }
    const ERHAPI_PlatformID& GetPlatformId() const { return PlatformId; }
    void SetPlatformId(ERHAPI_PlatformID NewValue) { PlatformId = NewValue;  }

    /* Platform-Specific Identifier for the Platform's template */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PlatformSessionType{  };
    FString& GetPlatformSessionType() { return PlatformSessionType; }
    const FString& GetPlatformSessionType() const { return PlatformSessionType; }
    void SetPlatformSessionType(FString NewValue) { PlatformSessionType = NewValue;  }

    /* Product-defined custom metadata */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> Metadata_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Metadata_IsSet{ false };
    TMap<FString, FString>& GetMetadata() { return Metadata_Optional; }
    const TMap<FString, FString>& GetMetadata() const { return Metadata_Optional; }
    const TMap<FString, FString>& GetMetadata(const TMap<FString, FString>& DefaultValue) const { if (Metadata_IsSet) return Metadata_Optional; return DefaultValue; }
    bool GetMetadata(TMap<FString, FString>& OutValue) const { if (Metadata_IsSet) OutValue = Metadata_Optional; return Metadata_IsSet; }
    TMap<FString, FString>* GetMetadataOrNull() { if (Metadata_IsSet) return &Metadata_Optional; return nullptr; }
    const TMap<FString, FString>* GetMetadataOrNull() const { if (Metadata_IsSet) return &Metadata_Optional; return nullptr; }
    void SetMetadata(TMap<FString, FString> NewValue) { Metadata_Optional = NewValue; Metadata_IsSet = true; }
    void ClearMetadata() { Metadata_IsSet = false; }
};
