/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "OAuthPortal.h"
#include "AgreementMessage.h"
#include "BodyGetPortalTokenDetailsV1PortaltokenDetailsPost.h"
#include "BodyLoginV1LoginPost.h"
#include "HTTPValidationError.h"
#include "LoginResult.h"
#include "LogoutRequest.h"
#include "MessageOnly.h"
#include "OAuthTokenExchange.h"
#include "OAuthTokenResponse.h"
#include "PublicKey.h"
#include "PublicKeyList.h"
#include "TokenRequest.h"
#include "TokenResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GenerateKey;
struct FResponse_GenerateKey;
struct FRequest_GetAllPublicKeys;
struct FResponse_GetAllPublicKeys;
struct FRequest_GetPortalTokenDetails;
struct FResponse_GetPortalTokenDetails;
struct FRequest_GetPublicKeyById;
struct FResponse_GetPublicKeyById;
struct FRequest_Login;
struct FResponse_Login;
struct FRequest_Logout;
struct FResponse_Logout;
struct FRequest_OauthLogin;
struct FResponse_OauthLogin;
struct FRequest_OauthResponse;
struct FResponse_OauthResponse;
struct FRequest_OauthTokenExchange;
struct FResponse_OauthTokenExchange;
struct FRequest_Token;
struct FResponse_Token;
struct FRequest_Verify;
struct FResponse_Verify;

DECLARE_DELEGATE_OneParam(FDelegate_GenerateKey, const FResponse_GenerateKey&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPublicKeys, const FResponse_GetAllPublicKeys&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPortalTokenDetails, const FResponse_GetPortalTokenDetails&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPublicKeyById, const FResponse_GetPublicKeyById&);
DECLARE_DELEGATE_OneParam(FDelegate_Login, const FResponse_Login&);
DECLARE_DELEGATE_OneParam(FDelegate_Logout, const FResponse_Logout&);
DECLARE_DELEGATE_OneParam(FDelegate_OauthLogin, const FResponse_OauthLogin&);
DECLARE_DELEGATE_OneParam(FDelegate_OauthResponse, const FResponse_OauthResponse&);
DECLARE_DELEGATE_OneParam(FDelegate_OauthTokenExchange, const FResponse_OauthTokenExchange&);
DECLARE_DELEGATE_OneParam(FDelegate_Token, const FResponse_Token&);
DECLARE_DELEGATE_OneParam(FDelegate_Verify, const FResponse_Verify&);

class RALLYHEREAPI_API FAuthAPI : public FAPI
{
public:
    FAuthAPI();
    virtual ~FAuthAPI();

    FHttpRequestPtr GenerateKey(const FRequest_GenerateKey& Request, const FDelegate_GenerateKey& Delegate = FDelegate_GenerateKey());
    FHttpRequestPtr GetAllPublicKeys(const FRequest_GetAllPublicKeys& Request, const FDelegate_GetAllPublicKeys& Delegate = FDelegate_GetAllPublicKeys());
    FHttpRequestPtr GetPortalTokenDetails(const FRequest_GetPortalTokenDetails& Request, const FDelegate_GetPortalTokenDetails& Delegate = FDelegate_GetPortalTokenDetails());
    FHttpRequestPtr GetPublicKeyById(const FRequest_GetPublicKeyById& Request, const FDelegate_GetPublicKeyById& Delegate = FDelegate_GetPublicKeyById());
    FHttpRequestPtr Login(const FRequest_Login& Request, const FDelegate_Login& Delegate = FDelegate_Login());
    FHttpRequestPtr Logout(const FRequest_Logout& Request, const FDelegate_Logout& Delegate = FDelegate_Logout());
    FHttpRequestPtr OauthLogin(const FRequest_OauthLogin& Request, const FDelegate_OauthLogin& Delegate = FDelegate_OauthLogin());
    FHttpRequestPtr OauthResponse(const FRequest_OauthResponse& Request, const FDelegate_OauthResponse& Delegate = FDelegate_OauthResponse());
    FHttpRequestPtr OauthTokenExchange(const FRequest_OauthTokenExchange& Request, const FDelegate_OauthTokenExchange& Delegate = FDelegate_OauthTokenExchange());
    FHttpRequestPtr Token(const FRequest_Token& Request, const FDelegate_Token& Delegate = FDelegate_Token());
    FHttpRequestPtr Verify(const FRequest_Verify& Request, const FDelegate_Verify& Delegate = FDelegate_Verify());

private:
    void OnGenerateKeyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GenerateKey Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetAllPublicKeysResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPublicKeys Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPortalTokenDetailsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPortalTokenDetails Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPublicKeyByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPublicKeyById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnLoginResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Login Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnLogoutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Logout Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnOauthLoginResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OauthLogin Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnOauthResponseResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OauthResponse Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnOauthTokenExchangeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OauthTokenExchange Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Token Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnVerifyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Verify Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);

};

/* Generate Key
 *
 * Generate and return a new key that matches the configuration required for private keys.  This does NOT add the key to any internal list, and is purely for convenience for maintainers
*/
struct RALLYHEREAPI_API FRequest_GenerateKey : public FRequest
{
    FRequest_GenerateKey();
    virtual ~FRequest_GenerateKey() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

};

struct RALLYHEREAPI_API FResponse_GenerateKey : public FResponse
{
    FResponse_GenerateKey(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GenerateKey() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_GenerateKey
{
    typedef FRequest_GenerateKey Request;
    typedef FResponse_GenerateKey Response;
    typedef FDelegate_GenerateKey Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GenerateKey(InRequest, InDelegate); }
};

/* Get All Public Keys
 *
 * Get all the current public keys.  It is encouraged to get keys by id, rather than all at once (to more easily allow new keys to cycle though)
*/
struct RALLYHEREAPI_API FRequest_GetAllPublicKeys : public FRequest
{
    FRequest_GetAllPublicKeys();
    virtual ~FRequest_GetAllPublicKeys() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

};

struct RALLYHEREAPI_API FResponse_GetAllPublicKeys : public FResponse
{
    FResponse_GetAllPublicKeys(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPublicKeys() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PublicKeyList Content;

};

struct RALLYHEREAPI_API Traits_GetAllPublicKeys
{
    typedef FRequest_GetAllPublicKeys Request;
    typedef FResponse_GetAllPublicKeys Response;
    typedef FDelegate_GetAllPublicKeys Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetAllPublicKeys(InRequest, InDelegate); }
};

/* Get Portal Token Details

*/
struct RALLYHEREAPI_API FRequest_GetPortalTokenDetails : public FRequest
{
    FRequest_GetPortalTokenDetails();
    virtual ~FRequest_GetPortalTokenDetails() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

    FRHAPI_BodyGetPortalTokenDetailsV1PortaltokenDetailsPost BodyGetPortalTokenDetailsV1PortaltokenDetailsPost;
};

struct RALLYHEREAPI_API FResponse_GetPortalTokenDetails : public FResponse
{
    FResponse_GetPortalTokenDetails(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPortalTokenDetails() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TMap<FString, FString> Content;

};

struct RALLYHEREAPI_API Traits_GetPortalTokenDetails
{
    typedef FRequest_GetPortalTokenDetails Request;
    typedef FResponse_GetPortalTokenDetails Response;
    typedef FDelegate_GetPortalTokenDetails Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPortalTokenDetails(InRequest, InDelegate); }
};

/* Get Public Key By Id

*/
struct RALLYHEREAPI_API FRequest_GetPublicKeyById : public FRequest
{
    FRequest_GetPublicKeyById();
    virtual ~FRequest_GetPublicKeyById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

    FString KeyId;
};

struct RALLYHEREAPI_API FResponse_GetPublicKeyById : public FResponse
{
    FResponse_GetPublicKeyById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPublicKeyById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PublicKey Content;

};

struct RALLYHEREAPI_API Traits_GetPublicKeyById
{
    typedef FRequest_GetPublicKeyById Request;
    typedef FResponse_GetPublicKeyById Response;
    typedef FDelegate_GetPublicKeyById Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPublicKeyById(InRequest, InDelegate); }
};

/* Login

*/
struct RALLYHEREAPI_API FRequest_Login : public FRequest
{
    FRequest_Login();
    virtual ~FRequest_Login() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_BodyLoginV1LoginPost BodyLoginV1LoginPost;
    TOptional<FString> UserAgent;
    TOptional<FString> XForwardedFor;
};

struct RALLYHEREAPI_API FResponse_Login : public FResponse
{
    FResponse_Login(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_Login() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_LoginResult Content;

};

struct RALLYHEREAPI_API Traits_Login
{
    typedef FRequest_Login Request;
    typedef FResponse_Login Response;
    typedef FDelegate_Login Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.Login(InRequest, InDelegate); }
};

/* Logout

*/
struct RALLYHEREAPI_API FRequest_Logout : public FRequest
{
    FRequest_Logout();
    virtual ~FRequest_Logout() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

    FRHAPI_LogoutRequest LogoutRequest;
};

struct RALLYHEREAPI_API FResponse_Logout : public FResponse
{
    FResponse_Logout(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_Logout() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_Logout
{
    typedef FRequest_Logout Request;
    typedef FResponse_Logout Response;
    typedef FDelegate_Logout Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.Logout(InRequest, InDelegate); }
};

/* Oauth Login

*/
struct RALLYHEREAPI_API FRequest_OauthLogin : public FRequest
{
    FRequest_OauthLogin();
    virtual ~FRequest_OauthLogin() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

    ERHAPI_OAuthPortal Platform;
    TOptional<FString> State;
    TOptional<FString> RedirectUri;
    TOptional<FString> UserAgent;
    TOptional<FString> XForwardedFor;
};

struct RALLYHEREAPI_API FResponse_OauthLogin : public FResponse
{
    FResponse_OauthLogin(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OauthLogin() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_OauthLogin
{
    typedef FRequest_OauthLogin Request;
    typedef FResponse_OauthLogin Response;
    typedef FDelegate_OauthLogin Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.OauthLogin(InRequest, InDelegate); }
};

/* Oauth Response

*/
struct RALLYHEREAPI_API FRequest_OauthResponse : public FRequest
{
    FRequest_OauthResponse();
    virtual ~FRequest_OauthResponse() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

    ERHAPI_OAuthPortal Platform;
    TOptional<FString> Code;
    TOptional<FString> State;
    TOptional<FString> UserAgent;
    TOptional<FString> XForwardedFor;
};

struct RALLYHEREAPI_API FResponse_OauthResponse : public FResponse
{
    FResponse_OauthResponse(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OauthResponse() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_OauthResponse
{
    typedef FRequest_OauthResponse Request;
    typedef FResponse_OauthResponse Response;
    typedef FDelegate_OauthResponse Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.OauthResponse(InRequest, InDelegate); }
};

/* Oauth Token Exchange

*/
struct RALLYHEREAPI_API FRequest_OauthTokenExchange : public FRequest
{
    FRequest_OauthTokenExchange();
    virtual ~FRequest_OauthTokenExchange() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;

    FRHAPI_OAuthTokenExchange OAuthTokenExchange;
    TOptional<FString> UserAgent;
    TOptional<FString> XForwardedFor;
};

struct RALLYHEREAPI_API FResponse_OauthTokenExchange : public FResponse
{
    FResponse_OauthTokenExchange(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OauthTokenExchange() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_OAuthTokenResponse Content;

};

struct RALLYHEREAPI_API Traits_OauthTokenExchange
{
    typedef FRequest_OauthTokenExchange Request;
    typedef FResponse_OauthTokenExchange Response;
    typedef FDelegate_OauthTokenExchange Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.OauthTokenExchange(InRequest, InDelegate); }
};

/* Token

*/
struct RALLYHEREAPI_API FRequest_Token : public FRequest
{
    FRequest_Token();
    virtual ~FRequest_Token() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_TokenRequest TokenRequest;
};

struct RALLYHEREAPI_API FResponse_Token : public FResponse
{
    FResponse_Token(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_Token() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_TokenResponse Content;

};

struct RALLYHEREAPI_API Traits_Token
{
    typedef FRequest_Token Request;
    typedef FResponse_Token Response;
    typedef FDelegate_Token Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.Token(InRequest, InDelegate); }
};

/* Verify

*/
struct RALLYHEREAPI_API FRequest_Verify : public FRequest
{
    FRequest_Verify();
    virtual ~FRequest_Verify() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_Verify : public FResponse
{
    FResponse_Verify(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_Verify() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_Verify
{
    typedef FRequest_Verify Request;
    typedef FResponse_Verify Response;
    typedef FDelegate_Verify Delegate;
    typedef FAuthAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.Verify(InRequest, InDelegate); }
};


}
