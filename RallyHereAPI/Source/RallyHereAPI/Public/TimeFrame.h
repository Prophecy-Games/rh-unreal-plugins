/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "TimeFrame.generated.h"

/*
* FRHAPI_TimeFrame
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_TimeFrame : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Name_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Name_IsSet{ false };
    FString& GetName() { return Name_Optional; }
    const FString& GetName() const { return Name_Optional; }
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
    void ClearName() { Name_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active_IsSet{ false };
    bool& GetActive() { return Active_Optional; }
    const bool& GetActive() const { return Active_Optional; }
    const bool& GetActive(const bool& DefaultValue) const { if (Active_IsSet) return Active_Optional; return DefaultValue; }
    bool GetActive(bool& OutValue) const { if (Active_IsSet) OutValue = Active_Optional; return Active_IsSet; }
    bool* GetActiveOrNull() { if (Active_IsSet) return &Active_Optional; return nullptr; }
    const bool* GetActiveOrNull() const { if (Active_IsSet) return &Active_Optional; return nullptr; }
    void SetActive(bool NewValue) { Active_Optional = NewValue; Active_IsSet = true; }
    void ClearActive() { Active_Optional = false; Active_IsSet = false; }
    bool IsActiveDefaultValue() const { return Active_IsSet && Active_Optional == false; }
    void SetActiveToDefault() { Active_Optional = false; Active_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 Episode_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Episode_IsSet{ false };
    int32& GetEpisode() { return Episode_Optional; }
    const int32& GetEpisode() const { return Episode_Optional; }
    const int32& GetEpisode(const int32& DefaultValue) const { if (Episode_IsSet) return Episode_Optional; return DefaultValue; }
    bool GetEpisode(int32& OutValue) const { if (Episode_IsSet) OutValue = Episode_Optional; return Episode_IsSet; }
    int32* GetEpisodeOrNull() { if (Episode_IsSet) return &Episode_Optional; return nullptr; }
    const int32* GetEpisodeOrNull() const { if (Episode_IsSet) return &Episode_Optional; return nullptr; }
    void SetEpisode(int32 NewValue) { Episode_Optional = NewValue; Episode_IsSet = true; }
    void ClearEpisode() { Episode_Optional = 0; Episode_IsSet = false; }
    bool IsEpisodeDefaultValue() const { return Episode_IsSet && Episode_Optional == 0; }
    void SetEpisodeToDefault() { Episode_Optional = 0; Episode_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 EpisodeType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool EpisodeType_IsSet{ false };
    int32& GetEpisodeType() { return EpisodeType_Optional; }
    const int32& GetEpisodeType() const { return EpisodeType_Optional; }
    const int32& GetEpisodeType(const int32& DefaultValue) const { if (EpisodeType_IsSet) return EpisodeType_Optional; return DefaultValue; }
    bool GetEpisodeType(int32& OutValue) const { if (EpisodeType_IsSet) OutValue = EpisodeType_Optional; return EpisodeType_IsSet; }
    int32* GetEpisodeTypeOrNull() { if (EpisodeType_IsSet) return &EpisodeType_Optional; return nullptr; }
    const int32* GetEpisodeTypeOrNull() const { if (EpisodeType_IsSet) return &EpisodeType_Optional; return nullptr; }
    void SetEpisodeType(int32 NewValue) { EpisodeType_Optional = NewValue; EpisodeType_IsSet = true; }
    void ClearEpisodeType() { EpisodeType_Optional = 0; EpisodeType_IsSet = false; }
    bool IsEpisodeTypeDefaultValue() const { return EpisodeType_IsSet && EpisodeType_Optional == 0; }
    void SetEpisodeTypeToDefault() { EpisodeType_Optional = 0; EpisodeType_IsSet = true; }

    /* Number of hours that this time frame lasts until restarting.0 interval means no repeating. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 HourInterval_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HourInterval_IsSet{ false };
    int32& GetHourInterval() { return HourInterval_Optional; }
    const int32& GetHourInterval() const { return HourInterval_Optional; }
    const int32& GetHourInterval(const int32& DefaultValue) const { if (HourInterval_IsSet) return HourInterval_Optional; return DefaultValue; }
    bool GetHourInterval(int32& OutValue) const { if (HourInterval_IsSet) OutValue = HourInterval_Optional; return HourInterval_IsSet; }
    int32* GetHourIntervalOrNull() { if (HourInterval_IsSet) return &HourInterval_Optional; return nullptr; }
    const int32* GetHourIntervalOrNull() const { if (HourInterval_IsSet) return &HourInterval_Optional; return nullptr; }
    void SetHourInterval(int32 NewValue) { HourInterval_Optional = NewValue; HourInterval_IsSet = true; }
    void ClearHourInterval() { HourInterval_Optional = 0; HourInterval_IsSet = false; }
    bool IsHourIntervalDefaultValue() const { return HourInterval_IsSet && HourInterval_Optional == 0; }
    void SetHourIntervalToDefault() { HourInterval_Optional = 0; HourInterval_IsSet = true; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Start{  };
    FDateTime& GetStart() { return Start; }
    const FDateTime& GetStart() const { return Start; }
    void SetStart(FDateTime NewValue) { Start = NewValue;  }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime End{  };
    FDateTime& GetEnd() { return End; }
    const FDateTime& GetEnd() const { return End; }
    void SetEnd(FDateTime NewValue) { End = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
    void ClearCacheInfo() { CacheInfo_IsSet = false; }
};
