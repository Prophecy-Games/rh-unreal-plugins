/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "Loot.h"
#include "VendorType.h"
#include "Vendor.generated.h"

/*
* FRHAPI_Vendor
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Vendor : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_VendorType Type_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Type_IsSet{ false };
    ERHAPI_VendorType& GetType() { return Type_Optional; }
    const ERHAPI_VendorType& GetType() const { return Type_Optional; }
    const ERHAPI_VendorType& GetType(const ERHAPI_VendorType& DefaultValue) const { if (Type_IsSet) return Type_Optional; return DefaultValue; }
    bool GetType(ERHAPI_VendorType& OutValue) const { if (Type_IsSet) OutValue = Type_Optional; return Type_IsSet; }
    ERHAPI_VendorType* GetTypeOrNull() { if (Type_IsSet) return &Type_Optional; return nullptr; }
    const ERHAPI_VendorType* GetTypeOrNull() const { if (Type_IsSet) return &Type_Optional; return nullptr; }
    void SetType(ERHAPI_VendorType NewValue) { Type_Optional = NewValue; Type_IsSet = true; }
    void ClearType() { Type_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 LegacyType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool LegacyType_IsSet{ false };
    int32& GetLegacyType() { return LegacyType_Optional; }
    const int32& GetLegacyType() const { return LegacyType_Optional; }
    const int32& GetLegacyType(const int32& DefaultValue) const { if (LegacyType_IsSet) return LegacyType_Optional; return DefaultValue; }
    bool GetLegacyType(int32& OutValue) const { if (LegacyType_IsSet) OutValue = LegacyType_Optional; return LegacyType_IsSet; }
    int32* GetLegacyTypeOrNull() { if (LegacyType_IsSet) return &LegacyType_Optional; return nullptr; }
    const int32* GetLegacyTypeOrNull() const { if (LegacyType_IsSet) return &LegacyType_Optional; return nullptr; }
    void SetLegacyType(int32 NewValue) { LegacyType_Optional = NewValue; LegacyType_IsSet = true; }
    void ClearLegacyType() { LegacyType_Optional = 0; LegacyType_IsSet = false; }
    bool IsLegacyTypeDefaultValue() const { return LegacyType_IsSet && LegacyType_Optional == 0; }
    void SetLegacyTypeToDefault() { LegacyType_Optional = 0; LegacyType_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 LegacyConfigVersion_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool LegacyConfigVersion_IsSet{ false };
    int32& GetLegacyConfigVersion() { return LegacyConfigVersion_Optional; }
    const int32& GetLegacyConfigVersion() const { return LegacyConfigVersion_Optional; }
    const int32& GetLegacyConfigVersion(const int32& DefaultValue) const { if (LegacyConfigVersion_IsSet) return LegacyConfigVersion_Optional; return DefaultValue; }
    bool GetLegacyConfigVersion(int32& OutValue) const { if (LegacyConfigVersion_IsSet) OutValue = LegacyConfigVersion_Optional; return LegacyConfigVersion_IsSet; }
    int32* GetLegacyConfigVersionOrNull() { if (LegacyConfigVersion_IsSet) return &LegacyConfigVersion_Optional; return nullptr; }
    const int32* GetLegacyConfigVersionOrNull() const { if (LegacyConfigVersion_IsSet) return &LegacyConfigVersion_Optional; return nullptr; }
    void SetLegacyConfigVersion(int32 NewValue) { LegacyConfigVersion_Optional = NewValue; LegacyConfigVersion_IsSet = true; }
    void ClearLegacyConfigVersion() { LegacyConfigVersion_Optional = 0; LegacyConfigVersion_IsSet = false; }
    bool IsLegacyConfigVersionDefaultValue() const { return LegacyConfigVersion_IsSet && LegacyConfigVersion_Optional == 0; }
    void SetLegacyConfigVersionToDefault() { LegacyConfigVersion_Optional = 0; LegacyConfigVersion_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FRHAPI_Loot> Loot_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Loot_IsSet{ false };
    TMap<FString, FRHAPI_Loot>& GetLoot() { return Loot_Optional; }
    const TMap<FString, FRHAPI_Loot>& GetLoot() const { return Loot_Optional; }
    const TMap<FString, FRHAPI_Loot>& GetLoot(const TMap<FString, FRHAPI_Loot>& DefaultValue) const { if (Loot_IsSet) return Loot_Optional; return DefaultValue; }
    bool GetLoot(TMap<FString, FRHAPI_Loot>& OutValue) const { if (Loot_IsSet) OutValue = Loot_Optional; return Loot_IsSet; }
    TMap<FString, FRHAPI_Loot>* GetLootOrNull() { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    const TMap<FString, FRHAPI_Loot>* GetLootOrNull() const { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    void SetLoot(TMap<FString, FRHAPI_Loot> NewValue) { Loot_Optional = NewValue; Loot_IsSet = true; }
    void ClearLoot() { Loot_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
    void ClearCacheInfo() { CacheInfo_IsSet = false; }
};
