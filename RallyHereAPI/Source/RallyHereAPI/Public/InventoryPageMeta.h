/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SortOrder.h"
#include "InventoryPageMeta.generated.h"

/*
* FRHAPI_InventoryPageMeta
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InventoryPageMeta : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime StartingPosition_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool StartingPosition_IsSet{ false };
    FDateTime& GetStartingPosition() { return StartingPosition_Optional; }
    const FDateTime& GetStartingPosition() const { return StartingPosition_Optional; }
    const FDateTime& GetStartingPosition(const FDateTime& DefaultValue) const { if (StartingPosition_IsSet) return StartingPosition_Optional; return DefaultValue; }
    bool GetStartingPosition(FDateTime& OutValue) const { if (StartingPosition_IsSet) OutValue = StartingPosition_Optional; return StartingPosition_IsSet; }
    FDateTime* GetStartingPositionOrNull() { if (StartingPosition_IsSet) return &StartingPosition_Optional; return nullptr; }
    const FDateTime* GetStartingPositionOrNull() const { if (StartingPosition_IsSet) return &StartingPosition_Optional; return nullptr; }
    void SetStartingPosition(FDateTime NewValue) { StartingPosition_Optional = NewValue; StartingPosition_IsSet = true; }
    void ClearStartingPosition() { StartingPosition_IsSet = false; }

    /* The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Cursor_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Cursor_IsSet{ false };
    FString& GetCursor() { return Cursor_Optional; }
    const FString& GetCursor() const { return Cursor_Optional; }
    const FString& GetCursor(const FString& DefaultValue) const { if (Cursor_IsSet) return Cursor_Optional; return DefaultValue; }
    bool GetCursor(FString& OutValue) const { if (Cursor_IsSet) OutValue = Cursor_Optional; return Cursor_IsSet; }
    FString* GetCursorOrNull() { if (Cursor_IsSet) return &Cursor_Optional; return nullptr; }
    const FString* GetCursorOrNull() const { if (Cursor_IsSet) return &Cursor_Optional; return nullptr; }
    void SetCursor(FString NewValue) { Cursor_Optional = NewValue; Cursor_IsSet = true; }
    void ClearCursor() { Cursor_IsSet = false; }

    /* The direction to search. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_SortOrder Sort_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Sort_IsSet{ false };
    ERHAPI_SortOrder& GetSort() { return Sort_Optional; }
    const ERHAPI_SortOrder& GetSort() const { return Sort_Optional; }
    const ERHAPI_SortOrder& GetSort(const ERHAPI_SortOrder& DefaultValue) const { if (Sort_IsSet) return Sort_Optional; return DefaultValue; }
    bool GetSort(ERHAPI_SortOrder& OutValue) const { if (Sort_IsSet) OutValue = Sort_Optional; return Sort_IsSet; }
    ERHAPI_SortOrder* GetSortOrNull() { if (Sort_IsSet) return &Sort_Optional; return nullptr; }
    const ERHAPI_SortOrder* GetSortOrNull() const { if (Sort_IsSet) return &Sort_Optional; return nullptr; }
    void SetSort(ERHAPI_SortOrder NewValue) { Sort_Optional = NewValue; Sort_IsSet = true; }
    void ClearSort() { Sort_IsSet = false; }

    /* The number of Orders to return */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 Limit_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Limit_IsSet{ false };
    int32& GetLimit() { return Limit_Optional; }
    const int32& GetLimit() const { return Limit_Optional; }
    const int32& GetLimit(const int32& DefaultValue) const { if (Limit_IsSet) return Limit_Optional; return DefaultValue; }
    bool GetLimit(int32& OutValue) const { if (Limit_IsSet) OutValue = Limit_Optional; return Limit_IsSet; }
    int32* GetLimitOrNull() { if (Limit_IsSet) return &Limit_Optional; return nullptr; }
    const int32* GetLimitOrNull() const { if (Limit_IsSet) return &Limit_Optional; return nullptr; }
    void SetLimit(int32 NewValue) { Limit_Optional = NewValue; Limit_IsSet = true; }
    void ClearLimit() { Limit_Optional = 10; Limit_IsSet = false; }
    bool IsLimitDefaultValue() const { return Limit_IsSet && Limit_Optional == 10; }
    void SetLimitToDefault() { Limit_Optional = 10; Limit_IsSet = true; }
};
