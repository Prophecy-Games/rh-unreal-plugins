/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SendInBlueContact.generated.h"

/*
* FRHAPI_SendInBlueContact
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SendInBlueContact : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Email{  };
    FString& GetEmail() { return Email; }
    const FString& GetEmail() const { return Email; }
    void SetEmail(FString NewValue) { Email = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_JsonObject Attributes_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Attributes_IsSet{ false };
    FRHAPI_JsonObject& GetAttributes() { return Attributes_Optional; }
    const FRHAPI_JsonObject& GetAttributes() const { return Attributes_Optional; }
    const FRHAPI_JsonObject& GetAttributes(const FRHAPI_JsonObject& DefaultValue) const { if (Attributes_IsSet) return Attributes_Optional; return DefaultValue; }
    bool GetAttributes(FRHAPI_JsonObject& OutValue) const { if (Attributes_IsSet) OutValue = Attributes_Optional; return Attributes_IsSet; }
    FRHAPI_JsonObject* GetAttributesOrNull() { if (Attributes_IsSet) return &Attributes_Optional; return nullptr; }
    const FRHAPI_JsonObject* GetAttributesOrNull() const { if (Attributes_IsSet) return &Attributes_Optional; return nullptr; }
    void SetAttributes(FRHAPI_JsonObject NewValue) { Attributes_Optional = NewValue; Attributes_IsSet = true; }
    void ClearAttributes() { Attributes_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool EmailBlacklisted_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool EmailBlacklisted_IsSet{ false };
    bool& GetEmailBlacklisted() { return EmailBlacklisted_Optional; }
    const bool& GetEmailBlacklisted() const { return EmailBlacklisted_Optional; }
    const bool& GetEmailBlacklisted(const bool& DefaultValue) const { if (EmailBlacklisted_IsSet) return EmailBlacklisted_Optional; return DefaultValue; }
    bool GetEmailBlacklisted(bool& OutValue) const { if (EmailBlacklisted_IsSet) OutValue = EmailBlacklisted_Optional; return EmailBlacklisted_IsSet; }
    bool* GetEmailBlacklistedOrNull() { if (EmailBlacklisted_IsSet) return &EmailBlacklisted_Optional; return nullptr; }
    const bool* GetEmailBlacklistedOrNull() const { if (EmailBlacklisted_IsSet) return &EmailBlacklisted_Optional; return nullptr; }
    void SetEmailBlacklisted(bool NewValue) { EmailBlacklisted_Optional = NewValue; EmailBlacklisted_IsSet = true; }
    void ClearEmailBlacklisted() { EmailBlacklisted_Optional = false; EmailBlacklisted_IsSet = false; }
    bool IsEmailBlacklistedDefaultValue() const { return EmailBlacklisted_IsSet && EmailBlacklisted_Optional == false; }
    void SetEmailBlacklistedToDefault() { EmailBlacklisted_Optional = false; EmailBlacklisted_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<int32> ListIds_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ListIds_IsSet{ false };
    TArray<int32>& GetListIds() { return ListIds_Optional; }
    const TArray<int32>& GetListIds() const { return ListIds_Optional; }
    const TArray<int32>& GetListIds(const TArray<int32>& DefaultValue) const { if (ListIds_IsSet) return ListIds_Optional; return DefaultValue; }
    bool GetListIds(TArray<int32>& OutValue) const { if (ListIds_IsSet) OutValue = ListIds_Optional; return ListIds_IsSet; }
    TArray<int32>* GetListIdsOrNull() { if (ListIds_IsSet) return &ListIds_Optional; return nullptr; }
    const TArray<int32>* GetListIdsOrNull() const { if (ListIds_IsSet) return &ListIds_Optional; return nullptr; }
    void SetListIds(TArray<int32> NewValue) { ListIds_Optional = NewValue; ListIds_IsSet = true; }
    void ClearListIds() { ListIds_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<int32> UnlinkListIds_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UnlinkListIds_IsSet{ false };
    TArray<int32>& GetUnlinkListIds() { return UnlinkListIds_Optional; }
    const TArray<int32>& GetUnlinkListIds() const { return UnlinkListIds_Optional; }
    const TArray<int32>& GetUnlinkListIds(const TArray<int32>& DefaultValue) const { if (UnlinkListIds_IsSet) return UnlinkListIds_Optional; return DefaultValue; }
    bool GetUnlinkListIds(TArray<int32>& OutValue) const { if (UnlinkListIds_IsSet) OutValue = UnlinkListIds_Optional; return UnlinkListIds_IsSet; }
    TArray<int32>* GetUnlinkListIdsOrNull() { if (UnlinkListIds_IsSet) return &UnlinkListIds_Optional; return nullptr; }
    const TArray<int32>* GetUnlinkListIdsOrNull() const { if (UnlinkListIds_IsSet) return &UnlinkListIds_Optional; return nullptr; }
    void SetUnlinkListIds(TArray<int32> NewValue) { UnlinkListIds_Optional = NewValue; UnlinkListIds_IsSet = true; }
    void ClearUnlinkListIds() { UnlinkListIds_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UpdateEnabled_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UpdateEnabled_IsSet{ false };
    bool& GetUpdateEnabled() { return UpdateEnabled_Optional; }
    const bool& GetUpdateEnabled() const { return UpdateEnabled_Optional; }
    const bool& GetUpdateEnabled(const bool& DefaultValue) const { if (UpdateEnabled_IsSet) return UpdateEnabled_Optional; return DefaultValue; }
    bool GetUpdateEnabled(bool& OutValue) const { if (UpdateEnabled_IsSet) OutValue = UpdateEnabled_Optional; return UpdateEnabled_IsSet; }
    bool* GetUpdateEnabledOrNull() { if (UpdateEnabled_IsSet) return &UpdateEnabled_Optional; return nullptr; }
    const bool* GetUpdateEnabledOrNull() const { if (UpdateEnabled_IsSet) return &UpdateEnabled_Optional; return nullptr; }
    void SetUpdateEnabled(bool NewValue) { UpdateEnabled_Optional = NewValue; UpdateEnabled_IsSet = true; }
    void ClearUpdateEnabled() { UpdateEnabled_Optional = false; UpdateEnabled_IsSet = false; }
    bool IsUpdateEnabledDefaultValue() const { return UpdateEnabled_IsSet && UpdateEnabled_Optional == false; }
    void SetUpdateEnabledToDefault() { UpdateEnabled_Optional = false; UpdateEnabled_IsSet = true; }
};
