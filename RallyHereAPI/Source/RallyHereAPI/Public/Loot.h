/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "InventoryBucket.h"
#include "InventoryOperation.h"
#include "InventorySelector.h"
#include "Item.h"
#include "QuantityType.h"
#include "XpQuantityTransform.h"
#include "Loot.generated.h"

/*
* FRHAPI_Loot
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Loot : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 LootId{ 0 };
    int32& GetLootId() { return LootId; }
    const int32& GetLootId() const { return LootId; }
    void SetLootId(int32 NewValue) { LootId = NewValue;  }
    bool IsLootIdDefaultValue() const { return LootId == 0; }
    void SetLootIdToDefault() { LootId = 0;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 VendorId{ 0 };
    int32& GetVendorId() { return VendorId; }
    const int32& GetVendorId() const { return VendorId; }
    void SetVendorId(int32 NewValue) { VendorId = NewValue;  }
    bool IsVendorIdDefaultValue() const { return VendorId == 0; }
    void SetVendorIdToDefault() { VendorId = 0;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 ItemId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ItemId_IsSet{ false };
    int32& GetItemId() { return ItemId_Optional; }
    const int32& GetItemId() const { return ItemId_Optional; }
    const int32& GetItemId(const int32& DefaultValue) const { if (ItemId_IsSet) return ItemId_Optional; return DefaultValue; }
    bool GetItemId(int32& OutValue) const { if (ItemId_IsSet) OutValue = ItemId_Optional; return ItemId_IsSet; }
    int32* GetItemIdOrNull() { if (ItemId_IsSet) return &ItemId_Optional; return nullptr; }
    const int32* GetItemIdOrNull() const { if (ItemId_IsSet) return &ItemId_Optional; return nullptr; }
    void SetItemId(int32 NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; }
    void ClearItemId() { ItemId_Optional = 0; ItemId_IsSet = false; }
    bool IsItemIdDefaultValue() const { return ItemId_IsSet && ItemId_Optional == 0; }
    void SetItemIdToDefault() { ItemId_Optional = 0; ItemId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Item Item_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Item_IsSet{ false };
    FRHAPI_Item& GetItem() { return Item_Optional; }
    const FRHAPI_Item& GetItem() const { return Item_Optional; }
    const FRHAPI_Item& GetItem(const FRHAPI_Item& DefaultValue) const { if (Item_IsSet) return Item_Optional; return DefaultValue; }
    bool GetItem(FRHAPI_Item& OutValue) const { if (Item_IsSet) OutValue = Item_Optional; return Item_IsSet; }
    FRHAPI_Item* GetItemOrNull() { if (Item_IsSet) return &Item_Optional; return nullptr; }
    const FRHAPI_Item* GetItemOrNull() const { if (Item_IsSet) return &Item_Optional; return nullptr; }
    void SetItem(FRHAPI_Item NewValue) { Item_Optional = NewValue; Item_IsSet = true; }
    void ClearItem() { Item_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SubVendorId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SubVendorId_IsSet{ false };
    int32& GetSubVendorId() { return SubVendorId_Optional; }
    const int32& GetSubVendorId() const { return SubVendorId_Optional; }
    const int32& GetSubVendorId(const int32& DefaultValue) const { if (SubVendorId_IsSet) return SubVendorId_Optional; return DefaultValue; }
    bool GetSubVendorId(int32& OutValue) const { if (SubVendorId_IsSet) OutValue = SubVendorId_Optional; return SubVendorId_IsSet; }
    int32* GetSubVendorIdOrNull() { if (SubVendorId_IsSet) return &SubVendorId_Optional; return nullptr; }
    const int32* GetSubVendorIdOrNull() const { if (SubVendorId_IsSet) return &SubVendorId_Optional; return nullptr; }
    void SetSubVendorId(int32 NewValue) { SubVendorId_Optional = NewValue; SubVendorId_IsSet = true; }
    void ClearSubVendorId() { SubVendorId_Optional = 0; SubVendorId_IsSet = false; }
    bool IsSubVendorIdDefaultValue() const { return SubVendorId_IsSet && SubVendorId_Optional == 0; }
    void SetSubVendorIdToDefault() { SubVendorId_Optional = 0; SubVendorId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 Quantity_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Quantity_IsSet{ false };
    int32& GetQuantity() { return Quantity_Optional; }
    const int32& GetQuantity() const { return Quantity_Optional; }
    const int32& GetQuantity(const int32& DefaultValue) const { if (Quantity_IsSet) return Quantity_Optional; return DefaultValue; }
    bool GetQuantity(int32& OutValue) const { if (Quantity_IsSet) OutValue = Quantity_Optional; return Quantity_IsSet; }
    int32* GetQuantityOrNull() { if (Quantity_IsSet) return &Quantity_Optional; return nullptr; }
    const int32* GetQuantityOrNull() const { if (Quantity_IsSet) return &Quantity_Optional; return nullptr; }
    void SetQuantity(int32 NewValue) { Quantity_Optional = NewValue; Quantity_IsSet = true; }
    void ClearQuantity() { Quantity_Optional = 0; Quantity_IsSet = false; }
    bool IsQuantityDefaultValue() const { return Quantity_IsSet && Quantity_Optional == 0; }
    void SetQuantityToDefault() { Quantity_Optional = 0; Quantity_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventorySelector InventorySelectorType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InventorySelectorType_IsSet{ false };
    ERHAPI_InventorySelector& GetInventorySelectorType() { return InventorySelectorType_Optional; }
    const ERHAPI_InventorySelector& GetInventorySelectorType() const { return InventorySelectorType_Optional; }
    const ERHAPI_InventorySelector& GetInventorySelectorType(const ERHAPI_InventorySelector& DefaultValue) const { if (InventorySelectorType_IsSet) return InventorySelectorType_Optional; return DefaultValue; }
    bool GetInventorySelectorType(ERHAPI_InventorySelector& OutValue) const { if (InventorySelectorType_IsSet) OutValue = InventorySelectorType_Optional; return InventorySelectorType_IsSet; }
    ERHAPI_InventorySelector* GetInventorySelectorTypeOrNull() { if (InventorySelectorType_IsSet) return &InventorySelectorType_Optional; return nullptr; }
    const ERHAPI_InventorySelector* GetInventorySelectorTypeOrNull() const { if (InventorySelectorType_IsSet) return &InventorySelectorType_Optional; return nullptr; }
    void SetInventorySelectorType(ERHAPI_InventorySelector NewValue) { InventorySelectorType_Optional = NewValue; InventorySelectorType_IsSet = true; }
    void ClearInventorySelectorType() { InventorySelectorType_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryOperation InventoryOperation_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InventoryOperation_IsSet{ false };
    ERHAPI_InventoryOperation& GetInventoryOperation() { return InventoryOperation_Optional; }
    const ERHAPI_InventoryOperation& GetInventoryOperation() const { return InventoryOperation_Optional; }
    const ERHAPI_InventoryOperation& GetInventoryOperation(const ERHAPI_InventoryOperation& DefaultValue) const { if (InventoryOperation_IsSet) return InventoryOperation_Optional; return DefaultValue; }
    bool GetInventoryOperation(ERHAPI_InventoryOperation& OutValue) const { if (InventoryOperation_IsSet) OutValue = InventoryOperation_Optional; return InventoryOperation_IsSet; }
    ERHAPI_InventoryOperation* GetInventoryOperationOrNull() { if (InventoryOperation_IsSet) return &InventoryOperation_Optional; return nullptr; }
    const ERHAPI_InventoryOperation* GetInventoryOperationOrNull() const { if (InventoryOperation_IsSet) return &InventoryOperation_Optional; return nullptr; }
    void SetInventoryOperation(ERHAPI_InventoryOperation NewValue) { InventoryOperation_Optional = NewValue; InventoryOperation_IsSet = true; }
    void ClearInventoryOperation() { InventoryOperation_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active_IsSet{ false };
    bool& GetActive() { return Active_Optional; }
    const bool& GetActive() const { return Active_Optional; }
    const bool& GetActive(const bool& DefaultValue) const { if (Active_IsSet) return Active_Optional; return DefaultValue; }
    bool GetActive(bool& OutValue) const { if (Active_IsSet) OutValue = Active_Optional; return Active_IsSet; }
    bool* GetActiveOrNull() { if (Active_IsSet) return &Active_Optional; return nullptr; }
    const bool* GetActiveOrNull() const { if (Active_IsSet) return &Active_Optional; return nullptr; }
    void SetActive(bool NewValue) { Active_Optional = NewValue; Active_IsSet = true; }
    void ClearActive() { Active_Optional = false; Active_IsSet = false; }
    bool IsActiveDefaultValue() const { return Active_IsSet && Active_Optional == false; }
    void SetActiveToDefault() { Active_Optional = false; Active_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SortOrder_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SortOrder_IsSet{ false };
    int32& GetSortOrder() { return SortOrder_Optional; }
    const int32& GetSortOrder() const { return SortOrder_Optional; }
    const int32& GetSortOrder(const int32& DefaultValue) const { if (SortOrder_IsSet) return SortOrder_Optional; return DefaultValue; }
    bool GetSortOrder(int32& OutValue) const { if (SortOrder_IsSet) OutValue = SortOrder_Optional; return SortOrder_IsSet; }
    int32* GetSortOrderOrNull() { if (SortOrder_IsSet) return &SortOrder_Optional; return nullptr; }
    const int32* GetSortOrderOrNull() const { if (SortOrder_IsSet) return &SortOrder_Optional; return nullptr; }
    void SetSortOrder(int32 NewValue) { SortOrder_Optional = NewValue; SortOrder_IsSet = true; }
    void ClearSortOrder() { SortOrder_Optional = 0; SortOrder_IsSet = false; }
    bool IsSortOrderDefaultValue() const { return SortOrder_IsSet && SortOrder_Optional == 0; }
    void SetSortOrderToDefault() { SortOrder_Optional = 0; SortOrder_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 DropWeight_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool DropWeight_IsSet{ false };
    int32& GetDropWeight() { return DropWeight_Optional; }
    const int32& GetDropWeight() const { return DropWeight_Optional; }
    const int32& GetDropWeight(const int32& DefaultValue) const { if (DropWeight_IsSet) return DropWeight_Optional; return DefaultValue; }
    bool GetDropWeight(int32& OutValue) const { if (DropWeight_IsSet) OutValue = DropWeight_Optional; return DropWeight_IsSet; }
    int32* GetDropWeightOrNull() { if (DropWeight_IsSet) return &DropWeight_Optional; return nullptr; }
    const int32* GetDropWeightOrNull() const { if (DropWeight_IsSet) return &DropWeight_Optional; return nullptr; }
    void SetDropWeight(int32 NewValue) { DropWeight_Optional = NewValue; DropWeight_IsSet = true; }
    void ClearDropWeight() { DropWeight_Optional = 0; DropWeight_IsSet = false; }
    bool IsDropWeightDefaultValue() const { return DropWeight_IsSet && DropWeight_Optional == 0; }
    void SetDropWeightToDefault() { DropWeight_Optional = 0; DropWeight_IsSet = true; }

    /* When dropped in a randomly sampled vendor, will this create a new order or fill inline? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool FillInNewOrder_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool FillInNewOrder_IsSet{ false };
    bool& GetFillInNewOrder() { return FillInNewOrder_Optional; }
    const bool& GetFillInNewOrder() const { return FillInNewOrder_Optional; }
    const bool& GetFillInNewOrder(const bool& DefaultValue) const { if (FillInNewOrder_IsSet) return FillInNewOrder_Optional; return DefaultValue; }
    bool GetFillInNewOrder(bool& OutValue) const { if (FillInNewOrder_IsSet) OutValue = FillInNewOrder_Optional; return FillInNewOrder_IsSet; }
    bool* GetFillInNewOrderOrNull() { if (FillInNewOrder_IsSet) return &FillInNewOrder_Optional; return nullptr; }
    const bool* GetFillInNewOrderOrNull() const { if (FillInNewOrder_IsSet) return &FillInNewOrder_Optional; return nullptr; }
    void SetFillInNewOrder(bool NewValue) { FillInNewOrder_Optional = NewValue; FillInNewOrder_IsSet = true; }
    void ClearFillInNewOrder() { FillInNewOrder_Optional = false; FillInNewOrder_IsSet = false; }
    bool IsFillInNewOrderDefaultValue() const { return FillInNewOrder_IsSet && FillInNewOrder_Optional == false; }
    void SetFillInNewOrderToDefault() { FillInNewOrder_Optional = false; FillInNewOrder_IsSet = true; }

    /* When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllowPartialBundles_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllowPartialBundles_IsSet{ false };
    bool& GetAllowPartialBundles() { return AllowPartialBundles_Optional; }
    const bool& GetAllowPartialBundles() const { return AllowPartialBundles_Optional; }
    const bool& GetAllowPartialBundles(const bool& DefaultValue) const { if (AllowPartialBundles_IsSet) return AllowPartialBundles_Optional; return DefaultValue; }
    bool GetAllowPartialBundles(bool& OutValue) const { if (AllowPartialBundles_IsSet) OutValue = AllowPartialBundles_Optional; return AllowPartialBundles_IsSet; }
    bool* GetAllowPartialBundlesOrNull() { if (AllowPartialBundles_IsSet) return &AllowPartialBundles_Optional; return nullptr; }
    const bool* GetAllowPartialBundlesOrNull() const { if (AllowPartialBundles_IsSet) return &AllowPartialBundles_Optional; return nullptr; }
    void SetAllowPartialBundles(bool NewValue) { AllowPartialBundles_Optional = NewValue; AllowPartialBundles_IsSet = true; }
    void ClearAllowPartialBundles() { AllowPartialBundles_Optional = true; AllowPartialBundles_IsSet = false; }
    bool IsAllowPartialBundlesDefaultValue() const { return AllowPartialBundles_IsSet && AllowPartialBundles_Optional == true; }
    void SetAllowPartialBundlesToDefault() { AllowPartialBundles_Optional = true; AllowPartialBundles_IsSet = true; }

    /* Item required to be owned/rented to drop this Loot in a randomly sampled vendor */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 RequiredItemId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RequiredItemId_IsSet{ false };
    int32& GetRequiredItemId() { return RequiredItemId_Optional; }
    const int32& GetRequiredItemId() const { return RequiredItemId_Optional; }
    const int32& GetRequiredItemId(const int32& DefaultValue) const { if (RequiredItemId_IsSet) return RequiredItemId_Optional; return DefaultValue; }
    bool GetRequiredItemId(int32& OutValue) const { if (RequiredItemId_IsSet) OutValue = RequiredItemId_Optional; return RequiredItemId_IsSet; }
    int32* GetRequiredItemIdOrNull() { if (RequiredItemId_IsSet) return &RequiredItemId_Optional; return nullptr; }
    const int32* GetRequiredItemIdOrNull() const { if (RequiredItemId_IsSet) return &RequiredItemId_Optional; return nullptr; }
    void SetRequiredItemId(int32 NewValue) { RequiredItemId_Optional = NewValue; RequiredItemId_IsSet = true; }
    void ClearRequiredItemId() { RequiredItemId_Optional = 0; RequiredItemId_IsSet = false; }
    bool IsRequiredItemIdDefaultValue() const { return RequiredItemId_IsSet && RequiredItemId_Optional == 0; }
    void SetRequiredItemIdToDefault() { RequiredItemId_Optional = 0; RequiredItemId_IsSet = true; }

    /* Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 RequiredItemCount_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RequiredItemCount_IsSet{ false };
    int32& GetRequiredItemCount() { return RequiredItemCount_Optional; }
    const int32& GetRequiredItemCount() const { return RequiredItemCount_Optional; }
    const int32& GetRequiredItemCount(const int32& DefaultValue) const { if (RequiredItemCount_IsSet) return RequiredItemCount_Optional; return DefaultValue; }
    bool GetRequiredItemCount(int32& OutValue) const { if (RequiredItemCount_IsSet) OutValue = RequiredItemCount_Optional; return RequiredItemCount_IsSet; }
    int32* GetRequiredItemCountOrNull() { if (RequiredItemCount_IsSet) return &RequiredItemCount_Optional; return nullptr; }
    const int32* GetRequiredItemCountOrNull() const { if (RequiredItemCount_IsSet) return &RequiredItemCount_Optional; return nullptr; }
    void SetRequiredItemCount(int32 NewValue) { RequiredItemCount_Optional = NewValue; RequiredItemCount_IsSet = true; }
    void ClearRequiredItemCount() { RequiredItemCount_Optional = 0; RequiredItemCount_IsSet = false; }
    bool IsRequiredItemCountDefaultValue() const { return RequiredItemCount_IsSet && RequiredItemCount_Optional == 0; }
    void SetRequiredItemCountToDefault() { RequiredItemCount_Optional = 0; RequiredItemCount_IsSet = true; }

    /* Amount of owned/rented of this Loot's item that will prevent this loot from droppping in a randomly sampled vendor */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 StackLimit_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool StackLimit_IsSet{ false };
    int32& GetStackLimit() { return StackLimit_Optional; }
    const int32& GetStackLimit() const { return StackLimit_Optional; }
    const int32& GetStackLimit(const int32& DefaultValue) const { if (StackLimit_IsSet) return StackLimit_Optional; return DefaultValue; }
    bool GetStackLimit(int32& OutValue) const { if (StackLimit_IsSet) OutValue = StackLimit_Optional; return StackLimit_IsSet; }
    int32* GetStackLimitOrNull() { if (StackLimit_IsSet) return &StackLimit_Optional; return nullptr; }
    const int32* GetStackLimitOrNull() const { if (StackLimit_IsSet) return &StackLimit_Optional; return nullptr; }
    void SetStackLimit(int32 NewValue) { StackLimit_Optional = NewValue; StackLimit_IsSet = true; }
    void ClearStackLimit() { StackLimit_Optional = 0; StackLimit_IsSet = false; }
    bool IsStackLimitDefaultValue() const { return StackLimit_IsSet && StackLimit_Optional == 0; }
    void SetStackLimitToDefault() { StackLimit_Optional = 0; StackLimit_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 UiHint_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UiHint_IsSet{ false };
    int32& GetUiHint() { return UiHint_Optional; }
    const int32& GetUiHint() const { return UiHint_Optional; }
    const int32& GetUiHint(const int32& DefaultValue) const { if (UiHint_IsSet) return UiHint_Optional; return DefaultValue; }
    bool GetUiHint(int32& OutValue) const { if (UiHint_IsSet) OutValue = UiHint_Optional; return UiHint_IsSet; }
    int32* GetUiHintOrNull() { if (UiHint_IsSet) return &UiHint_Optional; return nullptr; }
    const int32* GetUiHintOrNull() const { if (UiHint_IsSet) return &UiHint_Optional; return nullptr; }
    void SetUiHint(int32 NewValue) { UiHint_Optional = NewValue; UiHint_IsSet = true; }
    void ClearUiHint() { UiHint_Optional = 0; UiHint_IsSet = false; }
    bool IsUiHintDefaultValue() const { return UiHint_IsSet && UiHint_Optional == 0; }
    void SetUiHintToDefault() { UiHint_Optional = 0; UiHint_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime EffectiveFrom_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool EffectiveFrom_IsSet{ false };
    FDateTime& GetEffectiveFrom() { return EffectiveFrom_Optional; }
    const FDateTime& GetEffectiveFrom() const { return EffectiveFrom_Optional; }
    const FDateTime& GetEffectiveFrom(const FDateTime& DefaultValue) const { if (EffectiveFrom_IsSet) return EffectiveFrom_Optional; return DefaultValue; }
    bool GetEffectiveFrom(FDateTime& OutValue) const { if (EffectiveFrom_IsSet) OutValue = EffectiveFrom_Optional; return EffectiveFrom_IsSet; }
    FDateTime* GetEffectiveFromOrNull() { if (EffectiveFrom_IsSet) return &EffectiveFrom_Optional; return nullptr; }
    const FDateTime* GetEffectiveFromOrNull() const { if (EffectiveFrom_IsSet) return &EffectiveFrom_Optional; return nullptr; }
    void SetEffectiveFrom(FDateTime NewValue) { EffectiveFrom_Optional = NewValue; EffectiveFrom_IsSet = true; }
    void ClearEffectiveFrom() { EffectiveFrom_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_QuantityType QuantityType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool QuantityType_IsSet{ false };
    ERHAPI_QuantityType& GetQuantityType() { return QuantityType_Optional; }
    const ERHAPI_QuantityType& GetQuantityType() const { return QuantityType_Optional; }
    const ERHAPI_QuantityType& GetQuantityType(const ERHAPI_QuantityType& DefaultValue) const { if (QuantityType_IsSet) return QuantityType_Optional; return DefaultValue; }
    bool GetQuantityType(ERHAPI_QuantityType& OutValue) const { if (QuantityType_IsSet) OutValue = QuantityType_Optional; return QuantityType_IsSet; }
    ERHAPI_QuantityType* GetQuantityTypeOrNull() { if (QuantityType_IsSet) return &QuantityType_Optional; return nullptr; }
    const ERHAPI_QuantityType* GetQuantityTypeOrNull() const { if (QuantityType_IsSet) return &QuantityType_Optional; return nullptr; }
    void SetQuantityType(ERHAPI_QuantityType NewValue) { QuantityType_Optional = NewValue; QuantityType_IsSet = true; }
    void ClearQuantityType() { QuantityType_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 QuantityMultInventoryItemId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool QuantityMultInventoryItemId_IsSet{ false };
    int32& GetQuantityMultInventoryItemId() { return QuantityMultInventoryItemId_Optional; }
    const int32& GetQuantityMultInventoryItemId() const { return QuantityMultInventoryItemId_Optional; }
    const int32& GetQuantityMultInventoryItemId(const int32& DefaultValue) const { if (QuantityMultInventoryItemId_IsSet) return QuantityMultInventoryItemId_Optional; return DefaultValue; }
    bool GetQuantityMultInventoryItemId(int32& OutValue) const { if (QuantityMultInventoryItemId_IsSet) OutValue = QuantityMultInventoryItemId_Optional; return QuantityMultInventoryItemId_IsSet; }
    int32* GetQuantityMultInventoryItemIdOrNull() { if (QuantityMultInventoryItemId_IsSet) return &QuantityMultInventoryItemId_Optional; return nullptr; }
    const int32* GetQuantityMultInventoryItemIdOrNull() const { if (QuantityMultInventoryItemId_IsSet) return &QuantityMultInventoryItemId_Optional; return nullptr; }
    void SetQuantityMultInventoryItemId(int32 NewValue) { QuantityMultInventoryItemId_Optional = NewValue; QuantityMultInventoryItemId_IsSet = true; }
    void ClearQuantityMultInventoryItemId() { QuantityMultInventoryItemId_Optional = 0; QuantityMultInventoryItemId_IsSet = false; }
    bool IsQuantityMultInventoryItemIdDefaultValue() const { return QuantityMultInventoryItemId_IsSet && QuantityMultInventoryItemId_Optional == 0; }
    void SetQuantityMultInventoryItemIdToDefault() { QuantityMultInventoryItemId_Optional = 0; QuantityMultInventoryItemId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool IsClaimableByClient_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool IsClaimableByClient_IsSet{ false };
    bool& GetIsClaimableByClient() { return IsClaimableByClient_Optional; }
    const bool& GetIsClaimableByClient() const { return IsClaimableByClient_Optional; }
    const bool& GetIsClaimableByClient(const bool& DefaultValue) const { if (IsClaimableByClient_IsSet) return IsClaimableByClient_Optional; return DefaultValue; }
    bool GetIsClaimableByClient(bool& OutValue) const { if (IsClaimableByClient_IsSet) OutValue = IsClaimableByClient_Optional; return IsClaimableByClient_IsSet; }
    bool* GetIsClaimableByClientOrNull() { if (IsClaimableByClient_IsSet) return &IsClaimableByClient_Optional; return nullptr; }
    const bool* GetIsClaimableByClientOrNull() const { if (IsClaimableByClient_IsSet) return &IsClaimableByClient_Optional; return nullptr; }
    void SetIsClaimableByClient(bool NewValue) { IsClaimableByClient_Optional = NewValue; IsClaimableByClient_IsSet = true; }
    void ClearIsClaimableByClient() { IsClaimableByClient_Optional = false; IsClaimableByClient_IsSet = false; }
    bool IsIsClaimableByClientDefaultValue() const { return IsClaimableByClient_IsSet && IsClaimableByClient_Optional == false; }
    void SetIsClaimableByClientToDefault() { IsClaimableByClient_Optional = false; IsClaimableByClient_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 TimeFrameId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TimeFrameId_IsSet{ false };
    int32& GetTimeFrameId() { return TimeFrameId_Optional; }
    const int32& GetTimeFrameId() const { return TimeFrameId_Optional; }
    const int32& GetTimeFrameId(const int32& DefaultValue) const { if (TimeFrameId_IsSet) return TimeFrameId_Optional; return DefaultValue; }
    bool GetTimeFrameId(int32& OutValue) const { if (TimeFrameId_IsSet) OutValue = TimeFrameId_Optional; return TimeFrameId_IsSet; }
    int32* GetTimeFrameIdOrNull() { if (TimeFrameId_IsSet) return &TimeFrameId_Optional; return nullptr; }
    const int32* GetTimeFrameIdOrNull() const { if (TimeFrameId_IsSet) return &TimeFrameId_Optional; return nullptr; }
    void SetTimeFrameId(int32 NewValue) { TimeFrameId_Optional = NewValue; TimeFrameId_IsSet = true; }
    void ClearTimeFrameId() { TimeFrameId_Optional = 0; TimeFrameId_IsSet = false; }
    bool IsTimeFrameIdDefaultValue() const { return TimeFrameId_IsSet && TimeFrameId_Optional == 0; }
    void SetTimeFrameIdToDefault() { TimeFrameId_Optional = 0; TimeFrameId_IsSet = true; }

    /* Inventory Bucket to use for this Loot. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryBucket UseInventoryBucket_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UseInventoryBucket_IsSet{ false };
    ERHAPI_InventoryBucket& GetUseInventoryBucket() { return UseInventoryBucket_Optional; }
    const ERHAPI_InventoryBucket& GetUseInventoryBucket() const { return UseInventoryBucket_Optional; }
    const ERHAPI_InventoryBucket& GetUseInventoryBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (UseInventoryBucket_IsSet) return UseInventoryBucket_Optional; return DefaultValue; }
    bool GetUseInventoryBucket(ERHAPI_InventoryBucket& OutValue) const { if (UseInventoryBucket_IsSet) OutValue = UseInventoryBucket_Optional; return UseInventoryBucket_IsSet; }
    ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() { if (UseInventoryBucket_IsSet) return &UseInventoryBucket_Optional; return nullptr; }
    const ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() const { if (UseInventoryBucket_IsSet) return &UseInventoryBucket_Optional; return nullptr; }
    void SetUseInventoryBucket(ERHAPI_InventoryBucket NewValue) { UseInventoryBucket_Optional = NewValue; UseInventoryBucket_IsSet = true; }
    void ClearUseInventoryBucket() { UseInventoryBucket_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_XpQuantityTransform XpQuantityTransformType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool XpQuantityTransformType_IsSet{ false };
    ERHAPI_XpQuantityTransform& GetXpQuantityTransformType() { return XpQuantityTransformType_Optional; }
    const ERHAPI_XpQuantityTransform& GetXpQuantityTransformType() const { return XpQuantityTransformType_Optional; }
    const ERHAPI_XpQuantityTransform& GetXpQuantityTransformType(const ERHAPI_XpQuantityTransform& DefaultValue) const { if (XpQuantityTransformType_IsSet) return XpQuantityTransformType_Optional; return DefaultValue; }
    bool GetXpQuantityTransformType(ERHAPI_XpQuantityTransform& OutValue) const { if (XpQuantityTransformType_IsSet) OutValue = XpQuantityTransformType_Optional; return XpQuantityTransformType_IsSet; }
    ERHAPI_XpQuantityTransform* GetXpQuantityTransformTypeOrNull() { if (XpQuantityTransformType_IsSet) return &XpQuantityTransformType_Optional; return nullptr; }
    const ERHAPI_XpQuantityTransform* GetXpQuantityTransformTypeOrNull() const { if (XpQuantityTransformType_IsSet) return &XpQuantityTransformType_Optional; return nullptr; }
    void SetXpQuantityTransformType(ERHAPI_XpQuantityTransform NewValue) { XpQuantityTransformType_Optional = NewValue; XpQuantityTransformType_IsSet = true; }
    void ClearXpQuantityTransformType() { XpQuantityTransformType_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString CurrentPricePointGuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CurrentPricePointGuid_IsSet{ false };
    FString& GetCurrentPricePointGuid() { return CurrentPricePointGuid_Optional; }
    const FString& GetCurrentPricePointGuid() const { return CurrentPricePointGuid_Optional; }
    const FString& GetCurrentPricePointGuid(const FString& DefaultValue) const { if (CurrentPricePointGuid_IsSet) return CurrentPricePointGuid_Optional; return DefaultValue; }
    bool GetCurrentPricePointGuid(FString& OutValue) const { if (CurrentPricePointGuid_IsSet) OutValue = CurrentPricePointGuid_Optional; return CurrentPricePointGuid_IsSet; }
    FString* GetCurrentPricePointGuidOrNull() { if (CurrentPricePointGuid_IsSet) return &CurrentPricePointGuid_Optional; return nullptr; }
    const FString* GetCurrentPricePointGuidOrNull() const { if (CurrentPricePointGuid_IsSet) return &CurrentPricePointGuid_Optional; return nullptr; }
    void SetCurrentPricePointGuid(FString NewValue) { CurrentPricePointGuid_Optional = NewValue; CurrentPricePointGuid_IsSet = true; }
    void ClearCurrentPricePointGuid() { CurrentPricePointGuid_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PreSalePricePointGuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PreSalePricePointGuid_IsSet{ false };
    FString& GetPreSalePricePointGuid() { return PreSalePricePointGuid_Optional; }
    const FString& GetPreSalePricePointGuid() const { return PreSalePricePointGuid_Optional; }
    const FString& GetPreSalePricePointGuid(const FString& DefaultValue) const { if (PreSalePricePointGuid_IsSet) return PreSalePricePointGuid_Optional; return DefaultValue; }
    bool GetPreSalePricePointGuid(FString& OutValue) const { if (PreSalePricePointGuid_IsSet) OutValue = PreSalePricePointGuid_Optional; return PreSalePricePointGuid_IsSet; }
    FString* GetPreSalePricePointGuidOrNull() { if (PreSalePricePointGuid_IsSet) return &PreSalePricePointGuid_Optional; return nullptr; }
    const FString* GetPreSalePricePointGuidOrNull() const { if (PreSalePricePointGuid_IsSet) return &PreSalePricePointGuid_Optional; return nullptr; }
    void SetPreSalePricePointGuid(FString NewValue) { PreSalePricePointGuid_Optional = NewValue; PreSalePricePointGuid_IsSet = true; }
    void ClearPreSalePricePointGuid() { PreSalePricePointGuid_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
    void ClearCacheInfo() { CacheInfo_IsSet = false; }

    /* Hard cap on quantity of an item this Loot can give. Disabled with 0 */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 HardQuantityMaximum_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HardQuantityMaximum_IsSet{ false };
    int32& GetHardQuantityMaximum() { return HardQuantityMaximum_Optional; }
    const int32& GetHardQuantityMaximum() const { return HardQuantityMaximum_Optional; }
    const int32& GetHardQuantityMaximum(const int32& DefaultValue) const { if (HardQuantityMaximum_IsSet) return HardQuantityMaximum_Optional; return DefaultValue; }
    bool GetHardQuantityMaximum(int32& OutValue) const { if (HardQuantityMaximum_IsSet) OutValue = HardQuantityMaximum_Optional; return HardQuantityMaximum_IsSet; }
    int32* GetHardQuantityMaximumOrNull() { if (HardQuantityMaximum_IsSet) return &HardQuantityMaximum_Optional; return nullptr; }
    const int32* GetHardQuantityMaximumOrNull() const { if (HardQuantityMaximum_IsSet) return &HardQuantityMaximum_Optional; return nullptr; }
    void SetHardQuantityMaximum(int32 NewValue) { HardQuantityMaximum_Optional = NewValue; HardQuantityMaximum_IsSet = true; }
    void ClearHardQuantityMaximum() { HardQuantityMaximum_Optional = 0; HardQuantityMaximum_IsSet = false; }
    bool IsHardQuantityMaximumDefaultValue() const { return HardQuantityMaximum_IsSet && HardQuantityMaximum_Optional == 0; }
    void SetHardQuantityMaximumToDefault() { HardQuantityMaximum_Optional = 0; HardQuantityMaximum_IsSet = true; }
};
