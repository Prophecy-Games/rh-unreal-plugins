/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "OAuthTokenExchange.generated.h"

/*
* FRHAPI_OAuthTokenExchange
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_OAuthTokenExchange : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString GrantType{  };
    FString& GetGrantType() { return GrantType; }
    const FString& GetGrantType() const { return GrantType; }
    void SetGrantType(FString NewValue) { GrantType = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Code{  };
    FString& GetCode() { return Code; }
    const FString& GetCode() const { return Code; }
    void SetCode(FString NewValue) { Code = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptedEula_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptedEula_IsSet{ false };
    bool& GetAcceptedEula() { return AcceptedEula_Optional; }
    const bool& GetAcceptedEula() const { return AcceptedEula_Optional; }
    const bool& GetAcceptedEula(const bool& DefaultValue) const { if (AcceptedEula_IsSet) return AcceptedEula_Optional; return DefaultValue; }
    bool GetAcceptedEula(bool& OutValue) const { if (AcceptedEula_IsSet) OutValue = AcceptedEula_Optional; return AcceptedEula_IsSet; }
    bool* GetAcceptedEulaOrNull() { if (AcceptedEula_IsSet) return &AcceptedEula_Optional; return nullptr; }
    const bool* GetAcceptedEulaOrNull() const { if (AcceptedEula_IsSet) return &AcceptedEula_Optional; return nullptr; }
    void SetAcceptedEula(bool NewValue) { AcceptedEula_Optional = NewValue; AcceptedEula_IsSet = true; }
    void ClearAcceptedEula() { AcceptedEula_Optional = false; AcceptedEula_IsSet = false; }
    bool IsAcceptedEulaDefaultValue() const { return AcceptedEula_IsSet && AcceptedEula_Optional == false; }
    void SetAcceptedEulaToDefault() { AcceptedEula_Optional = false; AcceptedEula_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptedTos_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptedTos_IsSet{ false };
    bool& GetAcceptedTos() { return AcceptedTos_Optional; }
    const bool& GetAcceptedTos() const { return AcceptedTos_Optional; }
    const bool& GetAcceptedTos(const bool& DefaultValue) const { if (AcceptedTos_IsSet) return AcceptedTos_Optional; return DefaultValue; }
    bool GetAcceptedTos(bool& OutValue) const { if (AcceptedTos_IsSet) OutValue = AcceptedTos_Optional; return AcceptedTos_IsSet; }
    bool* GetAcceptedTosOrNull() { if (AcceptedTos_IsSet) return &AcceptedTos_Optional; return nullptr; }
    const bool* GetAcceptedTosOrNull() const { if (AcceptedTos_IsSet) return &AcceptedTos_Optional; return nullptr; }
    void SetAcceptedTos(bool NewValue) { AcceptedTos_Optional = NewValue; AcceptedTos_IsSet = true; }
    void ClearAcceptedTos() { AcceptedTos_Optional = false; AcceptedTos_IsSet = false; }
    bool IsAcceptedTosDefaultValue() const { return AcceptedTos_IsSet && AcceptedTos_Optional == false; }
    void SetAcceptedTosToDefault() { AcceptedTos_Optional = false; AcceptedTos_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptedPrivacyPolicy_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptedPrivacyPolicy_IsSet{ false };
    bool& GetAcceptedPrivacyPolicy() { return AcceptedPrivacyPolicy_Optional; }
    const bool& GetAcceptedPrivacyPolicy() const { return AcceptedPrivacyPolicy_Optional; }
    const bool& GetAcceptedPrivacyPolicy(const bool& DefaultValue) const { if (AcceptedPrivacyPolicy_IsSet) return AcceptedPrivacyPolicy_Optional; return DefaultValue; }
    bool GetAcceptedPrivacyPolicy(bool& OutValue) const { if (AcceptedPrivacyPolicy_IsSet) OutValue = AcceptedPrivacyPolicy_Optional; return AcceptedPrivacyPolicy_IsSet; }
    bool* GetAcceptedPrivacyPolicyOrNull() { if (AcceptedPrivacyPolicy_IsSet) return &AcceptedPrivacyPolicy_Optional; return nullptr; }
    const bool* GetAcceptedPrivacyPolicyOrNull() const { if (AcceptedPrivacyPolicy_IsSet) return &AcceptedPrivacyPolicy_Optional; return nullptr; }
    void SetAcceptedPrivacyPolicy(bool NewValue) { AcceptedPrivacyPolicy_Optional = NewValue; AcceptedPrivacyPolicy_IsSet = true; }
    void ClearAcceptedPrivacyPolicy() { AcceptedPrivacyPolicy_Optional = false; AcceptedPrivacyPolicy_IsSet = false; }
    bool IsAcceptedPrivacyPolicyDefaultValue() const { return AcceptedPrivacyPolicy_IsSet && AcceptedPrivacyPolicy_Optional == false; }
    void SetAcceptedPrivacyPolicyToDefault() { AcceptedPrivacyPolicy_Optional = false; AcceptedPrivacyPolicy_IsSet = true; }
};
