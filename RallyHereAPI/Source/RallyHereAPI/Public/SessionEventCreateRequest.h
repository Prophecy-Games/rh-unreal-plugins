/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SessionEventCreateRequest.generated.h"

/*
* FRHAPI_SessionEventCreateRequest
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionEventCreateRequest : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Code that identifies this type of event.  See CommonEventCode for common examples. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString EventCode{  };
    FString& GetEventCode() { return EventCode; }
    const FString& GetEventCode() const { return EventCode; }
    void SetEventCode(FString NewValue) { EventCode = NewValue;  }

    /* Description metadata about the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Description_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Description_IsSet{ false };
    FString& GetDescription() { return Description_Optional; }
    const FString& GetDescription() const { return Description_Optional; }
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
    void ClearDescription() { Description_Optional = TEXT(""); Description_IsSet = false; }
    bool IsDescriptionDefaultValue() const { return Description_IsSet && Description_Optional == TEXT(""); }
    void SetDescriptionToDefault() { Description_Optional = TEXT(""); Description_IsSet = true; }

    /* custom data about this event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Timestamp{  };
    FDateTime& GetTimestamp() { return Timestamp; }
    const FDateTime& GetTimestamp() const { return Timestamp; }
    void SetTimestamp(FDateTime NewValue) { Timestamp = NewValue;  }
};
