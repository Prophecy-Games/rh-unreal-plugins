/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "InstanceLaunchTemplate.h"
#include "MatchMakingTemplateGroup.h"
#include "QueuesResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GetAllMapGameInfo;
struct FResponse_GetAllMapGameInfo;
struct FRequest_GetAllQueueInfo;
struct FResponse_GetAllQueueInfo;
struct FRequest_GetMatchMakingTemplates;
struct FResponse_GetMatchMakingTemplates;

DECLARE_DELEGATE_OneParam(FDelegate_GetAllMapGameInfo, const FResponse_GetAllMapGameInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllQueueInfo, const FResponse_GetAllQueueInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchMakingTemplates, const FResponse_GetMatchMakingTemplates&);

class RALLYHEREAPI_API FQueuesAPI : public FAPI
{
public:
    FQueuesAPI();
    virtual ~FQueuesAPI();

    FHttpRequestPtr GetAllMapGameInfo(const FRequest_GetAllMapGameInfo& Request, const FDelegate_GetAllMapGameInfo& Delegate = FDelegate_GetAllMapGameInfo());
    FHttpRequestPtr GetAllQueueInfo(const FRequest_GetAllQueueInfo& Request, const FDelegate_GetAllQueueInfo& Delegate = FDelegate_GetAllQueueInfo());
    FHttpRequestPtr GetMatchMakingTemplates(const FRequest_GetMatchMakingTemplates& Request, const FDelegate_GetMatchMakingTemplates& Delegate = FDelegate_GetMatchMakingTemplates());

private:
    void OnGetAllMapGameInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllMapGameInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetAllQueueInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllQueueInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetMatchMakingTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchMakingTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);

};

/* Get All Map Game Info
 *
 * Get all the match game info
*/
struct RALLYHEREAPI_API FRequest_GetAllMapGameInfo : public FRequest
{
    FRequest_GetAllMapGameInfo();
    virtual ~FRequest_GetAllMapGameInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid InstanceLaunchTemplateId;
};

struct RALLYHEREAPI_API FResponse_GetAllMapGameInfo : public FResponse
{
    FResponse_GetAllMapGameInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllMapGameInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_InstanceLaunchTemplate Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetAllMapGameInfo
{
    typedef FRequest_GetAllMapGameInfo Request;
    typedef FResponse_GetAllMapGameInfo Response;
    typedef FDelegate_GetAllMapGameInfo Delegate;
    typedef FQueuesAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetAllMapGameInfo(InRequest, InDelegate); }
};

/* Get All Queue Info
 *
 * Get all the available queues, maps, and map selection lists
*/
struct RALLYHEREAPI_API FRequest_GetAllQueueInfo : public FRequest
{
    FRequest_GetAllQueueInfo();
    virtual ~FRequest_GetAllQueueInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 Page = 0;
    int32 PageSize = 0;
};

struct RALLYHEREAPI_API FResponse_GetAllQueueInfo : public FResponse
{
    FResponse_GetAllQueueInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllQueueInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_QueuesResponse Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetAllQueueInfo
{
    typedef FRequest_GetAllQueueInfo Request;
    typedef FResponse_GetAllQueueInfo Response;
    typedef FDelegate_GetAllQueueInfo Delegate;
    typedef FQueuesAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetAllQueueInfo(InRequest, InDelegate); }
};

/* Get Match Making Templates
 *
 * Get match making templates and rules
*/
struct RALLYHEREAPI_API FRequest_GetMatchMakingTemplates : public FRequest
{
    FRequest_GetMatchMakingTemplates();
    virtual ~FRequest_GetMatchMakingTemplates() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid TemplateGroupId;
};

struct RALLYHEREAPI_API FResponse_GetMatchMakingTemplates : public FResponse
{
    FResponse_GetMatchMakingTemplates(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetMatchMakingTemplates() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchMakingTemplateGroup Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetMatchMakingTemplates
{
    typedef FRequest_GetMatchMakingTemplates Request;
    typedef FResponse_GetMatchMakingTemplates Response;
    typedef FDelegate_GetMatchMakingTemplates Delegate;
    typedef FQueuesAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetMatchMakingTemplates(InRequest, InDelegate); }
};


}
