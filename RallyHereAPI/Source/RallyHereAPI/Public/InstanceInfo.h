/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "HostType.h"
#include "InstanceJoinableStatus.h"
#include "InstanceStartupParams.h"
#include "JoinParams.h"
#include "InstanceInfo.generated.h"

/*
* FRHAPI_InstanceInfo
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InstanceInfo : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Allocation ID for instance that's been spun up */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString AllocationId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllocationId_IsSet{ false };
    FString& GetAllocationId() { return AllocationId_Optional; }
    const FString& GetAllocationId() const { return AllocationId_Optional; }
    const FString& GetAllocationId(const FString& DefaultValue) const { if (AllocationId_IsSet) return AllocationId_Optional; return DefaultValue; }
    bool GetAllocationId(FString& OutValue) const { if (AllocationId_IsSet) OutValue = AllocationId_Optional; return AllocationId_IsSet; }
    FString* GetAllocationIdOrNull() { if (AllocationId_IsSet) return &AllocationId_Optional; return nullptr; }
    const FString* GetAllocationIdOrNull() const { if (AllocationId_IsSet) return &AllocationId_Optional; return nullptr; }
    void SetAllocationId(FString NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true; }
    void ClearAllocationId() { AllocationId_IsSet = false; }

    /* Unique ID for the host/session relationship */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString InstanceId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InstanceId_IsSet{ false };
    FString& GetInstanceId() { return InstanceId_Optional; }
    const FString& GetInstanceId() const { return InstanceId_Optional; }
    const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
    bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
    FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    void SetInstanceId(FString NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; }
    void ClearInstanceId() { InstanceId_IsSet = false; }

    /* Type of the host */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_HostType HostType{  };
    ERHAPI_HostType& GetHostType() { return HostType; }
    const ERHAPI_HostType& GetHostType() const { return HostType; }
    void SetHostType(ERHAPI_HostType NewValue) { HostType = NewValue;  }

    /* Player ID of the host, if the host type is player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 HostPlayerId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HostPlayerId_IsSet{ false };
    int32& GetHostPlayerId() { return HostPlayerId_Optional; }
    const int32& GetHostPlayerId() const { return HostPlayerId_Optional; }
    const int32& GetHostPlayerId(const int32& DefaultValue) const { if (HostPlayerId_IsSet) return HostPlayerId_Optional; return DefaultValue; }
    bool GetHostPlayerId(int32& OutValue) const { if (HostPlayerId_IsSet) OutValue = HostPlayerId_Optional; return HostPlayerId_IsSet; }
    int32* GetHostPlayerIdOrNull() { if (HostPlayerId_IsSet) return &HostPlayerId_Optional; return nullptr; }
    const int32* GetHostPlayerIdOrNull() const { if (HostPlayerId_IsSet) return &HostPlayerId_Optional; return nullptr; }
    void SetHostPlayerId(int32 NewValue) { HostPlayerId_Optional = NewValue; HostPlayerId_IsSet = true; }
    void ClearHostPlayerId() { HostPlayerId_Optional = 0; HostPlayerId_IsSet = false; }
    bool IsHostPlayerIdDefaultValue() const { return HostPlayerId_IsSet && HostPlayerId_Optional == 0; }
    void SetHostPlayerIdToDefault() { HostPlayerId_Optional = 0; HostPlayerId_IsSet = true; }

    /* Player UUID of the host, if the host type is player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid HostPlayerUuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HostPlayerUuid_IsSet{ false };
    FGuid& GetHostPlayerUuid() { return HostPlayerUuid_Optional; }
    const FGuid& GetHostPlayerUuid() const { return HostPlayerUuid_Optional; }
    const FGuid& GetHostPlayerUuid(const FGuid& DefaultValue) const { if (HostPlayerUuid_IsSet) return HostPlayerUuid_Optional; return DefaultValue; }
    bool GetHostPlayerUuid(FGuid& OutValue) const { if (HostPlayerUuid_IsSet) OutValue = HostPlayerUuid_Optional; return HostPlayerUuid_IsSet; }
    FGuid* GetHostPlayerUuidOrNull() { if (HostPlayerUuid_IsSet) return &HostPlayerUuid_Optional; return nullptr; }
    const FGuid* GetHostPlayerUuidOrNull() const { if (HostPlayerUuid_IsSet) return &HostPlayerUuid_Optional; return nullptr; }
    void SetHostPlayerUuid(FGuid NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true; }
    void ClearHostPlayerUuid() { HostPlayerUuid_IsSet = false; }

    /* Unique ID for the process that is running this instance */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString HostDedicatedProcessId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HostDedicatedProcessId_IsSet{ false };
    FString& GetHostDedicatedProcessId() { return HostDedicatedProcessId_Optional; }
    const FString& GetHostDedicatedProcessId() const { return HostDedicatedProcessId_Optional; }
    const FString& GetHostDedicatedProcessId(const FString& DefaultValue) const { if (HostDedicatedProcessId_IsSet) return HostDedicatedProcessId_Optional; return DefaultValue; }
    bool GetHostDedicatedProcessId(FString& OutValue) const { if (HostDedicatedProcessId_IsSet) OutValue = HostDedicatedProcessId_Optional; return HostDedicatedProcessId_IsSet; }
    FString* GetHostDedicatedProcessIdOrNull() { if (HostDedicatedProcessId_IsSet) return &HostDedicatedProcessId_Optional; return nullptr; }
    const FString* GetHostDedicatedProcessIdOrNull() const { if (HostDedicatedProcessId_IsSet) return &HostDedicatedProcessId_Optional; return nullptr; }
    void SetHostDedicatedProcessId(FString NewValue) { HostDedicatedProcessId_Optional = NewValue; HostDedicatedProcessId_IsSet = true; }
    void ClearHostDedicatedProcessId() { HostDedicatedProcessId_IsSet = false; }

    /* Unique ID for the machine running the instance */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString HostDedicatedServerId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HostDedicatedServerId_IsSet{ false };
    FString& GetHostDedicatedServerId() { return HostDedicatedServerId_Optional; }
    const FString& GetHostDedicatedServerId() const { return HostDedicatedServerId_Optional; }
    const FString& GetHostDedicatedServerId(const FString& DefaultValue) const { if (HostDedicatedServerId_IsSet) return HostDedicatedServerId_Optional; return DefaultValue; }
    bool GetHostDedicatedServerId(FString& OutValue) const { if (HostDedicatedServerId_IsSet) OutValue = HostDedicatedServerId_Optional; return HostDedicatedServerId_IsSet; }
    FString* GetHostDedicatedServerIdOrNull() { if (HostDedicatedServerId_IsSet) return &HostDedicatedServerId_Optional; return nullptr; }
    const FString* GetHostDedicatedServerIdOrNull() const { if (HostDedicatedServerId_IsSet) return &HostDedicatedServerId_Optional; return nullptr; }
    void SetHostDedicatedServerId(FString NewValue) { HostDedicatedServerId_Optional = NewValue; HostDedicatedServerId_IsSet = true; }
    void ClearHostDedicatedServerId() { HostDedicatedServerId_IsSet = false; }

    /* Is the instance joinable at this time? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InstanceJoinableStatus JoinStatus{  };
    ERHAPI_InstanceJoinableStatus& GetJoinStatus() { return JoinStatus; }
    const ERHAPI_InstanceJoinableStatus& GetJoinStatus() const { return JoinStatus; }
    void SetJoinStatus(ERHAPI_InstanceJoinableStatus NewValue) { JoinStatus = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_JoinParams JoinParams_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool JoinParams_IsSet{ false };
    FRHAPI_JoinParams& GetJoinParams() { return JoinParams_Optional; }
    const FRHAPI_JoinParams& GetJoinParams() const { return JoinParams_Optional; }
    const FRHAPI_JoinParams& GetJoinParams(const FRHAPI_JoinParams& DefaultValue) const { if (JoinParams_IsSet) return JoinParams_Optional; return DefaultValue; }
    bool GetJoinParams(FRHAPI_JoinParams& OutValue) const { if (JoinParams_IsSet) OutValue = JoinParams_Optional; return JoinParams_IsSet; }
    FRHAPI_JoinParams* GetJoinParamsOrNull() { if (JoinParams_IsSet) return &JoinParams_Optional; return nullptr; }
    const FRHAPI_JoinParams* GetJoinParamsOrNull() const { if (JoinParams_IsSet) return &JoinParams_Optional; return nullptr; }
    void SetJoinParams(FRHAPI_JoinParams NewValue) { JoinParams_Optional = NewValue; JoinParams_IsSet = true; }
    void ClearJoinParams() { JoinParams_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_InstanceStartupParams InstanceStartupParams_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InstanceStartupParams_IsSet{ false };
    FRHAPI_InstanceStartupParams& GetInstanceStartupParams() { return InstanceStartupParams_Optional; }
    const FRHAPI_InstanceStartupParams& GetInstanceStartupParams() const { return InstanceStartupParams_Optional; }
    const FRHAPI_InstanceStartupParams& GetInstanceStartupParams(const FRHAPI_InstanceStartupParams& DefaultValue) const { if (InstanceStartupParams_IsSet) return InstanceStartupParams_Optional; return DefaultValue; }
    bool GetInstanceStartupParams(FRHAPI_InstanceStartupParams& OutValue) const { if (InstanceStartupParams_IsSet) OutValue = InstanceStartupParams_Optional; return InstanceStartupParams_IsSet; }
    FRHAPI_InstanceStartupParams* GetInstanceStartupParamsOrNull() { if (InstanceStartupParams_IsSet) return &InstanceStartupParams_Optional; return nullptr; }
    const FRHAPI_InstanceStartupParams* GetInstanceStartupParamsOrNull() const { if (InstanceStartupParams_IsSet) return &InstanceStartupParams_Optional; return nullptr; }
    void SetInstanceStartupParams(FRHAPI_InstanceStartupParams NewValue) { InstanceStartupParams_Optional = NewValue; InstanceStartupParams_IsSet = true; }
    void ClearInstanceStartupParams() { InstanceStartupParams_IsSet = false; }

    /* Product Client Version number.  Used for compatibility checking with players */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Version_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Version_IsSet{ false };
    FString& GetVersion() { return Version_Optional; }
    const FString& GetVersion() const { return Version_Optional; }
    const FString& GetVersion(const FString& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
    bool GetVersion(FString& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
    FString* GetVersionOrNull() { if (Version_IsSet) return &Version_Optional; return nullptr; }
    const FString* GetVersionOrNull() const { if (Version_IsSet) return &Version_Optional; return nullptr; }
    void SetVersion(FString NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
    void ClearVersion() { Version_IsSet = false; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Created{  };
    FDateTime& GetCreated() { return Created; }
    const FDateTime& GetCreated() const { return Created; }
    void SetCreated(FDateTime NewValue) { Created = NewValue;  }

    /* instance-defined custom data */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }
};
