/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "AutoStartupParams.h"
#include "PlatformSessionTemplate.h"
#include "SessionTemplate.generated.h"

/*
* FRHAPI_SessionTemplate
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionTemplate : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* unique name for this template */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString SessionType{  };
    FString& GetSessionType() { return SessionType; }
    const FString& GetSessionType() const { return SessionType; }
    void SetSessionType(FString NewValue) { SessionType = NewValue;  }

    /* Engine identifier for sessions of this type.  For UE, this is commonly `Party` or `Game`. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString EngineSessionType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool EngineSessionType_IsSet{ false };
    FString& GetEngineSessionType() { return EngineSessionType_Optional; }
    const FString& GetEngineSessionType() const { return EngineSessionType_Optional; }
    const FString& GetEngineSessionType(const FString& DefaultValue) const { if (EngineSessionType_IsSet) return EngineSessionType_Optional; return DefaultValue; }
    bool GetEngineSessionType(FString& OutValue) const { if (EngineSessionType_IsSet) OutValue = EngineSessionType_Optional; return EngineSessionType_IsSet; }
    FString* GetEngineSessionTypeOrNull() { if (EngineSessionType_IsSet) return &EngineSessionType_Optional; return nullptr; }
    const FString* GetEngineSessionTypeOrNull() const { if (EngineSessionType_IsSet) return &EngineSessionType_Optional; return nullptr; }
    void SetEngineSessionType(FString NewValue) { EngineSessionType_Optional = NewValue; EngineSessionType_IsSet = true; }
    void ClearEngineSessionType() { EngineSessionType_Optional = TEXT("Game"); EngineSessionType_IsSet = false; }
    bool IsEngineSessionTypeDefaultValue() const { return EngineSessionType_IsSet && EngineSessionType_Optional == TEXT("Game"); }
    void SetEngineSessionTypeToDefault() { EngineSessionType_Optional = TEXT("Game"); EngineSessionType_IsSet = true; }

    /* Are sessions of this type allowed to join matchmaking? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanJoinMatchmaking_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanJoinMatchmaking_IsSet{ false };
    bool& GetCanJoinMatchmaking() { return CanJoinMatchmaking_Optional; }
    const bool& GetCanJoinMatchmaking() const { return CanJoinMatchmaking_Optional; }
    const bool& GetCanJoinMatchmaking(const bool& DefaultValue) const { if (CanJoinMatchmaking_IsSet) return CanJoinMatchmaking_Optional; return DefaultValue; }
    bool GetCanJoinMatchmaking(bool& OutValue) const { if (CanJoinMatchmaking_IsSet) OutValue = CanJoinMatchmaking_Optional; return CanJoinMatchmaking_IsSet; }
    bool* GetCanJoinMatchmakingOrNull() { if (CanJoinMatchmaking_IsSet) return &CanJoinMatchmaking_Optional; return nullptr; }
    const bool* GetCanJoinMatchmakingOrNull() const { if (CanJoinMatchmaking_IsSet) return &CanJoinMatchmaking_Optional; return nullptr; }
    void SetCanJoinMatchmaking(bool NewValue) { CanJoinMatchmaking_Optional = NewValue; CanJoinMatchmaking_IsSet = true; }
    void ClearCanJoinMatchmaking() { CanJoinMatchmaking_Optional = false; CanJoinMatchmaking_IsSet = false; }
    bool IsCanJoinMatchmakingDefaultValue() const { return CanJoinMatchmaking_IsSet && CanJoinMatchmaking_Optional == false; }
    void SetCanJoinMatchmakingToDefault() { CanJoinMatchmaking_Optional = false; CanJoinMatchmaking_IsSet = true; }

    /* Are players allowed to create sessions of this type? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanBeCreatedByPlayersDirectly_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanBeCreatedByPlayersDirectly_IsSet{ false };
    bool& GetCanBeCreatedByPlayersDirectly() { return CanBeCreatedByPlayersDirectly_Optional; }
    const bool& GetCanBeCreatedByPlayersDirectly() const { return CanBeCreatedByPlayersDirectly_Optional; }
    const bool& GetCanBeCreatedByPlayersDirectly(const bool& DefaultValue) const { if (CanBeCreatedByPlayersDirectly_IsSet) return CanBeCreatedByPlayersDirectly_Optional; return DefaultValue; }
    bool GetCanBeCreatedByPlayersDirectly(bool& OutValue) const { if (CanBeCreatedByPlayersDirectly_IsSet) OutValue = CanBeCreatedByPlayersDirectly_Optional; return CanBeCreatedByPlayersDirectly_IsSet; }
    bool* GetCanBeCreatedByPlayersDirectlyOrNull() { if (CanBeCreatedByPlayersDirectly_IsSet) return &CanBeCreatedByPlayersDirectly_Optional; return nullptr; }
    const bool* GetCanBeCreatedByPlayersDirectlyOrNull() const { if (CanBeCreatedByPlayersDirectly_IsSet) return &CanBeCreatedByPlayersDirectly_Optional; return nullptr; }
    void SetCanBeCreatedByPlayersDirectly(bool NewValue) { CanBeCreatedByPlayersDirectly_Optional = NewValue; CanBeCreatedByPlayersDirectly_IsSet = true; }
    void ClearCanBeCreatedByPlayersDirectly() { CanBeCreatedByPlayersDirectly_Optional = false; CanBeCreatedByPlayersDirectly_IsSet = false; }
    bool IsCanBeCreatedByPlayersDirectlyDefaultValue() const { return CanBeCreatedByPlayersDirectly_IsSet && CanBeCreatedByPlayersDirectly_Optional == false; }
    void SetCanBeCreatedByPlayersDirectlyToDefault() { CanBeCreatedByPlayersDirectly_Optional = false; CanBeCreatedByPlayersDirectly_IsSet = true; }

    /* Should players join existing sessions of this type before creating a new one */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Joinable_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Joinable_IsSet{ false };
    bool& GetJoinable() { return Joinable_Optional; }
    const bool& GetJoinable() const { return Joinable_Optional; }
    const bool& GetJoinable(const bool& DefaultValue) const { if (Joinable_IsSet) return Joinable_Optional; return DefaultValue; }
    bool GetJoinable(bool& OutValue) const { if (Joinable_IsSet) OutValue = Joinable_Optional; return Joinable_IsSet; }
    bool* GetJoinableOrNull() { if (Joinable_IsSet) return &Joinable_Optional; return nullptr; }
    const bool* GetJoinableOrNull() const { if (Joinable_IsSet) return &Joinable_Optional; return nullptr; }
    void SetJoinable(bool NewValue) { Joinable_Optional = NewValue; Joinable_IsSet = true; }
    void ClearJoinable() { Joinable_Optional = false; Joinable_IsSet = false; }
    bool IsJoinableDefaultValue() const { return Joinable_IsSet && Joinable_Optional == false; }
    void SetJoinableToDefault() { Joinable_Optional = false; Joinable_IsSet = true; }

    /* Should session be automatically added to the browser list */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AutoAddToBrowser_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AutoAddToBrowser_IsSet{ false };
    bool& GetAutoAddToBrowser() { return AutoAddToBrowser_Optional; }
    const bool& GetAutoAddToBrowser() const { return AutoAddToBrowser_Optional; }
    const bool& GetAutoAddToBrowser(const bool& DefaultValue) const { if (AutoAddToBrowser_IsSet) return AutoAddToBrowser_Optional; return DefaultValue; }
    bool GetAutoAddToBrowser(bool& OutValue) const { if (AutoAddToBrowser_IsSet) OutValue = AutoAddToBrowser_Optional; return AutoAddToBrowser_IsSet; }
    bool* GetAutoAddToBrowserOrNull() { if (AutoAddToBrowser_IsSet) return &AutoAddToBrowser_Optional; return nullptr; }
    const bool* GetAutoAddToBrowserOrNull() const { if (AutoAddToBrowser_IsSet) return &AutoAddToBrowser_Optional; return nullptr; }
    void SetAutoAddToBrowser(bool NewValue) { AutoAddToBrowser_Optional = NewValue; AutoAddToBrowser_IsSet = true; }
    void ClearAutoAddToBrowser() { AutoAddToBrowser_Optional = false; AutoAddToBrowser_IsSet = false; }
    bool IsAutoAddToBrowserDefaultValue() const { return AutoAddToBrowser_IsSet && AutoAddToBrowser_Optional == false; }
    void SetAutoAddToBrowserToDefault() { AutoAddToBrowser_Optional = false; AutoAddToBrowser_IsSet = true; }

    /* Browser parameters that can be used to filter results */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> AutoBrowserParams_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AutoBrowserParams_IsSet{ false };
    TMap<FString, FString>& GetAutoBrowserParams() { return AutoBrowserParams_Optional; }
    const TMap<FString, FString>& GetAutoBrowserParams() const { return AutoBrowserParams_Optional; }
    const TMap<FString, FString>& GetAutoBrowserParams(const TMap<FString, FString>& DefaultValue) const { if (AutoBrowserParams_IsSet) return AutoBrowserParams_Optional; return DefaultValue; }
    bool GetAutoBrowserParams(TMap<FString, FString>& OutValue) const { if (AutoBrowserParams_IsSet) OutValue = AutoBrowserParams_Optional; return AutoBrowserParams_IsSet; }
    TMap<FString, FString>* GetAutoBrowserParamsOrNull() { if (AutoBrowserParams_IsSet) return &AutoBrowserParams_Optional; return nullptr; }
    const TMap<FString, FString>* GetAutoBrowserParamsOrNull() const { if (AutoBrowserParams_IsSet) return &AutoBrowserParams_Optional; return nullptr; }
    void SetAutoBrowserParams(TMap<FString, FString> NewValue) { AutoBrowserParams_Optional = NewValue; AutoBrowserParams_IsSet = true; }
    void ClearAutoBrowserParams() { AutoBrowserParams_IsSet = false; }

    /* Are sessions of this type able to be added to the server browser by players? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanBeAddedToServerBrowser_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanBeAddedToServerBrowser_IsSet{ false };
    bool& GetCanBeAddedToServerBrowser() { return CanBeAddedToServerBrowser_Optional; }
    const bool& GetCanBeAddedToServerBrowser() const { return CanBeAddedToServerBrowser_Optional; }
    const bool& GetCanBeAddedToServerBrowser(const bool& DefaultValue) const { if (CanBeAddedToServerBrowser_IsSet) return CanBeAddedToServerBrowser_Optional; return DefaultValue; }
    bool GetCanBeAddedToServerBrowser(bool& OutValue) const { if (CanBeAddedToServerBrowser_IsSet) OutValue = CanBeAddedToServerBrowser_Optional; return CanBeAddedToServerBrowser_IsSet; }
    bool* GetCanBeAddedToServerBrowserOrNull() { if (CanBeAddedToServerBrowser_IsSet) return &CanBeAddedToServerBrowser_Optional; return nullptr; }
    const bool* GetCanBeAddedToServerBrowserOrNull() const { if (CanBeAddedToServerBrowser_IsSet) return &CanBeAddedToServerBrowser_Optional; return nullptr; }
    void SetCanBeAddedToServerBrowser(bool NewValue) { CanBeAddedToServerBrowser_Optional = NewValue; CanBeAddedToServerBrowser_IsSet = true; }
    void ClearCanBeAddedToServerBrowser() { CanBeAddedToServerBrowser_Optional = false; CanBeAddedToServerBrowser_IsSet = false; }
    bool IsCanBeAddedToServerBrowserDefaultValue() const { return CanBeAddedToServerBrowser_IsSet && CanBeAddedToServerBrowser_Optional == false; }
    void SetCanBeAddedToServerBrowserToDefault() { CanBeAddedToServerBrowser_Optional = false; CanBeAddedToServerBrowser_IsSet = true; }

    /* Should the session stay around, or be destroyed when the last player leaves it? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool KeepAliveOnEmpty_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool KeepAliveOnEmpty_IsSet{ false };
    bool& GetKeepAliveOnEmpty() { return KeepAliveOnEmpty_Optional; }
    const bool& GetKeepAliveOnEmpty() const { return KeepAliveOnEmpty_Optional; }
    const bool& GetKeepAliveOnEmpty(const bool& DefaultValue) const { if (KeepAliveOnEmpty_IsSet) return KeepAliveOnEmpty_Optional; return DefaultValue; }
    bool GetKeepAliveOnEmpty(bool& OutValue) const { if (KeepAliveOnEmpty_IsSet) OutValue = KeepAliveOnEmpty_Optional; return KeepAliveOnEmpty_IsSet; }
    bool* GetKeepAliveOnEmptyOrNull() { if (KeepAliveOnEmpty_IsSet) return &KeepAliveOnEmpty_Optional; return nullptr; }
    const bool* GetKeepAliveOnEmptyOrNull() const { if (KeepAliveOnEmpty_IsSet) return &KeepAliveOnEmpty_Optional; return nullptr; }
    void SetKeepAliveOnEmpty(bool NewValue) { KeepAliveOnEmpty_Optional = NewValue; KeepAliveOnEmpty_IsSet = true; }
    void ClearKeepAliveOnEmpty() { KeepAliveOnEmpty_Optional = false; KeepAliveOnEmpty_IsSet = false; }
    bool IsKeepAliveOnEmptyDefaultValue() const { return KeepAliveOnEmpty_IsSet && KeepAliveOnEmpty_Optional == false; }
    void SetKeepAliveOnEmptyToDefault() { KeepAliveOnEmpty_Optional = false; KeepAliveOnEmpty_IsSet = true; }

    /* Platform-Specific session mappings that are used to coordinate Rally Here sessions with OnlineSubsystem sessions */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FRHAPI_PlatformSessionTemplate> PlatformTemplates_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlatformTemplates_IsSet{ false };
    TMap<FString, FRHAPI_PlatformSessionTemplate>& GetPlatformTemplates() { return PlatformTemplates_Optional; }
    const TMap<FString, FRHAPI_PlatformSessionTemplate>& GetPlatformTemplates() const { return PlatformTemplates_Optional; }
    const TMap<FString, FRHAPI_PlatformSessionTemplate>& GetPlatformTemplates(const TMap<FString, FRHAPI_PlatformSessionTemplate>& DefaultValue) const { if (PlatformTemplates_IsSet) return PlatformTemplates_Optional; return DefaultValue; }
    bool GetPlatformTemplates(TMap<FString, FRHAPI_PlatformSessionTemplate>& OutValue) const { if (PlatformTemplates_IsSet) OutValue = PlatformTemplates_Optional; return PlatformTemplates_IsSet; }
    TMap<FString, FRHAPI_PlatformSessionTemplate>* GetPlatformTemplatesOrNull() { if (PlatformTemplates_IsSet) return &PlatformTemplates_Optional; return nullptr; }
    const TMap<FString, FRHAPI_PlatformSessionTemplate>* GetPlatformTemplatesOrNull() const { if (PlatformTemplates_IsSet) return &PlatformTemplates_Optional; return nullptr; }
    void SetPlatformTemplates(TMap<FString, FRHAPI_PlatformSessionTemplate> NewValue) { PlatformTemplates_Optional = NewValue; PlatformTemplates_IsSet = true; }
    void ClearPlatformTemplates() { PlatformTemplates_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_AutoStartupParams AutoStartupParams_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AutoStartupParams_IsSet{ false };
    FRHAPI_AutoStartupParams& GetAutoStartupParams() { return AutoStartupParams_Optional; }
    const FRHAPI_AutoStartupParams& GetAutoStartupParams() const { return AutoStartupParams_Optional; }
    const FRHAPI_AutoStartupParams& GetAutoStartupParams(const FRHAPI_AutoStartupParams& DefaultValue) const { if (AutoStartupParams_IsSet) return AutoStartupParams_Optional; return DefaultValue; }
    bool GetAutoStartupParams(FRHAPI_AutoStartupParams& OutValue) const { if (AutoStartupParams_IsSet) OutValue = AutoStartupParams_Optional; return AutoStartupParams_IsSet; }
    FRHAPI_AutoStartupParams* GetAutoStartupParamsOrNull() { if (AutoStartupParams_IsSet) return &AutoStartupParams_Optional; return nullptr; }
    const FRHAPI_AutoStartupParams* GetAutoStartupParamsOrNull() const { if (AutoStartupParams_IsSet) return &AutoStartupParams_Optional; return nullptr; }
    void SetAutoStartupParams(FRHAPI_AutoStartupParams NewValue) { AutoStartupParams_Optional = NewValue; AutoStartupParams_IsSet = true; }
    void ClearAutoStartupParams() { AutoStartupParams_IsSet = false; }

    /* Minimum number of this type of session to be running at any given time per site. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 MinSessionCount_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool MinSessionCount_IsSet{ false };
    int32& GetMinSessionCount() { return MinSessionCount_Optional; }
    const int32& GetMinSessionCount() const { return MinSessionCount_Optional; }
    const int32& GetMinSessionCount(const int32& DefaultValue) const { if (MinSessionCount_IsSet) return MinSessionCount_Optional; return DefaultValue; }
    bool GetMinSessionCount(int32& OutValue) const { if (MinSessionCount_IsSet) OutValue = MinSessionCount_Optional; return MinSessionCount_IsSet; }
    int32* GetMinSessionCountOrNull() { if (MinSessionCount_IsSet) return &MinSessionCount_Optional; return nullptr; }
    const int32* GetMinSessionCountOrNull() const { if (MinSessionCount_IsSet) return &MinSessionCount_Optional; return nullptr; }
    void SetMinSessionCount(int32 NewValue) { MinSessionCount_Optional = NewValue; MinSessionCount_IsSet = true; }
    void ClearMinSessionCount() { MinSessionCount_Optional = 0; MinSessionCount_IsSet = false; }
    bool IsMinSessionCountDefaultValue() const { return MinSessionCount_IsSet && MinSessionCount_Optional == 0; }
    void SetMinSessionCountToDefault() { MinSessionCount_Optional = 0; MinSessionCount_IsSet = true; }

    /* Product-defined custom metadata */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> Metadata_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Metadata_IsSet{ false };
    TMap<FString, FString>& GetMetadata() { return Metadata_Optional; }
    const TMap<FString, FString>& GetMetadata() const { return Metadata_Optional; }
    const TMap<FString, FString>& GetMetadata(const TMap<FString, FString>& DefaultValue) const { if (Metadata_IsSet) return Metadata_Optional; return DefaultValue; }
    bool GetMetadata(TMap<FString, FString>& OutValue) const { if (Metadata_IsSet) OutValue = Metadata_Optional; return Metadata_IsSet; }
    TMap<FString, FString>* GetMetadataOrNull() { if (Metadata_IsSet) return &Metadata_Optional; return nullptr; }
    const TMap<FString, FString>* GetMetadataOrNull() const { if (Metadata_IsSet) return &Metadata_Optional; return nullptr; }
    void SetMetadata(TMap<FString, FString> NewValue) { Metadata_Optional = NewValue; Metadata_IsSet = true; }
    void ClearMetadata() { Metadata_IsSet = false; }

    /* The number of teams this session type can have */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 NumTeams_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NumTeams_IsSet{ false };
    int32& GetNumTeams() { return NumTeams_Optional; }
    const int32& GetNumTeams() const { return NumTeams_Optional; }
    const int32& GetNumTeams(const int32& DefaultValue) const { if (NumTeams_IsSet) return NumTeams_Optional; return DefaultValue; }
    bool GetNumTeams(int32& OutValue) const { if (NumTeams_IsSet) OutValue = NumTeams_Optional; return NumTeams_IsSet; }
    int32* GetNumTeamsOrNull() { if (NumTeams_IsSet) return &NumTeams_Optional; return nullptr; }
    const int32* GetNumTeamsOrNull() const { if (NumTeams_IsSet) return &NumTeams_Optional; return nullptr; }
    void SetNumTeams(int32 NewValue) { NumTeams_Optional = NewValue; NumTeams_IsSet = true; }
    void ClearNumTeams() { NumTeams_Optional = 1; NumTeams_IsSet = false; }
    bool IsNumTeamsDefaultValue() const { return NumTeams_IsSet && NumTeams_Optional == 1; }
    void SetNumTeamsToDefault() { NumTeams_Optional = 1; NumTeams_IsSet = true; }

    /* The number of players that can be on each team */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 PlayersPerTeam_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlayersPerTeam_IsSet{ false };
    int32& GetPlayersPerTeam() { return PlayersPerTeam_Optional; }
    const int32& GetPlayersPerTeam() const { return PlayersPerTeam_Optional; }
    const int32& GetPlayersPerTeam(const int32& DefaultValue) const { if (PlayersPerTeam_IsSet) return PlayersPerTeam_Optional; return DefaultValue; }
    bool GetPlayersPerTeam(int32& OutValue) const { if (PlayersPerTeam_IsSet) OutValue = PlayersPerTeam_Optional; return PlayersPerTeam_IsSet; }
    int32* GetPlayersPerTeamOrNull() { if (PlayersPerTeam_IsSet) return &PlayersPerTeam_Optional; return nullptr; }
    const int32* GetPlayersPerTeamOrNull() const { if (PlayersPerTeam_IsSet) return &PlayersPerTeam_Optional; return nullptr; }
    void SetPlayersPerTeam(int32 NewValue) { PlayersPerTeam_Optional = NewValue; PlayersPerTeam_IsSet = true; }
    void ClearPlayersPerTeam() { PlayersPerTeam_Optional = 4; PlayersPerTeam_IsSet = false; }
    bool IsPlayersPerTeamDefaultValue() const { return PlayersPerTeam_IsSet && PlayersPerTeam_Optional == 4; }
    void SetPlayersPerTeamToDefault() { PlayersPerTeam_Optional = 4; PlayersPerTeam_IsSet = true; }

    /* Whether or not a player can change which team they are on. If true, they are able to. If False, they player's team can only be changed by an admin */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanChangeOwnTeam_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CanChangeOwnTeam_IsSet{ false };
    bool& GetCanChangeOwnTeam() { return CanChangeOwnTeam_Optional; }
    const bool& GetCanChangeOwnTeam() const { return CanChangeOwnTeam_Optional; }
    const bool& GetCanChangeOwnTeam(const bool& DefaultValue) const { if (CanChangeOwnTeam_IsSet) return CanChangeOwnTeam_Optional; return DefaultValue; }
    bool GetCanChangeOwnTeam(bool& OutValue) const { if (CanChangeOwnTeam_IsSet) OutValue = CanChangeOwnTeam_Optional; return CanChangeOwnTeam_IsSet; }
    bool* GetCanChangeOwnTeamOrNull() { if (CanChangeOwnTeam_IsSet) return &CanChangeOwnTeam_Optional; return nullptr; }
    const bool* GetCanChangeOwnTeamOrNull() const { if (CanChangeOwnTeam_IsSet) return &CanChangeOwnTeam_Optional; return nullptr; }
    void SetCanChangeOwnTeam(bool NewValue) { CanChangeOwnTeam_Optional = NewValue; CanChangeOwnTeam_IsSet = true; }
    void ClearCanChangeOwnTeam() { CanChangeOwnTeam_Optional = true; CanChangeOwnTeam_IsSet = false; }
    bool IsCanChangeOwnTeamDefaultValue() const { return CanChangeOwnTeam_IsSet && CanChangeOwnTeam_Optional == true; }
    void SetCanChangeOwnTeamToDefault() { CanChangeOwnTeam_Optional = true; CanChangeOwnTeam_IsSet = true; }
};
