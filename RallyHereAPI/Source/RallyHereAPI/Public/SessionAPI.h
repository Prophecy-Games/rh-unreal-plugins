/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "PlatformID.h"
#include "BrowserInfo.h"
#include "BrowserResponse.h"
#include "ConnectionInfo.h"
#include "CreateOrJoinRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "InstanceFubar.h"
#include "InstanceInfo.h"
#include "InstanceInfoUpdate.h"
#include "InstanceRequest.h"
#include "MatchCreateRequest.h"
#include "MatchCreateResponse.h"
#include "MatchMakingSessionRequest.h"
#include "PlatformSession.h"
#include "PlayerSessions.h"
#include "QueueJoinRequest.h"
#include "QueueJoinResponse.h"
#include "SelfSessionPlayerUpdateRequest.h"
#include "Session.h"
#include "SessionEventCreateRequest.h"
#include "SessionEvents.h"
#include "SessionJoinResponse.h"
#include "SessionPlayerUpdateRequest.h"
#include "SessionPlayerUpdateResponse.h"
#include "SessionTemplate.h"
#include "SessionTemplates.h"
#include "SessionUpdate.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_CreateMatch;
struct FResponse_CreateMatch;
struct FRequest_CreateOrJoinSession;
struct FResponse_CreateOrJoinSession;
struct FRequest_CreateSessionEvent;
struct FResponse_CreateSessionEvent;
struct FRequest_DeleteBrowserInfo;
struct FResponse_DeleteBrowserInfo;
struct FRequest_EndInstance;
struct FResponse_EndInstance;
struct FRequest_EndMatch;
struct FResponse_EndMatch;
struct FRequest_GetAllSessionTemplates;
struct FResponse_GetAllSessionTemplates;
struct FRequest_GetBrowserSessionsByType;
struct FResponse_GetBrowserSessionsByType;
struct FRequest_GetConnectionInfoSelf;
struct FResponse_GetConnectionInfoSelf;
struct FRequest_GetPlatformSessionInfo;
struct FResponse_GetPlatformSessionInfo;
struct FRequest_GetPlayerSessions;
struct FResponse_GetPlayerSessions;
struct FRequest_GetPlayerSessionsByUuid;
struct FResponse_GetPlayerSessionsByUuid;
struct FRequest_GetPlayerSessionsSelf;
struct FResponse_GetPlayerSessionsSelf;
struct FRequest_GetSessionByAllocationId;
struct FResponse_GetSessionByAllocationId;
struct FRequest_GetSessionById;
struct FResponse_GetSessionById;
struct FRequest_GetSessionEvents;
struct FResponse_GetSessionEvents;
struct FRequest_GetSessionTemplateByType;
struct FResponse_GetSessionTemplateByType;
struct FRequest_HandleInstanceRequest;
struct FResponse_HandleInstanceRequest;
struct FRequest_JoinQueue;
struct FResponse_JoinQueue;
struct FRequest_JoinSessionByIdSelf;
struct FResponse_JoinSessionByIdSelf;
struct FRequest_JoinSessionByPlatformSessionByUuid;
struct FResponse_JoinSessionByPlatformSessionByUuid;
struct FRequest_JoinSessionByPlatformSessionId;
struct FResponse_JoinSessionByPlatformSessionId;
struct FRequest_JoinSessionByPlatformSessionIdSelf;
struct FResponse_JoinSessionByPlatformSessionIdSelf;
struct FRequest_KickPlayerFromSessionById;
struct FResponse_KickPlayerFromSessionById;
struct FRequest_KickPlayerFromSessionByUuid;
struct FResponse_KickPlayerFromSessionByUuid;
struct FRequest_LeaveQueue;
struct FResponse_LeaveQueue;
struct FRequest_LeaveSessionByIdSelf;
struct FResponse_LeaveSessionByIdSelf;
struct FRequest_PostBrowserInfo;
struct FResponse_PostBrowserInfo;
struct FRequest_ReportFubar;
struct FResponse_ReportFubar;
struct FRequest_StartMatch;
struct FResponse_StartMatch;
struct FRequest_UpdateBrowserInfo;
struct FResponse_UpdateBrowserInfo;
struct FRequest_UpdateInstanceInfo;
struct FResponse_UpdateInstanceInfo;
struct FRequest_UpdateMatchInfo;
struct FResponse_UpdateMatchInfo;
struct FRequest_UpdateSessionById;
struct FResponse_UpdateSessionById;
struct FRequest_UpdateSessionPlayerById;
struct FResponse_UpdateSessionPlayerById;
struct FRequest_UpdateSessionPlayerByUuid;
struct FResponse_UpdateSessionPlayerByUuid;

DECLARE_DELEGATE_OneParam(FDelegate_CreateMatch, const FResponse_CreateMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateOrJoinSession, const FResponse_CreateOrJoinSession&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateSessionEvent, const FResponse_CreateSessionEvent&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteBrowserInfo, const FResponse_DeleteBrowserInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_EndInstance, const FResponse_EndInstance&);
DECLARE_DELEGATE_OneParam(FDelegate_EndMatch, const FResponse_EndMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllSessionTemplates, const FResponse_GetAllSessionTemplates&);
DECLARE_DELEGATE_OneParam(FDelegate_GetBrowserSessionsByType, const FResponse_GetBrowserSessionsByType&);
DECLARE_DELEGATE_OneParam(FDelegate_GetConnectionInfoSelf, const FResponse_GetConnectionInfoSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlatformSessionInfo, const FResponse_GetPlatformSessionInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessions, const FResponse_GetPlayerSessions&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsByUuid, const FResponse_GetPlayerSessionsByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsSelf, const FResponse_GetPlayerSessionsSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionByAllocationId, const FResponse_GetSessionByAllocationId&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionById, const FResponse_GetSessionById&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionEvents, const FResponse_GetSessionEvents&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionTemplateByType, const FResponse_GetSessionTemplateByType&);
DECLARE_DELEGATE_OneParam(FDelegate_HandleInstanceRequest, const FResponse_HandleInstanceRequest&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinQueue, const FResponse_JoinQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByIdSelf, const FResponse_JoinSessionByIdSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionByUuid, const FResponse_JoinSessionByPlatformSessionByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionId, const FResponse_JoinSessionByPlatformSessionId&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionIdSelf, const FResponse_JoinSessionByPlatformSessionIdSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionById, const FResponse_KickPlayerFromSessionById&);
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionByUuid, const FResponse_KickPlayerFromSessionByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_LeaveQueue, const FResponse_LeaveQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByIdSelf, const FResponse_LeaveSessionByIdSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_PostBrowserInfo, const FResponse_PostBrowserInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_ReportFubar, const FResponse_ReportFubar&);
DECLARE_DELEGATE_OneParam(FDelegate_StartMatch, const FResponse_StartMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateBrowserInfo, const FResponse_UpdateBrowserInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateInstanceInfo, const FResponse_UpdateInstanceInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateMatchInfo, const FResponse_UpdateMatchInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionById, const FResponse_UpdateSessionById&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerById, const FResponse_UpdateSessionPlayerById&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerByUuid, const FResponse_UpdateSessionPlayerByUuid&);

class RALLYHEREAPI_API FSessionAPI : public FAPI
{
public:
    FSessionAPI();
    virtual ~FSessionAPI();

    FHttpRequestPtr CreateMatch(const FRequest_CreateMatch& Request, const FDelegate_CreateMatch& Delegate = FDelegate_CreateMatch());
    FHttpRequestPtr CreateOrJoinSession(const FRequest_CreateOrJoinSession& Request, const FDelegate_CreateOrJoinSession& Delegate = FDelegate_CreateOrJoinSession());
    FHttpRequestPtr CreateSessionEvent(const FRequest_CreateSessionEvent& Request, const FDelegate_CreateSessionEvent& Delegate = FDelegate_CreateSessionEvent());
    FHttpRequestPtr DeleteBrowserInfo(const FRequest_DeleteBrowserInfo& Request, const FDelegate_DeleteBrowserInfo& Delegate = FDelegate_DeleteBrowserInfo());
    FHttpRequestPtr EndInstance(const FRequest_EndInstance& Request, const FDelegate_EndInstance& Delegate = FDelegate_EndInstance());
    FHttpRequestPtr EndMatch(const FRequest_EndMatch& Request, const FDelegate_EndMatch& Delegate = FDelegate_EndMatch());
    FHttpRequestPtr GetAllSessionTemplates(const FRequest_GetAllSessionTemplates& Request, const FDelegate_GetAllSessionTemplates& Delegate = FDelegate_GetAllSessionTemplates());
    FHttpRequestPtr GetBrowserSessionsByType(const FRequest_GetBrowserSessionsByType& Request, const FDelegate_GetBrowserSessionsByType& Delegate = FDelegate_GetBrowserSessionsByType());
    FHttpRequestPtr GetConnectionInfoSelf(const FRequest_GetConnectionInfoSelf& Request, const FDelegate_GetConnectionInfoSelf& Delegate = FDelegate_GetConnectionInfoSelf());
    FHttpRequestPtr GetPlatformSessionInfo(const FRequest_GetPlatformSessionInfo& Request, const FDelegate_GetPlatformSessionInfo& Delegate = FDelegate_GetPlatformSessionInfo());
    FHttpRequestPtr GetPlayerSessions(const FRequest_GetPlayerSessions& Request, const FDelegate_GetPlayerSessions& Delegate = FDelegate_GetPlayerSessions());
    FHttpRequestPtr GetPlayerSessionsByUuid(const FRequest_GetPlayerSessionsByUuid& Request, const FDelegate_GetPlayerSessionsByUuid& Delegate = FDelegate_GetPlayerSessionsByUuid());
    FHttpRequestPtr GetPlayerSessionsSelf(const FRequest_GetPlayerSessionsSelf& Request, const FDelegate_GetPlayerSessionsSelf& Delegate = FDelegate_GetPlayerSessionsSelf());
    FHttpRequestPtr GetSessionByAllocationId(const FRequest_GetSessionByAllocationId& Request, const FDelegate_GetSessionByAllocationId& Delegate = FDelegate_GetSessionByAllocationId());
    FHttpRequestPtr GetSessionById(const FRequest_GetSessionById& Request, const FDelegate_GetSessionById& Delegate = FDelegate_GetSessionById());
    FHttpRequestPtr GetSessionEvents(const FRequest_GetSessionEvents& Request, const FDelegate_GetSessionEvents& Delegate = FDelegate_GetSessionEvents());
    FHttpRequestPtr GetSessionTemplateByType(const FRequest_GetSessionTemplateByType& Request, const FDelegate_GetSessionTemplateByType& Delegate = FDelegate_GetSessionTemplateByType());
    FHttpRequestPtr HandleInstanceRequest(const FRequest_HandleInstanceRequest& Request, const FDelegate_HandleInstanceRequest& Delegate = FDelegate_HandleInstanceRequest());
    FHttpRequestPtr JoinQueue(const FRequest_JoinQueue& Request, const FDelegate_JoinQueue& Delegate = FDelegate_JoinQueue());
    FHttpRequestPtr JoinSessionByIdSelf(const FRequest_JoinSessionByIdSelf& Request, const FDelegate_JoinSessionByIdSelf& Delegate = FDelegate_JoinSessionByIdSelf());
    FHttpRequestPtr JoinSessionByPlatformSessionByUuid(const FRequest_JoinSessionByPlatformSessionByUuid& Request, const FDelegate_JoinSessionByPlatformSessionByUuid& Delegate = FDelegate_JoinSessionByPlatformSessionByUuid());
    FHttpRequestPtr JoinSessionByPlatformSessionId(const FRequest_JoinSessionByPlatformSessionId& Request, const FDelegate_JoinSessionByPlatformSessionId& Delegate = FDelegate_JoinSessionByPlatformSessionId());
    FHttpRequestPtr JoinSessionByPlatformSessionIdSelf(const FRequest_JoinSessionByPlatformSessionIdSelf& Request, const FDelegate_JoinSessionByPlatformSessionIdSelf& Delegate = FDelegate_JoinSessionByPlatformSessionIdSelf());
    FHttpRequestPtr KickPlayerFromSessionById(const FRequest_KickPlayerFromSessionById& Request, const FDelegate_KickPlayerFromSessionById& Delegate = FDelegate_KickPlayerFromSessionById());
    FHttpRequestPtr KickPlayerFromSessionByUuid(const FRequest_KickPlayerFromSessionByUuid& Request, const FDelegate_KickPlayerFromSessionByUuid& Delegate = FDelegate_KickPlayerFromSessionByUuid());
    FHttpRequestPtr LeaveQueue(const FRequest_LeaveQueue& Request, const FDelegate_LeaveQueue& Delegate = FDelegate_LeaveQueue());
    FHttpRequestPtr LeaveSessionByIdSelf(const FRequest_LeaveSessionByIdSelf& Request, const FDelegate_LeaveSessionByIdSelf& Delegate = FDelegate_LeaveSessionByIdSelf());
    FHttpRequestPtr PostBrowserInfo(const FRequest_PostBrowserInfo& Request, const FDelegate_PostBrowserInfo& Delegate = FDelegate_PostBrowserInfo());
    FHttpRequestPtr ReportFubar(const FRequest_ReportFubar& Request, const FDelegate_ReportFubar& Delegate = FDelegate_ReportFubar());
    FHttpRequestPtr StartMatch(const FRequest_StartMatch& Request, const FDelegate_StartMatch& Delegate = FDelegate_StartMatch());
    FHttpRequestPtr UpdateBrowserInfo(const FRequest_UpdateBrowserInfo& Request, const FDelegate_UpdateBrowserInfo& Delegate = FDelegate_UpdateBrowserInfo());
    FHttpRequestPtr UpdateInstanceInfo(const FRequest_UpdateInstanceInfo& Request, const FDelegate_UpdateInstanceInfo& Delegate = FDelegate_UpdateInstanceInfo());
    FHttpRequestPtr UpdateMatchInfo(const FRequest_UpdateMatchInfo& Request, const FDelegate_UpdateMatchInfo& Delegate = FDelegate_UpdateMatchInfo());
    FHttpRequestPtr UpdateSessionById(const FRequest_UpdateSessionById& Request, const FDelegate_UpdateSessionById& Delegate = FDelegate_UpdateSessionById());
    FHttpRequestPtr UpdateSessionPlayerById(const FRequest_UpdateSessionPlayerById& Request, const FDelegate_UpdateSessionPlayerById& Delegate = FDelegate_UpdateSessionPlayerById());
    FHttpRequestPtr UpdateSessionPlayerByUuid(const FRequest_UpdateSessionPlayerByUuid& Request, const FDelegate_UpdateSessionPlayerByUuid& Delegate = FDelegate_UpdateSessionPlayerByUuid());

private:
    void OnCreateMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnCreateOrJoinSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateOrJoinSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnCreateSessionEventResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateSessionEvent Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnDeleteBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnEndInstanceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EndInstance Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnEndMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EndMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetAllSessionTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllSessionTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetBrowserSessionsByTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetBrowserSessionsByType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetConnectionInfoSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConnectionInfoSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlatformSessionInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlatformSessionInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerSessionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerSessionsByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerSessionsSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetSessionByAllocationIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionByAllocationId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetSessionEventsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionEvents Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetSessionTemplateByTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionTemplateByType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnHandleInstanceRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_HandleInstanceRequest Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnJoinQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnJoinSessionByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnJoinSessionByPlatformSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnJoinSessionByPlatformSessionIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnJoinSessionByPlatformSessionIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnKickPlayerFromSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnKickPlayerFromSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnLeaveQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnLeaveSessionByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnPostBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PostBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnReportFubarResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ReportFubar Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnStartMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_StartMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdateBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdateInstanceInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateInstanceInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdateMatchInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateMatchInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdateSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdateSessionPlayerByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdateSessionPlayerByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);

};

/* Create Match
 *
 * Create a match session based on matchmaking results
*/
struct RALLYHEREAPI_API FRequest_CreateMatch : public FRequest
{
    FRequest_CreateMatch();
    virtual ~FRequest_CreateMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_MatchMakingSessionRequest MatchMakingSessionRequest;
};

struct RALLYHEREAPI_API FResponse_CreateMatch : public FResponse
{
    FResponse_CreateMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_CreateMatch
{
    typedef FRequest_CreateMatch Request;
    typedef FResponse_CreateMatch Response;
    typedef FDelegate_CreateMatch Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.CreateMatch(InRequest, InDelegate); }
};

/* Create Or Join Session
 *
 * Player would like to join the first available session of the type. If there is no available public session, and the type allows it, the player would like to have a new session created for them and join it.
*/
struct RALLYHEREAPI_API FRequest_CreateOrJoinSession : public FRequest
{
    FRequest_CreateOrJoinSession();
    virtual ~FRequest_CreateOrJoinSession() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_CreateOrJoinRequest CreateOrJoinRequest;
};

struct RALLYHEREAPI_API FResponse_CreateOrJoinSession : public FResponse
{
    FResponse_CreateOrJoinSession(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateOrJoinSession() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionJoinResponse Content;

};

struct RALLYHEREAPI_API Traits_CreateOrJoinSession
{
    typedef FRequest_CreateOrJoinSession Request;
    typedef FResponse_CreateOrJoinSession Response;
    typedef FDelegate_CreateOrJoinSession Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.CreateOrJoinSession(InRequest, InDelegate); }
};

/* Create Session Event
 *
 * Create an event in the log for this session. Internal session operations will create new events that are accessible from the get request.  Player clients and instances are expected to create events here when something occurs on their clients that is relevant.
*/
struct RALLYHEREAPI_API FRequest_CreateSessionEvent : public FRequest
{
    FRequest_CreateSessionEvent();
    virtual ~FRequest_CreateSessionEvent() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_SessionEventCreateRequest SessionEventCreateRequest;
};

struct RALLYHEREAPI_API FResponse_CreateSessionEvent : public FResponse
{
    FResponse_CreateSessionEvent(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateSessionEvent() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_CreateSessionEvent
{
    typedef FRequest_CreateSessionEvent Request;
    typedef FResponse_CreateSessionEvent Response;
    typedef FDelegate_CreateSessionEvent Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.CreateSessionEvent(InRequest, InDelegate); }
};

/* Delete Browser Info
 *
 * Delete the session from the public browser
*/
struct RALLYHEREAPI_API FRequest_DeleteBrowserInfo : public FRequest
{
    FRequest_DeleteBrowserInfo();
    virtual ~FRequest_DeleteBrowserInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_DeleteBrowserInfo : public FResponse
{
    FResponse_DeleteBrowserInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteBrowserInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_DeleteBrowserInfo
{
    typedef FRequest_DeleteBrowserInfo Request;
    typedef FResponse_DeleteBrowserInfo Response;
    typedef FDelegate_DeleteBrowserInfo Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.DeleteBrowserInfo(InRequest, InDelegate); }
};

/* End Instance
 *
 * Unregister the instance from the session.
*/
struct RALLYHEREAPI_API FRequest_EndInstance : public FRequest
{
    FRequest_EndInstance();
    virtual ~FRequest_EndInstance() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_EndInstance : public FResponse
{
    FResponse_EndInstance(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_EndInstance() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_EndInstance
{
    typedef FRequest_EndInstance Request;
    typedef FResponse_EndInstance Response;
    typedef FDelegate_EndInstance Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.EndInstance(InRequest, InDelegate); }
};

/* End Match
 *
 * Unregister the match from the session.
*/
struct RALLYHEREAPI_API FRequest_EndMatch : public FRequest
{
    FRequest_EndMatch();
    virtual ~FRequest_EndMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_EndMatch : public FResponse
{
    FResponse_EndMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_EndMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_EndMatch
{
    typedef FRequest_EndMatch Request;
    typedef FResponse_EndMatch Response;
    typedef FDelegate_EndMatch Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.EndMatch(InRequest, InDelegate); }
};

/* Get All Session Templates
 *
 * Get All Session Template definitions
*/
struct RALLYHEREAPI_API FRequest_GetAllSessionTemplates : public FRequest
{
    FRequest_GetAllSessionTemplates();
    virtual ~FRequest_GetAllSessionTemplates() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetAllSessionTemplates : public FResponse
{
    FResponse_GetAllSessionTemplates(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllSessionTemplates() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionTemplates Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetAllSessionTemplates
{
    typedef FRequest_GetAllSessionTemplates Request;
    typedef FResponse_GetAllSessionTemplates Response;
    typedef FDelegate_GetAllSessionTemplates Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetAllSessionTemplates(InRequest, InDelegate); }
};

/* Get Browser Sessions By Type
 *
 * Get all public sessions of specific type
*/
struct RALLYHEREAPI_API FRequest_GetBrowserSessionsByType : public FRequest
{
    FRequest_GetBrowserSessionsByType();
    virtual ~FRequest_GetBrowserSessionsByType() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionType;
    TOptional<int32> Cursor;
    TOptional<int32> PageSize;
};

struct RALLYHEREAPI_API FResponse_GetBrowserSessionsByType : public FResponse
{
    FResponse_GetBrowserSessionsByType(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetBrowserSessionsByType() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_BrowserResponse Content;

};

struct RALLYHEREAPI_API Traits_GetBrowserSessionsByType
{
    typedef FRequest_GetBrowserSessionsByType Request;
    typedef FResponse_GetBrowserSessionsByType Response;
    typedef FDelegate_GetBrowserSessionsByType Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetBrowserSessionsByType(InRequest, InDelegate); }
};

/* Get Connection Info Self
 *
 * Get connection info for self
*/
struct RALLYHEREAPI_API FRequest_GetConnectionInfoSelf : public FRequest
{
    FRequest_GetConnectionInfoSelf();
    virtual ~FRequest_GetConnectionInfoSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    TOptional<FString> XForwardedFor;
};

struct RALLYHEREAPI_API FResponse_GetConnectionInfoSelf : public FResponse
{
    FResponse_GetConnectionInfoSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetConnectionInfoSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_ConnectionInfo Content;

};

struct RALLYHEREAPI_API Traits_GetConnectionInfoSelf
{
    typedef FRequest_GetConnectionInfoSelf Request;
    typedef FResponse_GetConnectionInfoSelf Response;
    typedef FDelegate_GetConnectionInfoSelf Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetConnectionInfoSelf(InRequest, InDelegate); }
};

/* Get Platform Session Info
 *
 * Get information about a platform session
*/
struct RALLYHEREAPI_API FRequest_GetPlatformSessionInfo : public FRequest
{
    FRequest_GetPlatformSessionInfo();
    virtual ~FRequest_GetPlatformSessionInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    ERHAPI_PlatformID PlatformId;
    FString PlatformSessionIdBase64;
};

struct RALLYHEREAPI_API FResponse_GetPlatformSessionInfo : public FResponse
{
    FResponse_GetPlatformSessionInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlatformSessionInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformSession Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlatformSessionInfo
{
    typedef FRequest_GetPlatformSessionInfo Request;
    typedef FResponse_GetPlatformSessionInfo Response;
    typedef FDelegate_GetPlatformSessionInfo Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlatformSessionInfo(InRequest, InDelegate); }
};

/* Get Player Sessions
 *
 * Get Sessions associated with a player by id
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessions : public FRequest
{
    FRequest_GetPlayerSessions();
    virtual ~FRequest_GetPlayerSessions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerSessions : public FResponse
{
    FResponse_GetPlayerSessions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerSessions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlayerSessions
{
    typedef FRequest_GetPlayerSessions Request;
    typedef FResponse_GetPlayerSessions Response;
    typedef FDelegate_GetPlayerSessions Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerSessions(InRequest, InDelegate); }
};

/* Get Player Sessions By Uuid
 *
 * Get Sessions associated with a player by id
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsByUuid : public FRequest
{
    FRequest_GetPlayerSessionsByUuid();
    virtual ~FRequest_GetPlayerSessionsByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetPlayerSessionsByUuid : public FResponse
{
    FResponse_GetPlayerSessionsByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerSessionsByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlayerSessionsByUuid
{
    typedef FRequest_GetPlayerSessionsByUuid Request;
    typedef FResponse_GetPlayerSessionsByUuid Response;
    typedef FDelegate_GetPlayerSessionsByUuid Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerSessionsByUuid(InRequest, InDelegate); }
};

/* Get Player Sessions Self
 *
 * Get Sessions associated the current player
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsSelf : public FRequest
{
    FRequest_GetPlayerSessionsSelf();
    virtual ~FRequest_GetPlayerSessionsSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetPlayerSessionsSelf : public FResponse
{
    FResponse_GetPlayerSessionsSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerSessionsSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlayerSessionsSelf
{
    typedef FRequest_GetPlayerSessionsSelf Request;
    typedef FResponse_GetPlayerSessionsSelf Response;
    typedef FDelegate_GetPlayerSessionsSelf Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerSessionsSelf(InRequest, InDelegate); }
};

/* Get Session By Allocation Id
 *
 * Get session by allocation ID. Returns the same limited results as getting the session by session id
*/
struct RALLYHEREAPI_API FRequest_GetSessionByAllocationId : public FRequest
{
    FRequest_GetSessionByAllocationId();
    virtual ~FRequest_GetSessionByAllocationId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString AllocationId;
};

struct RALLYHEREAPI_API FResponse_GetSessionByAllocationId : public FResponse
{
    FResponse_GetSessionByAllocationId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionByAllocationId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetSessionByAllocationId
{
    typedef FRequest_GetSessionByAllocationId Request;
    typedef FResponse_GetSessionByAllocationId Response;
    typedef FDelegate_GetSessionByAllocationId Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetSessionByAllocationId(InRequest, InDelegate); }
};

/* Get Session By Id
 *
 * Get Session by ID.  This request will return limited results for non-members of the session, such as excluding info for how to connect to the instance.  Elevated permissions can bypass that restriction
*/
struct RALLYHEREAPI_API FRequest_GetSessionById : public FRequest
{
    FRequest_GetSessionById();
    virtual ~FRequest_GetSessionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_GetSessionById : public FResponse
{
    FResponse_GetSessionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetSessionById
{
    typedef FRequest_GetSessionById Request;
    typedef FResponse_GetSessionById Response;
    typedef FDelegate_GetSessionById Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetSessionById(InRequest, InDelegate); }
};

/* Get Session Events
 *
 * Get all events for the session.  Empty list means there is no event history for it.
*/
struct RALLYHEREAPI_API FRequest_GetSessionEvents : public FRequest
{
    FRequest_GetSessionEvents();
    virtual ~FRequest_GetSessionEvents() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    TOptional<int32> PageNum;
    TOptional<int32> PageSize;
};

struct RALLYHEREAPI_API FResponse_GetSessionEvents : public FResponse
{
    FResponse_GetSessionEvents(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionEvents() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionEvents Content;

};

struct RALLYHEREAPI_API Traits_GetSessionEvents
{
    typedef FRequest_GetSessionEvents Request;
    typedef FResponse_GetSessionEvents Response;
    typedef FDelegate_GetSessionEvents Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetSessionEvents(InRequest, InDelegate); }
};

/* Get Session Template By Type
 *
 * Get Session Template by ID
*/
struct RALLYHEREAPI_API FRequest_GetSessionTemplateByType : public FRequest
{
    FRequest_GetSessionTemplateByType();
    virtual ~FRequest_GetSessionTemplateByType() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionType;
};

struct RALLYHEREAPI_API FResponse_GetSessionTemplateByType : public FResponse
{
    FResponse_GetSessionTemplateByType(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionTemplateByType() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionTemplate Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetSessionTemplateByType
{
    typedef FRequest_GetSessionTemplateByType Request;
    typedef FResponse_GetSessionTemplateByType Response;
    typedef FDelegate_GetSessionTemplateByType Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetSessionTemplateByType(InRequest, InDelegate); }
};

/* Handle Instance Request
 *
 * Request an instance be spawned for the session, or register self as a host of the instance
*/
struct RALLYHEREAPI_API FRequest_HandleInstanceRequest : public FRequest
{
    FRequest_HandleInstanceRequest();
    virtual ~FRequest_HandleInstanceRequest() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_InstanceRequest InstanceRequest;
};

struct RALLYHEREAPI_API FResponse_HandleInstanceRequest : public FResponse
{
    FResponse_HandleInstanceRequest(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_HandleInstanceRequest() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_InstanceInfo Content;

};

struct RALLYHEREAPI_API Traits_HandleInstanceRequest
{
    typedef FRequest_HandleInstanceRequest Request;
    typedef FResponse_HandleInstanceRequest Response;
    typedef FDelegate_HandleInstanceRequest Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.HandleInstanceRequest(InRequest, InDelegate); }
};

/* Join Queue
 *
 * Add session to a matchmaking queue
*/
struct RALLYHEREAPI_API FRequest_JoinQueue : public FRequest
{
    FRequest_JoinQueue();
    virtual ~FRequest_JoinQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_QueueJoinRequest QueueJoinRequest;
};

struct RALLYHEREAPI_API FResponse_JoinQueue : public FResponse
{
    FResponse_JoinQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_QueueJoinResponse Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_JoinQueue
{
    typedef FRequest_JoinQueue Request;
    typedef FResponse_JoinQueue Response;
    typedef FDelegate_JoinQueue Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.JoinQueue(InRequest, InDelegate); }
};

/* Join Session By Id Self
 *
 * Join a session
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByIdSelf : public FRequest
{
    FRequest_JoinSessionByIdSelf();
    virtual ~FRequest_JoinSessionByIdSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByIdSelf : public FResponse
{
    FResponse_JoinSessionByIdSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByIdSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;

};

struct RALLYHEREAPI_API Traits_JoinSessionByIdSelf
{
    typedef FRequest_JoinSessionByIdSelf Request;
    typedef FResponse_JoinSessionByIdSelf Response;
    typedef FDelegate_JoinSessionByIdSelf Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.JoinSessionByIdSelf(InRequest, InDelegate); }
};

/* Join Session By Platform Session By Uuid
 *
 * Join a platform session by ID, and the parent session
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionByUuid : public FRequest
{
    FRequest_JoinSessionByPlatformSessionByUuid();
    virtual ~FRequest_JoinSessionByPlatformSessionByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    int32 PlayerUuid = 0;
    ERHAPI_PlatformID PlatformId;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionByUuid : public FResponse
{
    FResponse_JoinSessionByPlatformSessionByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByPlatformSessionByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionByUuid
{
    typedef FRequest_JoinSessionByPlatformSessionByUuid Request;
    typedef FResponse_JoinSessionByPlatformSessionByUuid Response;
    typedef FDelegate_JoinSessionByPlatformSessionByUuid Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.JoinSessionByPlatformSessionByUuid(InRequest, InDelegate); }
};

/* Join Session By Platform Session Id
 *
 * Join a platform session by ID, and the parent session
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionId : public FRequest
{
    FRequest_JoinSessionByPlatformSessionId();
    virtual ~FRequest_JoinSessionByPlatformSessionId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    ERHAPI_PlatformID PlatformId;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionId : public FResponse
{
    FResponse_JoinSessionByPlatformSessionId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByPlatformSessionId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionId
{
    typedef FRequest_JoinSessionByPlatformSessionId Request;
    typedef FResponse_JoinSessionByPlatformSessionId Response;
    typedef FDelegate_JoinSessionByPlatformSessionId Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.JoinSessionByPlatformSessionId(InRequest, InDelegate); }
};

/* Join Session By Platform Session Id Self
 *
 * Join a platform session by ID, and the parent session
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionIdSelf : public FRequest
{
    FRequest_JoinSessionByPlatformSessionIdSelf();
    virtual ~FRequest_JoinSessionByPlatformSessionIdSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    ERHAPI_PlatformID PlatformId;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionIdSelf : public FResponse
{
    FResponse_JoinSessionByPlatformSessionIdSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByPlatformSessionIdSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionIdSelf
{
    typedef FRequest_JoinSessionByPlatformSessionIdSelf Request;
    typedef FResponse_JoinSessionByPlatformSessionIdSelf Response;
    typedef FDelegate_JoinSessionByPlatformSessionIdSelf Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.JoinSessionByPlatformSessionIdSelf(InRequest, InDelegate); }
};

/* Kick Player From Session By Id
 *
 * Kick/Remove a player from a session or cancel an invite for a player to the session
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionById : public FRequest
{
    FRequest_KickPlayerFromSessionById();
    virtual ~FRequest_KickPlayerFromSessionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionById : public FResponse
{
    FResponse_KickPlayerFromSessionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_KickPlayerFromSessionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_KickPlayerFromSessionById
{
    typedef FRequest_KickPlayerFromSessionById Request;
    typedef FResponse_KickPlayerFromSessionById Response;
    typedef FDelegate_KickPlayerFromSessionById Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.KickPlayerFromSessionById(InRequest, InDelegate); }
};

/* Kick Player From Session By Uuid
 *
 * Kick/Remove a player from a session or cancel an invite for a player to the session
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionByUuid : public FRequest
{
    FRequest_KickPlayerFromSessionByUuid();
    virtual ~FRequest_KickPlayerFromSessionByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionByUuid : public FResponse
{
    FResponse_KickPlayerFromSessionByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_KickPlayerFromSessionByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_KickPlayerFromSessionByUuid
{
    typedef FRequest_KickPlayerFromSessionByUuid Request;
    typedef FResponse_KickPlayerFromSessionByUuid Response;
    typedef FDelegate_KickPlayerFromSessionByUuid Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.KickPlayerFromSessionByUuid(InRequest, InDelegate); }
};

/* Leave Queue
 *
 * Remove session from a matchmaking queue
*/
struct RALLYHEREAPI_API FRequest_LeaveQueue : public FRequest
{
    FRequest_LeaveQueue();
    virtual ~FRequest_LeaveQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_LeaveQueue : public FResponse
{
    FResponse_LeaveQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LeaveQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_LeaveQueue
{
    typedef FRequest_LeaveQueue Request;
    typedef FResponse_LeaveQueue Response;
    typedef FDelegate_LeaveQueue Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.LeaveQueue(InRequest, InDelegate); }
};

/* Leave Session By Id Self
 *
 * Leave a session
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByIdSelf : public FRequest
{
    FRequest_LeaveSessionByIdSelf();
    virtual ~FRequest_LeaveSessionByIdSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_LeaveSessionByIdSelf : public FResponse
{
    FResponse_LeaveSessionByIdSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LeaveSessionByIdSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_LeaveSessionByIdSelf
{
    typedef FRequest_LeaveSessionByIdSelf Request;
    typedef FResponse_LeaveSessionByIdSelf Response;
    typedef FDelegate_LeaveSessionByIdSelf Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.LeaveSessionByIdSelf(InRequest, InDelegate); }
};

/* Post Browser Info
 *
 * Register session in the public browser
*/
struct RALLYHEREAPI_API FRequest_PostBrowserInfo : public FRequest
{
    FRequest_PostBrowserInfo();
    virtual ~FRequest_PostBrowserInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_BrowserInfo BrowserInfo;
};

struct RALLYHEREAPI_API FResponse_PostBrowserInfo : public FResponse
{
    FResponse_PostBrowserInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_PostBrowserInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_BrowserInfo Content;

};

struct RALLYHEREAPI_API Traits_PostBrowserInfo
{
    typedef FRequest_PostBrowserInfo Request;
    typedef FResponse_PostBrowserInfo Response;
    typedef FDelegate_PostBrowserInfo Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.PostBrowserInfo(InRequest, InDelegate); }
};

/* Report Fubar
 *
 * Report an instance as fubar
*/
struct RALLYHEREAPI_API FRequest_ReportFubar : public FRequest
{
    FRequest_ReportFubar();
    virtual ~FRequest_ReportFubar() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_InstanceFubar InstanceFubar;
};

struct RALLYHEREAPI_API FResponse_ReportFubar : public FResponse
{
    FResponse_ReportFubar(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ReportFubar() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonObject Content;

};

struct RALLYHEREAPI_API Traits_ReportFubar
{
    typedef FRequest_ReportFubar Request;
    typedef FResponse_ReportFubar Response;
    typedef FDelegate_ReportFubar Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.ReportFubar(InRequest, InDelegate); }
};

/* Start Match
 *
 * Begin a new match for the current session, on the current instance
*/
struct RALLYHEREAPI_API FRequest_StartMatch : public FRequest
{
    FRequest_StartMatch();
    virtual ~FRequest_StartMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_MatchCreateRequest MatchCreateRequest;
};

struct RALLYHEREAPI_API FResponse_StartMatch : public FResponse
{
    FResponse_StartMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_StartMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchCreateResponse Content;

};

struct RALLYHEREAPI_API Traits_StartMatch
{
    typedef FRequest_StartMatch Request;
    typedef FResponse_StartMatch Response;
    typedef FDelegate_StartMatch Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.StartMatch(InRequest, InDelegate); }
};

/* Update Browser Info
 *
 * Update the browser info for the session
*/
struct RALLYHEREAPI_API FRequest_UpdateBrowserInfo : public FRequest
{
    FRequest_UpdateBrowserInfo();
    virtual ~FRequest_UpdateBrowserInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_BrowserInfo BrowserInfo;
};

struct RALLYHEREAPI_API FResponse_UpdateBrowserInfo : public FResponse
{
    FResponse_UpdateBrowserInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateBrowserInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_BrowserInfo Content;

};

struct RALLYHEREAPI_API Traits_UpdateBrowserInfo
{
    typedef FRequest_UpdateBrowserInfo Request;
    typedef FResponse_UpdateBrowserInfo Response;
    typedef FDelegate_UpdateBrowserInfo Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdateBrowserInfo(InRequest, InDelegate); }
};

/* Update Instance Info
 *
 * Update info about the instance
*/
struct RALLYHEREAPI_API FRequest_UpdateInstanceInfo : public FRequest
{
    FRequest_UpdateInstanceInfo();
    virtual ~FRequest_UpdateInstanceInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_InstanceInfoUpdate InstanceInfoUpdate;
};

struct RALLYHEREAPI_API FResponse_UpdateInstanceInfo : public FResponse
{
    FResponse_UpdateInstanceInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateInstanceInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_InstanceInfo Content;

};

struct RALLYHEREAPI_API Traits_UpdateInstanceInfo
{
    typedef FRequest_UpdateInstanceInfo Request;
    typedef FResponse_UpdateInstanceInfo Response;
    typedef FDelegate_UpdateInstanceInfo Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdateInstanceInfo(InRequest, InDelegate); }
};

/* Update Match Info
 *
 * Update info about the match
*/
struct RALLYHEREAPI_API FRequest_UpdateMatchInfo : public FRequest
{
    FRequest_UpdateMatchInfo();
    virtual ~FRequest_UpdateMatchInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_MatchCreateRequest MatchCreateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateMatchInfo : public FResponse
{
    FResponse_UpdateMatchInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateMatchInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_UpdateMatchInfo
{
    typedef FRequest_UpdateMatchInfo Request;
    typedef FResponse_UpdateMatchInfo Response;
    typedef FDelegate_UpdateMatchInfo Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdateMatchInfo(InRequest, InDelegate); }
};

/* Update Session By Id
 *
 * Update session info by session id
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionById : public FRequest
{
    FRequest_UpdateSessionById();
    virtual ~FRequest_UpdateSessionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_SessionUpdate SessionUpdate;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionById : public FResponse
{
    FResponse_UpdateSessionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_UpdateSessionById
{
    typedef FRequest_UpdateSessionById Request;
    typedef FResponse_UpdateSessionById Response;
    typedef FDelegate_UpdateSessionById Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdateSessionById(InRequest, InDelegate); }
};

/* Update Session Player By Id
 *
 * Add or invite a player to the session, or change the status of a player already in the session
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerById : public FRequest
{
    FRequest_UpdateSessionPlayerById();
    virtual ~FRequest_UpdateSessionPlayerById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    int32 PlayerId = 0;
    FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerById : public FResponse
{
    FResponse_UpdateSessionPlayerById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionPlayerById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;

};

struct RALLYHEREAPI_API Traits_UpdateSessionPlayerById
{
    typedef FRequest_UpdateSessionPlayerById Request;
    typedef FResponse_UpdateSessionPlayerById Response;
    typedef FDelegate_UpdateSessionPlayerById Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdateSessionPlayerById(InRequest, InDelegate); }
};

/* Update Session Player By Uuid
 *
 * Add or invite a player to the session, or change the status of a player already in the session
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerByUuid : public FRequest
{
    FRequest_UpdateSessionPlayerByUuid();
    virtual ~FRequest_UpdateSessionPlayerByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FGuid PlayerUuid;
    FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerByUuid : public FResponse
{
    FResponse_UpdateSessionPlayerByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionPlayerByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;

};

struct RALLYHEREAPI_API Traits_UpdateSessionPlayerByUuid
{
    typedef FRequest_UpdateSessionPlayerByUuid Request;
    typedef FResponse_UpdateSessionPlayerByUuid Response;
    typedef FDelegate_UpdateSessionPlayerByUuid Delegate;
    typedef FSessionAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdateSessionPlayerByUuid(InRequest, InDelegate); }
};


}
