/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryPortal.h"
#include "PlayerOrderEntry.h"
#include "Source.h"
#include "PlayerOrder.generated.h"

/*
* FRHAPI_PlayerOrder
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerOrder : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_Source Source_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Source_IsSet{ false };
    ERHAPI_Source& GetSource() { return Source_Optional; }
    const ERHAPI_Source& GetSource() const { return Source_Optional; }
    const ERHAPI_Source& GetSource(const ERHAPI_Source& DefaultValue) const { if (Source_IsSet) return Source_Optional; return DefaultValue; }
    bool GetSource(ERHAPI_Source& OutValue) const { if (Source_IsSet) OutValue = Source_Optional; return Source_IsSet; }
    ERHAPI_Source* GetSourceOrNull() { if (Source_IsSet) return &Source_Optional; return nullptr; }
    const ERHAPI_Source* GetSourceOrNull() const { if (Source_IsSet) return &Source_Optional; return nullptr; }
    void SetSource(ERHAPI_Source NewValue) { Source_Optional = NewValue; Source_IsSet = true; }
    void ClearSource() { Source_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid ClientOrderRefId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ClientOrderRefId_IsSet{ false };
    FGuid& GetClientOrderRefId() { return ClientOrderRefId_Optional; }
    const FGuid& GetClientOrderRefId() const { return ClientOrderRefId_Optional; }
    const FGuid& GetClientOrderRefId(const FGuid& DefaultValue) const { if (ClientOrderRefId_IsSet) return ClientOrderRefId_Optional; return DefaultValue; }
    bool GetClientOrderRefId(FGuid& OutValue) const { if (ClientOrderRefId_IsSet) OutValue = ClientOrderRefId_Optional; return ClientOrderRefId_IsSet; }
    FGuid* GetClientOrderRefIdOrNull() { if (ClientOrderRefId_IsSet) return &ClientOrderRefId_Optional; return nullptr; }
    const FGuid* GetClientOrderRefIdOrNull() const { if (ClientOrderRefId_IsSet) return &ClientOrderRefId_Optional; return nullptr; }
    void SetClientOrderRefId(FGuid NewValue) { ClientOrderRefId_Optional = NewValue; ClientOrderRefId_IsSet = true; }
    void ClearClientOrderRefId() { ClientOrderRefId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryPortal PortalId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalId_IsSet{ false };
    ERHAPI_InventoryPortal& GetPortalId() { return PortalId_Optional; }
    const ERHAPI_InventoryPortal& GetPortalId() const { return PortalId_Optional; }
    const ERHAPI_InventoryPortal& GetPortalId(const ERHAPI_InventoryPortal& DefaultValue) const { if (PortalId_IsSet) return PortalId_Optional; return DefaultValue; }
    bool GetPortalId(ERHAPI_InventoryPortal& OutValue) const { if (PortalId_IsSet) OutValue = PortalId_Optional; return PortalId_IsSet; }
    ERHAPI_InventoryPortal* GetPortalIdOrNull() { if (PortalId_IsSet) return &PortalId_Optional; return nullptr; }
    const ERHAPI_InventoryPortal* GetPortalIdOrNull() const { if (PortalId_IsSet) return &PortalId_Optional; return nullptr; }
    void SetPortalId(ERHAPI_InventoryPortal NewValue) { PortalId_Optional = NewValue; PortalId_IsSet = true; }
    void ClearPortalId() { PortalId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PortalUserId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalUserId_IsSet{ false };
    FString& GetPortalUserId() { return PortalUserId_Optional; }
    const FString& GetPortalUserId() const { return PortalUserId_Optional; }
    const FString& GetPortalUserId(const FString& DefaultValue) const { if (PortalUserId_IsSet) return PortalUserId_Optional; return DefaultValue; }
    bool GetPortalUserId(FString& OutValue) const { if (PortalUserId_IsSet) OutValue = PortalUserId_Optional; return PortalUserId_IsSet; }
    FString* GetPortalUserIdOrNull() { if (PortalUserId_IsSet) return &PortalUserId_Optional; return nullptr; }
    const FString* GetPortalUserIdOrNull() const { if (PortalUserId_IsSet) return &PortalUserId_Optional; return nullptr; }
    void SetPortalUserId(FString NewValue) { PortalUserId_Optional = NewValue; PortalUserId_IsSet = true; }
    void ClearPortalUserId() { PortalUserId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString InstanceId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InstanceId_IsSet{ false };
    FString& GetInstanceId() { return InstanceId_Optional; }
    const FString& GetInstanceId() const { return InstanceId_Optional; }
    const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
    bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
    FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    void SetInstanceId(FString NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; }
    void ClearInstanceId() { InstanceId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString MatchId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool MatchId_IsSet{ false };
    FString& GetMatchId() { return MatchId_Optional; }
    const FString& GetMatchId() const { return MatchId_Optional; }
    const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
    bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet) OutValue = MatchId_Optional; return MatchId_IsSet; }
    FString* GetMatchIdOrNull() { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
    const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
    void SetMatchId(FString NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; }
    void ClearMatchId() { MatchId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString OrderId{  };
    FString& GetOrderId() { return OrderId; }
    const FString& GetOrderId() const { return OrderId; }
    void SetOrderId(FString NewValue) { OrderId = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid PlayerUuid{  };
    FGuid& GetPlayerUuid() { return PlayerUuid; }
    const FGuid& GetPlayerUuid() const { return PlayerUuid; }
    void SetPlayerUuid(FGuid NewValue) { PlayerUuid = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime CreatedTime{  };
    FDateTime& GetCreatedTime() { return CreatedTime; }
    const FDateTime& GetCreatedTime() const { return CreatedTime; }
    void SetCreatedTime(FDateTime NewValue) { CreatedTime = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FRHAPI_PlayerOrderEntry> Entries{  };
    TArray<FRHAPI_PlayerOrderEntry>& GetEntries() { return Entries; }
    const TArray<FRHAPI_PlayerOrderEntry>& GetEntries() const { return Entries; }
    void SetEntries(TArray<FRHAPI_PlayerOrderEntry> NewValue) { Entries = NewValue;  }
};
