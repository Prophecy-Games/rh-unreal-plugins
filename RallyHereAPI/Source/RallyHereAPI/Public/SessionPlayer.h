/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "ClientSettings.h"
#include "CrossplayPreferences.h"
#include "SessionPlayerStatus.h"
#include "SessionPlayer.generated.h"

/*
* FRHAPI_SessionPlayer
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionPlayer : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Legacy id for this player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 PlayerId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlayerId_IsSet{ false };
    int32& GetPlayerId() { return PlayerId_Optional; }
    const int32& GetPlayerId() const { return PlayerId_Optional; }
    const int32& GetPlayerId(const int32& DefaultValue) const { if (PlayerId_IsSet) return PlayerId_Optional; return DefaultValue; }
    bool GetPlayerId(int32& OutValue) const { if (PlayerId_IsSet) OutValue = PlayerId_Optional; return PlayerId_IsSet; }
    int32* GetPlayerIdOrNull() { if (PlayerId_IsSet) return &PlayerId_Optional; return nullptr; }
    const int32* GetPlayerIdOrNull() const { if (PlayerId_IsSet) return &PlayerId_Optional; return nullptr; }
    void SetPlayerId(int32 NewValue) { PlayerId_Optional = NewValue; PlayerId_IsSet = true; }
    void ClearPlayerId() { PlayerId_Optional = 0; PlayerId_IsSet = false; }
    bool IsPlayerIdDefaultValue() const { return PlayerId_IsSet && PlayerId_Optional == 0; }
    void SetPlayerIdToDefault() { PlayerId_Optional = 0; PlayerId_IsSet = true; }

    /* UUID for this player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid PlayerUuid{  };
    FGuid& GetPlayerUuid() { return PlayerUuid; }
    const FGuid& GetPlayerUuid() const { return PlayerUuid; }
    void SetPlayerUuid(FGuid NewValue) { PlayerUuid = NewValue;  }

    /* Status of the player in the session */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_SessionPlayerStatus Status{  };
    ERHAPI_SessionPlayerStatus& GetStatus() { return Status; }
    const ERHAPI_SessionPlayerStatus& GetStatus() const { return Status; }
    void SetStatus(ERHAPI_SessionPlayerStatus NewValue) { Status = NewValue;  }

    /* If the player is only a pending invite, this is the player that requested the invite */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid InvitingPlayerUuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InvitingPlayerUuid_IsSet{ false };
    FGuid& GetInvitingPlayerUuid() { return InvitingPlayerUuid_Optional; }
    const FGuid& GetInvitingPlayerUuid() const { return InvitingPlayerUuid_Optional; }
    const FGuid& GetInvitingPlayerUuid(const FGuid& DefaultValue) const { if (InvitingPlayerUuid_IsSet) return InvitingPlayerUuid_Optional; return DefaultValue; }
    bool GetInvitingPlayerUuid(FGuid& OutValue) const { if (InvitingPlayerUuid_IsSet) OutValue = InvitingPlayerUuid_Optional; return InvitingPlayerUuid_IsSet; }
    FGuid* GetInvitingPlayerUuidOrNull() { if (InvitingPlayerUuid_IsSet) return &InvitingPlayerUuid_Optional; return nullptr; }
    const FGuid* GetInvitingPlayerUuidOrNull() const { if (InvitingPlayerUuid_IsSet) return &InvitingPlayerUuid_Optional; return nullptr; }
    void SetInvitingPlayerUuid(FGuid NewValue) { InvitingPlayerUuid_Optional = NewValue; InvitingPlayerUuid_IsSet = true; }
    void ClearInvitingPlayerUuid() { InvitingPlayerUuid_IsSet = false; }

    /* player-defined custom data */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }

    /* Product Client Version number.  Used for compatibility checking with other players and instances */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Version_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Version_IsSet{ false };
    FString& GetVersion() { return Version_Optional; }
    const FString& GetVersion() const { return Version_Optional; }
    const FString& GetVersion(const FString& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
    bool GetVersion(FString& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
    FString* GetVersionOrNull() { if (Version_IsSet) return &Version_Optional; return nullptr; }
    const FString* GetVersionOrNull() const { if (Version_IsSet) return &Version_Optional; return nullptr; }
    void SetVersion(FString NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
    void ClearVersion() { Version_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_ClientSettings ClientSettings_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ClientSettings_IsSet{ false };
    FRHAPI_ClientSettings& GetClientSettings() { return ClientSettings_Optional; }
    const FRHAPI_ClientSettings& GetClientSettings() const { return ClientSettings_Optional; }
    const FRHAPI_ClientSettings& GetClientSettings(const FRHAPI_ClientSettings& DefaultValue) const { if (ClientSettings_IsSet) return ClientSettings_Optional; return DefaultValue; }
    bool GetClientSettings(FRHAPI_ClientSettings& OutValue) const { if (ClientSettings_IsSet) OutValue = ClientSettings_Optional; return ClientSettings_IsSet; }
    FRHAPI_ClientSettings* GetClientSettingsOrNull() { if (ClientSettings_IsSet) return &ClientSettings_Optional; return nullptr; }
    const FRHAPI_ClientSettings* GetClientSettingsOrNull() const { if (ClientSettings_IsSet) return &ClientSettings_Optional; return nullptr; }
    void SetClientSettings(FRHAPI_ClientSettings NewValue) { ClientSettings_Optional = NewValue; ClientSettings_IsSet = true; }
    void ClearClientSettings() { ClientSettings_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CrossplayPreferences CrossplayPreferences_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CrossplayPreferences_IsSet{ false };
    FRHAPI_CrossplayPreferences& GetCrossplayPreferences() { return CrossplayPreferences_Optional; }
    const FRHAPI_CrossplayPreferences& GetCrossplayPreferences() const { return CrossplayPreferences_Optional; }
    const FRHAPI_CrossplayPreferences& GetCrossplayPreferences(const FRHAPI_CrossplayPreferences& DefaultValue) const { if (CrossplayPreferences_IsSet) return CrossplayPreferences_Optional; return DefaultValue; }
    bool GetCrossplayPreferences(FRHAPI_CrossplayPreferences& OutValue) const { if (CrossplayPreferences_IsSet) OutValue = CrossplayPreferences_Optional; return CrossplayPreferences_IsSet; }
    FRHAPI_CrossplayPreferences* GetCrossplayPreferencesOrNull() { if (CrossplayPreferences_IsSet) return &CrossplayPreferences_Optional; return nullptr; }
    const FRHAPI_CrossplayPreferences* GetCrossplayPreferencesOrNull() const { if (CrossplayPreferences_IsSet) return &CrossplayPreferences_Optional; return nullptr; }
    void SetCrossplayPreferences(FRHAPI_CrossplayPreferences NewValue) { CrossplayPreferences_Optional = NewValue; CrossplayPreferences_IsSet = true; }
    void ClearCrossplayPreferences() { CrossplayPreferences_IsSet = false; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Invited_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Invited_IsSet{ false };
    FDateTime& GetInvited() { return Invited_Optional; }
    const FDateTime& GetInvited() const { return Invited_Optional; }
    const FDateTime& GetInvited(const FDateTime& DefaultValue) const { if (Invited_IsSet) return Invited_Optional; return DefaultValue; }
    bool GetInvited(FDateTime& OutValue) const { if (Invited_IsSet) OutValue = Invited_Optional; return Invited_IsSet; }
    FDateTime* GetInvitedOrNull() { if (Invited_IsSet) return &Invited_Optional; return nullptr; }
    const FDateTime* GetInvitedOrNull() const { if (Invited_IsSet) return &Invited_Optional; return nullptr; }
    void SetInvited(FDateTime NewValue) { Invited_Optional = NewValue; Invited_IsSet = true; }
    void ClearInvited() { Invited_IsSet = false; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Joined_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Joined_IsSet{ false };
    FDateTime& GetJoined() { return Joined_Optional; }
    const FDateTime& GetJoined() const { return Joined_Optional; }
    const FDateTime& GetJoined(const FDateTime& DefaultValue) const { if (Joined_IsSet) return Joined_Optional; return DefaultValue; }
    bool GetJoined(FDateTime& OutValue) const { if (Joined_IsSet) OutValue = Joined_Optional; return Joined_IsSet; }
    FDateTime* GetJoinedOrNull() { if (Joined_IsSet) return &Joined_Optional; return nullptr; }
    const FDateTime* GetJoinedOrNull() const { if (Joined_IsSet) return &Joined_Optional; return nullptr; }
    void SetJoined(FDateTime NewValue) { Joined_Optional = NewValue; Joined_IsSet = true; }
    void ClearJoined() { Joined_IsSet = false; }
};
