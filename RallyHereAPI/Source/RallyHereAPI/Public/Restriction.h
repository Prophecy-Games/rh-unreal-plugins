/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "RestrictionType.h"
#include "Restriction.generated.h"

/*
* FRHAPI_Restriction
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Restriction : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_RestrictionType Type{  };
    ERHAPI_RestrictionType& GetType() { return Type; }
    const ERHAPI_RestrictionType& GetType() const { return Type; }
    void SetType(ERHAPI_RestrictionType NewValue) { Type = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Reason_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Reason_IsSet{ false };
    FString& GetReason() { return Reason_Optional; }
    const FString& GetReason() const { return Reason_Optional; }
    const FString& GetReason(const FString& DefaultValue) const { if (Reason_IsSet) return Reason_Optional; return DefaultValue; }
    bool GetReason(FString& OutValue) const { if (Reason_IsSet) OutValue = Reason_Optional; return Reason_IsSet; }
    FString* GetReasonOrNull() { if (Reason_IsSet) return &Reason_Optional; return nullptr; }
    const FString* GetReasonOrNull() const { if (Reason_IsSet) return &Reason_Optional; return nullptr; }
    void SetReason(FString NewValue) { Reason_Optional = NewValue; Reason_IsSet = true; }
    void ClearReason() { Reason_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Expiration_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Expiration_IsSet{ false };
    FDateTime& GetExpiration() { return Expiration_Optional; }
    const FDateTime& GetExpiration() const { return Expiration_Optional; }
    const FDateTime& GetExpiration(const FDateTime& DefaultValue) const { if (Expiration_IsSet) return Expiration_Optional; return DefaultValue; }
    bool GetExpiration(FDateTime& OutValue) const { if (Expiration_IsSet) OutValue = Expiration_Optional; return Expiration_IsSet; }
    FDateTime* GetExpirationOrNull() { if (Expiration_IsSet) return &Expiration_Optional; return nullptr; }
    const FDateTime* GetExpirationOrNull() const { if (Expiration_IsSet) return &Expiration_Optional; return nullptr; }
    void SetExpiration(FDateTime NewValue) { Expiration_Optional = NewValue; Expiration_IsSet = true; }
    void ClearExpiration() { Expiration_IsSet = false; }
};
