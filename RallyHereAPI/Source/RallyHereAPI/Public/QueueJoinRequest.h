// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "QueueJoinRequest.generated.h"

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_QueueJoinRequest : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief ID of the queue to join */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString QueueId{  };
    /** @brief Gets the value of QueueId */
    FString& GetQueueId() { return QueueId; }
    /** @brief Gets the value of QueueId */
    const FString& GetQueueId() const { return QueueId; }
    /** @brief Sets the value of QueueId */
    void SetQueueId(FString NewValue) { QueueId = NewValue;  }

    /** @brief Additional tags for open match to search with (see https://openmatch.dev/site/docs/reference/api/#searchfields) */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FString> AdditionalTags_Optional{  };
    /** @brief true if AdditionalTags_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AdditionalTags_IsSet{ false };
    /** @brief Gets the value of AdditionalTags_Optional, regardless of it having been set */
    TArray<FString>& GetAdditionalTags() { return AdditionalTags_Optional; }
    /** @brief Gets the value of AdditionalTags_Optional, regardless of it having been set */
    const TArray<FString>& GetAdditionalTags() const { return AdditionalTags_Optional; }
    /** @brief Gets the value of AdditionalTags_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FString>& GetAdditionalTags(const TArray<FString>& DefaultValue) const { if (AdditionalTags_IsSet) return AdditionalTags_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AdditionalTags_Optional and returns true if it has been set, otherwise returns false */
    bool GetAdditionalTags(TArray<FString>& OutValue) const { if (AdditionalTags_IsSet) OutValue = AdditionalTags_Optional; return AdditionalTags_IsSet; }
    /** @brief Returns a pointer to AdditionalTags_Optional, if it has been set, otherwise returns nullptr */
    TArray<FString>* GetAdditionalTagsOrNull() { if (AdditionalTags_IsSet) return &AdditionalTags_Optional; return nullptr; }
    /** @brief Returns a pointer to AdditionalTags_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FString>* GetAdditionalTagsOrNull() const { if (AdditionalTags_IsSet) return &AdditionalTags_Optional; return nullptr; }
    /** @brief Sets the value of AdditionalTags_Optional and also sets AdditionalTags_IsSet to true */
    void SetAdditionalTags(TArray<FString> NewValue) { AdditionalTags_Optional = NewValue; AdditionalTags_IsSet = true; }
     /** @brief Clears the value of AdditionalTags_Optional and sets AdditionalTags_IsSet to false */
    void ClearAdditionalTags() { AdditionalTags_IsSet = false; }

    /** @brief List of map preferences in order from most desired, to least desired */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<int32> MapPreferences{  };
    /** @brief Gets the value of MapPreferences */
    TArray<int32>& GetMapPreferences() { return MapPreferences; }
    /** @brief Gets the value of MapPreferences */
    const TArray<int32>& GetMapPreferences() const { return MapPreferences; }
    /** @brief Sets the value of MapPreferences */
    void SetMapPreferences(TArray<int32> NewValue) { MapPreferences = NewValue;  }
};
