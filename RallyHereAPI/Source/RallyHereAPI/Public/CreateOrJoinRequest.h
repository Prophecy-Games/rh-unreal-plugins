/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "ClientSettings.h"
#include "CrossplayPreferences.h"
#include "CreateOrJoinRequest.generated.h"

/*
* FRHAPI_CreateOrJoinRequest
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_CreateOrJoinRequest : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* String representation of semver for client */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString ClientVersion{  };
    FString& GetClientVersion() { return ClientVersion; }
    const FString& GetClientVersion() const { return ClientVersion; }
    void SetClientVersion(FString NewValue) { ClientVersion = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_ClientSettings ClientSettings{  };
    FRHAPI_ClientSettings& GetClientSettings() { return ClientSettings; }
    const FRHAPI_ClientSettings& GetClientSettings() const { return ClientSettings; }
    void SetClientSettings(FRHAPI_ClientSettings NewValue) { ClientSettings = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CrossplayPreferences CrossplayPreferences_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CrossplayPreferences_IsSet{ false };
    FRHAPI_CrossplayPreferences& GetCrossplayPreferences() { return CrossplayPreferences_Optional; }
    const FRHAPI_CrossplayPreferences& GetCrossplayPreferences() const { return CrossplayPreferences_Optional; }
    const FRHAPI_CrossplayPreferences& GetCrossplayPreferences(const FRHAPI_CrossplayPreferences& DefaultValue) const { if (CrossplayPreferences_IsSet) return CrossplayPreferences_Optional; return DefaultValue; }
    bool GetCrossplayPreferences(FRHAPI_CrossplayPreferences& OutValue) const { if (CrossplayPreferences_IsSet) OutValue = CrossplayPreferences_Optional; return CrossplayPreferences_IsSet; }
    FRHAPI_CrossplayPreferences* GetCrossplayPreferencesOrNull() { if (CrossplayPreferences_IsSet) return &CrossplayPreferences_Optional; return nullptr; }
    const FRHAPI_CrossplayPreferences* GetCrossplayPreferencesOrNull() const { if (CrossplayPreferences_IsSet) return &CrossplayPreferences_Optional; return nullptr; }
    void SetCrossplayPreferences(FRHAPI_CrossplayPreferences NewValue) { CrossplayPreferences_Optional = NewValue; CrossplayPreferences_IsSet = true; }
    void ClearCrossplayPreferences() { CrossplayPreferences_IsSet = false; }

    /* Type of session client is creating or joining */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString SessionType{  };
    FString& GetSessionType() { return SessionType; }
    const FString& GetSessionType() const { return SessionType; }
    void SetSessionType(FString NewValue) { SessionType = NewValue;  }

    /* Preferred site for the instance and match to take place in */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SiteId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SiteId_IsSet{ false };
    int32& GetSiteId() { return SiteId_Optional; }
    const int32& GetSiteId() const { return SiteId_Optional; }
    const int32& GetSiteId(const int32& DefaultValue) const { if (SiteId_IsSet) return SiteId_Optional; return DefaultValue; }
    bool GetSiteId(int32& OutValue) const { if (SiteId_IsSet) OutValue = SiteId_Optional; return SiteId_IsSet; }
    int32* GetSiteIdOrNull() { if (SiteId_IsSet) return &SiteId_Optional; return nullptr; }
    const int32* GetSiteIdOrNull() const { if (SiteId_IsSet) return &SiteId_Optional; return nullptr; }
    void SetSiteId(int32 NewValue) { SiteId_Optional = NewValue; SiteId_IsSet = true; }
    void ClearSiteId() { SiteId_Optional = 0; SiteId_IsSet = false; }
    bool IsSiteIdDefaultValue() const { return SiteId_IsSet && SiteId_Optional == 0; }
    void SetSiteIdToDefault() { SiteId_Optional = 0; SiteId_IsSet = true; }
};
