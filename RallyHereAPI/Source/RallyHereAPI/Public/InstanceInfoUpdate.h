/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InstanceJoinableStatus.h"
#include "JoinParams.h"
#include "InstanceInfoUpdate.generated.h"

/*
* FRHAPI_InstanceInfoUpdate
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InstanceInfoUpdate : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Allocation ID for instance that's been spun up */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString AllocationId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllocationId_IsSet{ false };
    FString& GetAllocationId() { return AllocationId_Optional; }
    const FString& GetAllocationId() const { return AllocationId_Optional; }
    const FString& GetAllocationId(const FString& DefaultValue) const { if (AllocationId_IsSet) return AllocationId_Optional; return DefaultValue; }
    bool GetAllocationId(FString& OutValue) const { if (AllocationId_IsSet) OutValue = AllocationId_Optional; return AllocationId_IsSet; }
    FString* GetAllocationIdOrNull() { if (AllocationId_IsSet) return &AllocationId_Optional; return nullptr; }
    const FString* GetAllocationIdOrNull() const { if (AllocationId_IsSet) return &AllocationId_Optional; return nullptr; }
    void SetAllocationId(FString NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true; }
    void ClearAllocationId() { AllocationId_IsSet = false; }

    /* Is the instance joinable at this time? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InstanceJoinableStatus JoinStatus_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool JoinStatus_IsSet{ false };
    ERHAPI_InstanceJoinableStatus& GetJoinStatus() { return JoinStatus_Optional; }
    const ERHAPI_InstanceJoinableStatus& GetJoinStatus() const { return JoinStatus_Optional; }
    const ERHAPI_InstanceJoinableStatus& GetJoinStatus(const ERHAPI_InstanceJoinableStatus& DefaultValue) const { if (JoinStatus_IsSet) return JoinStatus_Optional; return DefaultValue; }
    bool GetJoinStatus(ERHAPI_InstanceJoinableStatus& OutValue) const { if (JoinStatus_IsSet) OutValue = JoinStatus_Optional; return JoinStatus_IsSet; }
    ERHAPI_InstanceJoinableStatus* GetJoinStatusOrNull() { if (JoinStatus_IsSet) return &JoinStatus_Optional; return nullptr; }
    const ERHAPI_InstanceJoinableStatus* GetJoinStatusOrNull() const { if (JoinStatus_IsSet) return &JoinStatus_Optional; return nullptr; }
    void SetJoinStatus(ERHAPI_InstanceJoinableStatus NewValue) { JoinStatus_Optional = NewValue; JoinStatus_IsSet = true; }
    void ClearJoinStatus() { JoinStatus_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_JoinParams JoinParams_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool JoinParams_IsSet{ false };
    FRHAPI_JoinParams& GetJoinParams() { return JoinParams_Optional; }
    const FRHAPI_JoinParams& GetJoinParams() const { return JoinParams_Optional; }
    const FRHAPI_JoinParams& GetJoinParams(const FRHAPI_JoinParams& DefaultValue) const { if (JoinParams_IsSet) return JoinParams_Optional; return DefaultValue; }
    bool GetJoinParams(FRHAPI_JoinParams& OutValue) const { if (JoinParams_IsSet) OutValue = JoinParams_Optional; return JoinParams_IsSet; }
    FRHAPI_JoinParams* GetJoinParamsOrNull() { if (JoinParams_IsSet) return &JoinParams_Optional; return nullptr; }
    const FRHAPI_JoinParams* GetJoinParamsOrNull() const { if (JoinParams_IsSet) return &JoinParams_Optional; return nullptr; }
    void SetJoinParams(FRHAPI_JoinParams NewValue) { JoinParams_Optional = NewValue; JoinParams_IsSet = true; }
    void ClearJoinParams() { JoinParams_IsSet = false; }

    /* Product Client Version number.  Used for compatibility checking with players.  Must be compatible with all players to spawn */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Version_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Version_IsSet{ false };
    FString& GetVersion() { return Version_Optional; }
    const FString& GetVersion() const { return Version_Optional; }
    const FString& GetVersion(const FString& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
    bool GetVersion(FString& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
    FString* GetVersionOrNull() { if (Version_IsSet) return &Version_Optional; return nullptr; }
    const FString* GetVersionOrNull() const { if (Version_IsSet) return &Version_Optional; return nullptr; }
    void SetVersion(FString NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
    void ClearVersion() { Version_IsSet = false; }

    /* instance-defined custom data */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }
};
