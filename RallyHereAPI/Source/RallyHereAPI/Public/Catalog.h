/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "InventoryBucketUseRuleSets.h"
#include "Items.h"
#include "Loots.h"
#include "PortalUseRulesets.h"
#include "PricePoints.h"
#include "TimeFrames.h"
#include "Vendors.h"
#include "XpTables.h"
#include "Catalog.generated.h"

/*
* FRHAPI_Catalog
*
* Full list of all loaded objects for the catalog.  Organized in a normalized model
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Catalog : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_XpTables XpTables_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool XpTables_IsSet{ false };
    FRHAPI_XpTables& GetXpTables() { return XpTables_Optional; }
    const FRHAPI_XpTables& GetXpTables() const { return XpTables_Optional; }
    const FRHAPI_XpTables& GetXpTables(const FRHAPI_XpTables& DefaultValue) const { if (XpTables_IsSet) return XpTables_Optional; return DefaultValue; }
    bool GetXpTables(FRHAPI_XpTables& OutValue) const { if (XpTables_IsSet) OutValue = XpTables_Optional; return XpTables_IsSet; }
    FRHAPI_XpTables* GetXpTablesOrNull() { if (XpTables_IsSet) return &XpTables_Optional; return nullptr; }
    const FRHAPI_XpTables* GetXpTablesOrNull() const { if (XpTables_IsSet) return &XpTables_Optional; return nullptr; }
    void SetXpTables(FRHAPI_XpTables NewValue) { XpTables_Optional = NewValue; XpTables_IsSet = true; }
    void ClearXpTables() { XpTables_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_PortalUseRulesets PortalUseRulesets_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalUseRulesets_IsSet{ false };
    FRHAPI_PortalUseRulesets& GetPortalUseRulesets() { return PortalUseRulesets_Optional; }
    const FRHAPI_PortalUseRulesets& GetPortalUseRulesets() const { return PortalUseRulesets_Optional; }
    const FRHAPI_PortalUseRulesets& GetPortalUseRulesets(const FRHAPI_PortalUseRulesets& DefaultValue) const { if (PortalUseRulesets_IsSet) return PortalUseRulesets_Optional; return DefaultValue; }
    bool GetPortalUseRulesets(FRHAPI_PortalUseRulesets& OutValue) const { if (PortalUseRulesets_IsSet) OutValue = PortalUseRulesets_Optional; return PortalUseRulesets_IsSet; }
    FRHAPI_PortalUseRulesets* GetPortalUseRulesetsOrNull() { if (PortalUseRulesets_IsSet) return &PortalUseRulesets_Optional; return nullptr; }
    const FRHAPI_PortalUseRulesets* GetPortalUseRulesetsOrNull() const { if (PortalUseRulesets_IsSet) return &PortalUseRulesets_Optional; return nullptr; }
    void SetPortalUseRulesets(FRHAPI_PortalUseRulesets NewValue) { PortalUseRulesets_Optional = NewValue; PortalUseRulesets_IsSet = true; }
    void ClearPortalUseRulesets() { PortalUseRulesets_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_InventoryBucketUseRuleSets InventoryBucketUseRuleSets_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InventoryBucketUseRuleSets_IsSet{ false };
    FRHAPI_InventoryBucketUseRuleSets& GetInventoryBucketUseRuleSets() { return InventoryBucketUseRuleSets_Optional; }
    const FRHAPI_InventoryBucketUseRuleSets& GetInventoryBucketUseRuleSets() const { return InventoryBucketUseRuleSets_Optional; }
    const FRHAPI_InventoryBucketUseRuleSets& GetInventoryBucketUseRuleSets(const FRHAPI_InventoryBucketUseRuleSets& DefaultValue) const { if (InventoryBucketUseRuleSets_IsSet) return InventoryBucketUseRuleSets_Optional; return DefaultValue; }
    bool GetInventoryBucketUseRuleSets(FRHAPI_InventoryBucketUseRuleSets& OutValue) const { if (InventoryBucketUseRuleSets_IsSet) OutValue = InventoryBucketUseRuleSets_Optional; return InventoryBucketUseRuleSets_IsSet; }
    FRHAPI_InventoryBucketUseRuleSets* GetInventoryBucketUseRuleSetsOrNull() { if (InventoryBucketUseRuleSets_IsSet) return &InventoryBucketUseRuleSets_Optional; return nullptr; }
    const FRHAPI_InventoryBucketUseRuleSets* GetInventoryBucketUseRuleSetsOrNull() const { if (InventoryBucketUseRuleSets_IsSet) return &InventoryBucketUseRuleSets_Optional; return nullptr; }
    void SetInventoryBucketUseRuleSets(FRHAPI_InventoryBucketUseRuleSets NewValue) { InventoryBucketUseRuleSets_Optional = NewValue; InventoryBucketUseRuleSets_IsSet = true; }
    void ClearInventoryBucketUseRuleSets() { InventoryBucketUseRuleSets_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Vendors Vendors_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Vendors_IsSet{ false };
    FRHAPI_Vendors& GetVendors() { return Vendors_Optional; }
    const FRHAPI_Vendors& GetVendors() const { return Vendors_Optional; }
    const FRHAPI_Vendors& GetVendors(const FRHAPI_Vendors& DefaultValue) const { if (Vendors_IsSet) return Vendors_Optional; return DefaultValue; }
    bool GetVendors(FRHAPI_Vendors& OutValue) const { if (Vendors_IsSet) OutValue = Vendors_Optional; return Vendors_IsSet; }
    FRHAPI_Vendors* GetVendorsOrNull() { if (Vendors_IsSet) return &Vendors_Optional; return nullptr; }
    const FRHAPI_Vendors* GetVendorsOrNull() const { if (Vendors_IsSet) return &Vendors_Optional; return nullptr; }
    void SetVendors(FRHAPI_Vendors NewValue) { Vendors_Optional = NewValue; Vendors_IsSet = true; }
    void ClearVendors() { Vendors_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Loots Loot_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Loot_IsSet{ false };
    FRHAPI_Loots& GetLoot() { return Loot_Optional; }
    const FRHAPI_Loots& GetLoot() const { return Loot_Optional; }
    const FRHAPI_Loots& GetLoot(const FRHAPI_Loots& DefaultValue) const { if (Loot_IsSet) return Loot_Optional; return DefaultValue; }
    bool GetLoot(FRHAPI_Loots& OutValue) const { if (Loot_IsSet) OutValue = Loot_Optional; return Loot_IsSet; }
    FRHAPI_Loots* GetLootOrNull() { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    const FRHAPI_Loots* GetLootOrNull() const { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    void SetLoot(FRHAPI_Loots NewValue) { Loot_Optional = NewValue; Loot_IsSet = true; }
    void ClearLoot() { Loot_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Items Items_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Items_IsSet{ false };
    FRHAPI_Items& GetItems() { return Items_Optional; }
    const FRHAPI_Items& GetItems() const { return Items_Optional; }
    const FRHAPI_Items& GetItems(const FRHAPI_Items& DefaultValue) const { if (Items_IsSet) return Items_Optional; return DefaultValue; }
    bool GetItems(FRHAPI_Items& OutValue) const { if (Items_IsSet) OutValue = Items_Optional; return Items_IsSet; }
    FRHAPI_Items* GetItemsOrNull() { if (Items_IsSet) return &Items_Optional; return nullptr; }
    const FRHAPI_Items* GetItemsOrNull() const { if (Items_IsSet) return &Items_Optional; return nullptr; }
    void SetItems(FRHAPI_Items NewValue) { Items_Optional = NewValue; Items_IsSet = true; }
    void ClearItems() { Items_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_PricePoints PricePoints_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PricePoints_IsSet{ false };
    FRHAPI_PricePoints& GetPricePoints() { return PricePoints_Optional; }
    const FRHAPI_PricePoints& GetPricePoints() const { return PricePoints_Optional; }
    const FRHAPI_PricePoints& GetPricePoints(const FRHAPI_PricePoints& DefaultValue) const { if (PricePoints_IsSet) return PricePoints_Optional; return DefaultValue; }
    bool GetPricePoints(FRHAPI_PricePoints& OutValue) const { if (PricePoints_IsSet) OutValue = PricePoints_Optional; return PricePoints_IsSet; }
    FRHAPI_PricePoints* GetPricePointsOrNull() { if (PricePoints_IsSet) return &PricePoints_Optional; return nullptr; }
    const FRHAPI_PricePoints* GetPricePointsOrNull() const { if (PricePoints_IsSet) return &PricePoints_Optional; return nullptr; }
    void SetPricePoints(FRHAPI_PricePoints NewValue) { PricePoints_Optional = NewValue; PricePoints_IsSet = true; }
    void ClearPricePoints() { PricePoints_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_TimeFrames TimeFrames_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TimeFrames_IsSet{ false };
    FRHAPI_TimeFrames& GetTimeFrames() { return TimeFrames_Optional; }
    const FRHAPI_TimeFrames& GetTimeFrames() const { return TimeFrames_Optional; }
    const FRHAPI_TimeFrames& GetTimeFrames(const FRHAPI_TimeFrames& DefaultValue) const { if (TimeFrames_IsSet) return TimeFrames_Optional; return DefaultValue; }
    bool GetTimeFrames(FRHAPI_TimeFrames& OutValue) const { if (TimeFrames_IsSet) OutValue = TimeFrames_Optional; return TimeFrames_IsSet; }
    FRHAPI_TimeFrames* GetTimeFramesOrNull() { if (TimeFrames_IsSet) return &TimeFrames_Optional; return nullptr; }
    const FRHAPI_TimeFrames* GetTimeFramesOrNull() const { if (TimeFrames_IsSet) return &TimeFrames_Optional; return nullptr; }
    void SetTimeFrames(FRHAPI_TimeFrames NewValue) { TimeFrames_Optional = NewValue; TimeFrames_IsSet = true; }
    void ClearTimeFrames() { TimeFrames_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
    void ClearCacheInfo() { CacheInfo_IsSet = false; }
};
