/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "MapConfig.generated.h"

/*
* FRHAPI_MapConfig
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MapConfig : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* ID to uniquely identify this map game */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 MapGameId{ 0 };
    int32& GetMapGameId() { return MapGameId; }
    const int32& GetMapGameId() const { return MapGameId; }
    void SetMapGameId(int32 NewValue) { MapGameId = NewValue;  }
    bool IsMapGameIdDefaultValue() const { return MapGameId == 0; }
    void SetMapGameIdToDefault() { MapGameId = 0;  }

    /* Name of the map the instance should load into */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString MapName{  };
    FString& GetMapName() { return MapName; }
    const FString& GetMapName() const { return MapName; }
    void SetMapName(FString NewValue) { MapName = NewValue;  }

    /* Game mode for the instance to spawn in */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Mode_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Mode_IsSet{ false };
    FString& GetMode() { return Mode_Optional; }
    const FString& GetMode() const { return Mode_Optional; }
    const FString& GetMode(const FString& DefaultValue) const { if (Mode_IsSet) return Mode_Optional; return DefaultValue; }
    bool GetMode(FString& OutValue) const { if (Mode_IsSet) OutValue = Mode_Optional; return Mode_IsSet; }
    FString* GetModeOrNull() { if (Mode_IsSet) return &Mode_Optional; return nullptr; }
    const FString* GetModeOrNull() const { if (Mode_IsSet) return &Mode_Optional; return nullptr; }
    void SetMode(FString NewValue) { Mode_Optional = NewValue; Mode_IsSet = true; }
    void ClearMode() { Mode_IsSet = false; }

    /* Chance that this map will get selected in a rotation list */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    double SelectionChance{  };
    double& GetSelectionChance() { return SelectionChance; }
    const double& GetSelectionChance() const { return SelectionChance; }
    void SetSelectionChance(double NewValue) { SelectionChance = NewValue;  }

    /* Custom data to pass through to the instance */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }
};
