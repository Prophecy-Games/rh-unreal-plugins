/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "OAuthTokenResponse.generated.h"

/*
* FRHAPI_OAuthTokenResponse
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_OAuthTokenResponse : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString AccessToken_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AccessToken_IsSet{ false };
    FString& GetAccessToken() { return AccessToken_Optional; }
    const FString& GetAccessToken() const { return AccessToken_Optional; }
    const FString& GetAccessToken(const FString& DefaultValue) const { if (AccessToken_IsSet) return AccessToken_Optional; return DefaultValue; }
    bool GetAccessToken(FString& OutValue) const { if (AccessToken_IsSet) OutValue = AccessToken_Optional; return AccessToken_IsSet; }
    FString* GetAccessTokenOrNull() { if (AccessToken_IsSet) return &AccessToken_Optional; return nullptr; }
    const FString* GetAccessTokenOrNull() const { if (AccessToken_IsSet) return &AccessToken_Optional; return nullptr; }
    void SetAccessToken(FString NewValue) { AccessToken_Optional = NewValue; AccessToken_IsSet = true; }
    void ClearAccessToken() { AccessToken_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString RefreshToken_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RefreshToken_IsSet{ false };
    FString& GetRefreshToken() { return RefreshToken_Optional; }
    const FString& GetRefreshToken() const { return RefreshToken_Optional; }
    const FString& GetRefreshToken(const FString& DefaultValue) const { if (RefreshToken_IsSet) return RefreshToken_Optional; return DefaultValue; }
    bool GetRefreshToken(FString& OutValue) const { if (RefreshToken_IsSet) OutValue = RefreshToken_Optional; return RefreshToken_IsSet; }
    FString* GetRefreshTokenOrNull() { if (RefreshToken_IsSet) return &RefreshToken_Optional; return nullptr; }
    const FString* GetRefreshTokenOrNull() const { if (RefreshToken_IsSet) return &RefreshToken_Optional; return nullptr; }
    void SetRefreshToken(FString NewValue) { RefreshToken_Optional = NewValue; RefreshToken_IsSet = true; }
    void ClearRefreshToken() { RefreshToken_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NeedsEula_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NeedsEula_IsSet{ false };
    bool& GetNeedsEula() { return NeedsEula_Optional; }
    const bool& GetNeedsEula() const { return NeedsEula_Optional; }
    const bool& GetNeedsEula(const bool& DefaultValue) const { if (NeedsEula_IsSet) return NeedsEula_Optional; return DefaultValue; }
    bool GetNeedsEula(bool& OutValue) const { if (NeedsEula_IsSet) OutValue = NeedsEula_Optional; return NeedsEula_IsSet; }
    bool* GetNeedsEulaOrNull() { if (NeedsEula_IsSet) return &NeedsEula_Optional; return nullptr; }
    const bool* GetNeedsEulaOrNull() const { if (NeedsEula_IsSet) return &NeedsEula_Optional; return nullptr; }
    void SetNeedsEula(bool NewValue) { NeedsEula_Optional = NewValue; NeedsEula_IsSet = true; }
    void ClearNeedsEula() { NeedsEula_Optional = false; NeedsEula_IsSet = false; }
    bool IsNeedsEulaDefaultValue() const { return NeedsEula_IsSet && NeedsEula_Optional == false; }
    void SetNeedsEulaToDefault() { NeedsEula_Optional = false; NeedsEula_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NeedsTos_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NeedsTos_IsSet{ false };
    bool& GetNeedsTos() { return NeedsTos_Optional; }
    const bool& GetNeedsTos() const { return NeedsTos_Optional; }
    const bool& GetNeedsTos(const bool& DefaultValue) const { if (NeedsTos_IsSet) return NeedsTos_Optional; return DefaultValue; }
    bool GetNeedsTos(bool& OutValue) const { if (NeedsTos_IsSet) OutValue = NeedsTos_Optional; return NeedsTos_IsSet; }
    bool* GetNeedsTosOrNull() { if (NeedsTos_IsSet) return &NeedsTos_Optional; return nullptr; }
    const bool* GetNeedsTosOrNull() const { if (NeedsTos_IsSet) return &NeedsTos_Optional; return nullptr; }
    void SetNeedsTos(bool NewValue) { NeedsTos_Optional = NewValue; NeedsTos_IsSet = true; }
    void ClearNeedsTos() { NeedsTos_Optional = false; NeedsTos_IsSet = false; }
    bool IsNeedsTosDefaultValue() const { return NeedsTos_IsSet && NeedsTos_Optional == false; }
    void SetNeedsTosToDefault() { NeedsTos_Optional = false; NeedsTos_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NeedsPrivacyPolicy_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool NeedsPrivacyPolicy_IsSet{ false };
    bool& GetNeedsPrivacyPolicy() { return NeedsPrivacyPolicy_Optional; }
    const bool& GetNeedsPrivacyPolicy() const { return NeedsPrivacyPolicy_Optional; }
    const bool& GetNeedsPrivacyPolicy(const bool& DefaultValue) const { if (NeedsPrivacyPolicy_IsSet) return NeedsPrivacyPolicy_Optional; return DefaultValue; }
    bool GetNeedsPrivacyPolicy(bool& OutValue) const { if (NeedsPrivacyPolicy_IsSet) OutValue = NeedsPrivacyPolicy_Optional; return NeedsPrivacyPolicy_IsSet; }
    bool* GetNeedsPrivacyPolicyOrNull() { if (NeedsPrivacyPolicy_IsSet) return &NeedsPrivacyPolicy_Optional; return nullptr; }
    const bool* GetNeedsPrivacyPolicyOrNull() const { if (NeedsPrivacyPolicy_IsSet) return &NeedsPrivacyPolicy_Optional; return nullptr; }
    void SetNeedsPrivacyPolicy(bool NewValue) { NeedsPrivacyPolicy_Optional = NewValue; NeedsPrivacyPolicy_IsSet = true; }
    void ClearNeedsPrivacyPolicy() { NeedsPrivacyPolicy_Optional = false; NeedsPrivacyPolicy_IsSet = false; }
    bool IsNeedsPrivacyPolicyDefaultValue() const { return NeedsPrivacyPolicy_IsSet && NeedsPrivacyPolicy_Optional == false; }
    void SetNeedsPrivacyPolicyToDefault() { NeedsPrivacyPolicy_Optional = false; NeedsPrivacyPolicy_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString RegeneratedCode_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RegeneratedCode_IsSet{ false };
    FString& GetRegeneratedCode() { return RegeneratedCode_Optional; }
    const FString& GetRegeneratedCode() const { return RegeneratedCode_Optional; }
    const FString& GetRegeneratedCode(const FString& DefaultValue) const { if (RegeneratedCode_IsSet) return RegeneratedCode_Optional; return DefaultValue; }
    bool GetRegeneratedCode(FString& OutValue) const { if (RegeneratedCode_IsSet) OutValue = RegeneratedCode_Optional; return RegeneratedCode_IsSet; }
    FString* GetRegeneratedCodeOrNull() { if (RegeneratedCode_IsSet) return &RegeneratedCode_Optional; return nullptr; }
    const FString* GetRegeneratedCodeOrNull() const { if (RegeneratedCode_IsSet) return &RegeneratedCode_Optional; return nullptr; }
    void SetRegeneratedCode(FString NewValue) { RegeneratedCode_Optional = NewValue; RegeneratedCode_IsSet = true; }
    void ClearRegeneratedCode() { RegeneratedCode_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString ErrorMessage_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ErrorMessage_IsSet{ false };
    FString& GetErrorMessage() { return ErrorMessage_Optional; }
    const FString& GetErrorMessage() const { return ErrorMessage_Optional; }
    const FString& GetErrorMessage(const FString& DefaultValue) const { if (ErrorMessage_IsSet) return ErrorMessage_Optional; return DefaultValue; }
    bool GetErrorMessage(FString& OutValue) const { if (ErrorMessage_IsSet) OutValue = ErrorMessage_Optional; return ErrorMessage_IsSet; }
    FString* GetErrorMessageOrNull() { if (ErrorMessage_IsSet) return &ErrorMessage_Optional; return nullptr; }
    const FString* GetErrorMessageOrNull() const { if (ErrorMessage_IsSet) return &ErrorMessage_Optional; return nullptr; }
    void SetErrorMessage(FString NewValue) { ErrorMessage_Optional = NewValue; ErrorMessage_IsSet = true; }
    void ClearErrorMessage() { ErrorMessage_IsSet = false; }
};
