/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerPersonResponse.generated.h"

/*
* FRHAPI_PlayerPersonResponse
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerPersonResponse : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 PlayerId{ 0 };
    int32& GetPlayerId() { return PlayerId; }
    const int32& GetPlayerId() const { return PlayerId; }
    void SetPlayerId(int32 NewValue) { PlayerId = NewValue;  }
    bool IsPlayerIdDefaultValue() const { return PlayerId == 0; }
    void SetPlayerIdToDefault() { PlayerId = 0;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PlayerUuid{  };
    FString& GetPlayerUuid() { return PlayerUuid; }
    const FString& GetPlayerUuid() const { return PlayerUuid; }
    void SetPlayerUuid(FString NewValue) { PlayerUuid = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 ActivePlayerId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ActivePlayerId_IsSet{ false };
    int32& GetActivePlayerId() { return ActivePlayerId_Optional; }
    const int32& GetActivePlayerId() const { return ActivePlayerId_Optional; }
    const int32& GetActivePlayerId(const int32& DefaultValue) const { if (ActivePlayerId_IsSet) return ActivePlayerId_Optional; return DefaultValue; }
    bool GetActivePlayerId(int32& OutValue) const { if (ActivePlayerId_IsSet) OutValue = ActivePlayerId_Optional; return ActivePlayerId_IsSet; }
    int32* GetActivePlayerIdOrNull() { if (ActivePlayerId_IsSet) return &ActivePlayerId_Optional; return nullptr; }
    const int32* GetActivePlayerIdOrNull() const { if (ActivePlayerId_IsSet) return &ActivePlayerId_Optional; return nullptr; }
    void SetActivePlayerId(int32 NewValue) { ActivePlayerId_Optional = NewValue; ActivePlayerId_IsSet = true; }
    void ClearActivePlayerId() { ActivePlayerId_Optional = 0; ActivePlayerId_IsSet = false; }
    bool IsActivePlayerIdDefaultValue() const { return ActivePlayerId_IsSet && ActivePlayerId_Optional == 0; }
    void SetActivePlayerIdToDefault() { ActivePlayerId_Optional = 0; ActivePlayerId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString ActivePlayerUuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ActivePlayerUuid_IsSet{ false };
    FString& GetActivePlayerUuid() { return ActivePlayerUuid_Optional; }
    const FString& GetActivePlayerUuid() const { return ActivePlayerUuid_Optional; }
    const FString& GetActivePlayerUuid(const FString& DefaultValue) const { if (ActivePlayerUuid_IsSet) return ActivePlayerUuid_Optional; return DefaultValue; }
    bool GetActivePlayerUuid(FString& OutValue) const { if (ActivePlayerUuid_IsSet) OutValue = ActivePlayerUuid_Optional; return ActivePlayerUuid_IsSet; }
    FString* GetActivePlayerUuidOrNull() { if (ActivePlayerUuid_IsSet) return &ActivePlayerUuid_Optional; return nullptr; }
    const FString* GetActivePlayerUuidOrNull() const { if (ActivePlayerUuid_IsSet) return &ActivePlayerUuid_Optional; return nullptr; }
    void SetActivePlayerUuid(FString NewValue) { ActivePlayerUuid_Optional = NewValue; ActivePlayerUuid_IsSet = true; }
    void ClearActivePlayerUuid() { ActivePlayerUuid_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PersonId{  };
    FString& GetPersonId() { return PersonId; }
    const FString& GetPersonId() const { return PersonId; }
    void SetPersonId(FString NewValue) { PersonId = NewValue;  }
};
