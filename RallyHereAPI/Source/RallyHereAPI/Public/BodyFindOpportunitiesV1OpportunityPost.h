/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "BodyFindOpportunitiesV1OpportunityPost.generated.h"

/*
* FRHAPI_BodyFindOpportunitiesV1OpportunityPost
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_BodyFindOpportunitiesV1OpportunityPost : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 ScreenPixelWidth_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ScreenPixelWidth_IsSet{ false };
    int32& GetScreenPixelWidth() { return ScreenPixelWidth_Optional; }
    const int32& GetScreenPixelWidth() const { return ScreenPixelWidth_Optional; }
    const int32& GetScreenPixelWidth(const int32& DefaultValue) const { if (ScreenPixelWidth_IsSet) return ScreenPixelWidth_Optional; return DefaultValue; }
    bool GetScreenPixelWidth(int32& OutValue) const { if (ScreenPixelWidth_IsSet) OutValue = ScreenPixelWidth_Optional; return ScreenPixelWidth_IsSet; }
    int32* GetScreenPixelWidthOrNull() { if (ScreenPixelWidth_IsSet) return &ScreenPixelWidth_Optional; return nullptr; }
    const int32* GetScreenPixelWidthOrNull() const { if (ScreenPixelWidth_IsSet) return &ScreenPixelWidth_Optional; return nullptr; }
    void SetScreenPixelWidth(int32 NewValue) { ScreenPixelWidth_Optional = NewValue; ScreenPixelWidth_IsSet = true; }
    void ClearScreenPixelWidth() { ScreenPixelWidth_Optional = 0; ScreenPixelWidth_IsSet = false; }
    bool IsScreenPixelWidthDefaultValue() const { return ScreenPixelWidth_IsSet && ScreenPixelWidth_Optional == 0; }
    void SetScreenPixelWidthToDefault() { ScreenPixelWidth_Optional = 0; ScreenPixelWidth_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 ScreenPixelHeight_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ScreenPixelHeight_IsSet{ false };
    int32& GetScreenPixelHeight() { return ScreenPixelHeight_Optional; }
    const int32& GetScreenPixelHeight() const { return ScreenPixelHeight_Optional; }
    const int32& GetScreenPixelHeight(const int32& DefaultValue) const { if (ScreenPixelHeight_IsSet) return ScreenPixelHeight_Optional; return DefaultValue; }
    bool GetScreenPixelHeight(int32& OutValue) const { if (ScreenPixelHeight_IsSet) OutValue = ScreenPixelHeight_Optional; return ScreenPixelHeight_IsSet; }
    int32* GetScreenPixelHeightOrNull() { if (ScreenPixelHeight_IsSet) return &ScreenPixelHeight_Optional; return nullptr; }
    const int32* GetScreenPixelHeightOrNull() const { if (ScreenPixelHeight_IsSet) return &ScreenPixelHeight_Optional; return nullptr; }
    void SetScreenPixelHeight(int32 NewValue) { ScreenPixelHeight_Optional = NewValue; ScreenPixelHeight_IsSet = true; }
    void ClearScreenPixelHeight() { ScreenPixelHeight_Optional = 0; ScreenPixelHeight_IsSet = false; }
    bool IsScreenPixelHeightDefaultValue() const { return ScreenPixelHeight_IsSet && ScreenPixelHeight_Optional == 0; }
    void SetScreenPixelHeightToDefault() { ScreenPixelHeight_Optional = 0; ScreenPixelHeight_IsSet = true; }

    /* [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for the user */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString CountryCode{  };
    FString& GetCountryCode() { return CountryCode; }
    const FString& GetCountryCode() const { return CountryCode; }
    void SetCountryCode(FString NewValue) { CountryCode = NewValue;  }

    /* [ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php) language code */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString LanguageCode{  };
    FString& GetLanguageCode() { return LanguageCode; }
    const FString& GetLanguageCode() const { return LanguageCode; }
    void SetLanguageCode(FString NewValue) { LanguageCode = NewValue;  }

    /* Unique Identifier for the device a session is started on.  E.g should be the same for multiple users on the same device. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString DeviceId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool DeviceId_IsSet{ false };
    FString& GetDeviceId() { return DeviceId_Optional; }
    const FString& GetDeviceId() const { return DeviceId_Optional; }
    const FString& GetDeviceId(const FString& DefaultValue) const { if (DeviceId_IsSet) return DeviceId_Optional; return DefaultValue; }
    bool GetDeviceId(FString& OutValue) const { if (DeviceId_IsSet) OutValue = DeviceId_Optional; return DeviceId_IsSet; }
    FString* GetDeviceIdOrNull() { if (DeviceId_IsSet) return &DeviceId_Optional; return nullptr; }
    const FString* GetDeviceIdOrNull() const { if (DeviceId_IsSet) return &DeviceId_Optional; return nullptr; }
    void SetDeviceId(FString NewValue) { DeviceId_Optional = NewValue; DeviceId_IsSet = true; }
    void ClearDeviceId() { DeviceId_IsSet = false; }
};
