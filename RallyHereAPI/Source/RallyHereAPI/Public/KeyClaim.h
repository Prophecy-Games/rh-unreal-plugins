/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryPortal.h"
#include "KeyClaim.generated.h"

/*
* FRHAPI_KeyClaim
*
* A KeyClaim is a reward a player for fulfilling requirements of an eternal marketing campaign. Once the player has completed the requirements of the campaign and have been assigned a sku of the campaign by the Platform, invoke Process Key Entitlements to consume the sku from the Platform for a Key Claim.
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_KeyClaim : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Platform the player is on */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryPortal PortalId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalId_IsSet{ false };
    ERHAPI_InventoryPortal& GetPortalId() { return PortalId_Optional; }
    const ERHAPI_InventoryPortal& GetPortalId() const { return PortalId_Optional; }
    const ERHAPI_InventoryPortal& GetPortalId(const ERHAPI_InventoryPortal& DefaultValue) const { if (PortalId_IsSet) return PortalId_Optional; return DefaultValue; }
    bool GetPortalId(ERHAPI_InventoryPortal& OutValue) const { if (PortalId_IsSet) OutValue = PortalId_Optional; return PortalId_IsSet; }
    ERHAPI_InventoryPortal* GetPortalIdOrNull() { if (PortalId_IsSet) return &PortalId_Optional; return nullptr; }
    const ERHAPI_InventoryPortal* GetPortalIdOrNull() const { if (PortalId_IsSet) return &PortalId_Optional; return nullptr; }
    void SetPortalId(ERHAPI_InventoryPortal NewValue) { PortalId_Optional = NewValue; PortalId_IsSet = true; }
    void ClearPortalId() { PortalId_IsSet = false; }

    /* The Platform's unique identifier for the player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PortalUserId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalUserId_IsSet{ false };
    FString& GetPortalUserId() { return PortalUserId_Optional; }
    const FString& GetPortalUserId() const { return PortalUserId_Optional; }
    const FString& GetPortalUserId(const FString& DefaultValue) const { if (PortalUserId_IsSet) return PortalUserId_Optional; return DefaultValue; }
    bool GetPortalUserId(FString& OutValue) const { if (PortalUserId_IsSet) OutValue = PortalUserId_Optional; return PortalUserId_IsSet; }
    FString* GetPortalUserIdOrNull() { if (PortalUserId_IsSet) return &PortalUserId_Optional; return nullptr; }
    const FString* GetPortalUserIdOrNull() const { if (PortalUserId_IsSet) return &PortalUserId_Optional; return nullptr; }
    void SetPortalUserId(FString NewValue) { PortalUserId_Optional = NewValue; PortalUserId_IsSet = true; }
    void ClearPortalUserId() { PortalUserId_IsSet = false; }

    /* The unique identifier for the KeyClaim */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid KeyClaimUuid{  };
    FGuid& GetKeyClaimUuid() { return KeyClaimUuid; }
    const FGuid& GetKeyClaimUuid() const { return KeyClaimUuid; }
    void SetKeyClaimUuid(FGuid NewValue) { KeyClaimUuid = NewValue;  }

    /* Whether the KeyClaim has been claimed */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Claimed_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Claimed_IsSet{ false };
    bool& GetClaimed() { return Claimed_Optional; }
    const bool& GetClaimed() const { return Claimed_Optional; }
    const bool& GetClaimed(const bool& DefaultValue) const { if (Claimed_IsSet) return Claimed_Optional; return DefaultValue; }
    bool GetClaimed(bool& OutValue) const { if (Claimed_IsSet) OutValue = Claimed_Optional; return Claimed_IsSet; }
    bool* GetClaimedOrNull() { if (Claimed_IsSet) return &Claimed_Optional; return nullptr; }
    const bool* GetClaimedOrNull() const { if (Claimed_IsSet) return &Claimed_Optional; return nullptr; }
    void SetClaimed(bool NewValue) { Claimed_Optional = NewValue; Claimed_IsSet = true; }
    void ClearClaimed() { Claimed_Optional = false; Claimed_IsSet = false; }
    bool IsClaimedDefaultValue() const { return Claimed_IsSet && Claimed_Optional == false; }
    void SetClaimedToDefault() { Claimed_Optional = false; Claimed_IsSet = true; }

    /* The external key that was been claimed by the player. This is only filled out once the KeyClaim has been claimed */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString ExternalKey_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ExternalKey_IsSet{ false };
    FString& GetExternalKey() { return ExternalKey_Optional; }
    const FString& GetExternalKey() const { return ExternalKey_Optional; }
    const FString& GetExternalKey(const FString& DefaultValue) const { if (ExternalKey_IsSet) return ExternalKey_Optional; return DefaultValue; }
    bool GetExternalKey(FString& OutValue) const { if (ExternalKey_IsSet) OutValue = ExternalKey_Optional; return ExternalKey_IsSet; }
    FString* GetExternalKeyOrNull() { if (ExternalKey_IsSet) return &ExternalKey_Optional; return nullptr; }
    const FString* GetExternalKeyOrNull() const { if (ExternalKey_IsSet) return &ExternalKey_Optional; return nullptr; }
    void SetExternalKey(FString NewValue) { ExternalKey_Optional = NewValue; ExternalKey_IsSet = true; }
    void ClearExternalKey() { ExternalKey_IsSet = false; }

    /* The unique identifier for the MarketingCampaign that the external key was claimed from */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid ExternalKeyCampaignUuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ExternalKeyCampaignUuid_IsSet{ false };
    FGuid& GetExternalKeyCampaignUuid() { return ExternalKeyCampaignUuid_Optional; }
    const FGuid& GetExternalKeyCampaignUuid() const { return ExternalKeyCampaignUuid_Optional; }
    const FGuid& GetExternalKeyCampaignUuid(const FGuid& DefaultValue) const { if (ExternalKeyCampaignUuid_IsSet) return ExternalKeyCampaignUuid_Optional; return DefaultValue; }
    bool GetExternalKeyCampaignUuid(FGuid& OutValue) const { if (ExternalKeyCampaignUuid_IsSet) OutValue = ExternalKeyCampaignUuid_Optional; return ExternalKeyCampaignUuid_IsSet; }
    FGuid* GetExternalKeyCampaignUuidOrNull() { if (ExternalKeyCampaignUuid_IsSet) return &ExternalKeyCampaignUuid_Optional; return nullptr; }
    const FGuid* GetExternalKeyCampaignUuidOrNull() const { if (ExternalKeyCampaignUuid_IsSet) return &ExternalKeyCampaignUuid_Optional; return nullptr; }
    void SetExternalKeyCampaignUuid(FGuid NewValue) { ExternalKeyCampaignUuid_Optional = NewValue; ExternalKeyCampaignUuid_IsSet = true; }
    void ClearExternalKeyCampaignUuid() { ExternalKeyCampaignUuid_IsSet = false; }

    /* This can be used to allow the player to claim different types based on their preferrence.hile we don't have requirement for what should contain, it must match a key type assigned to the external campaign. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString ExternalKeyType_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ExternalKeyType_IsSet{ false };
    FString& GetExternalKeyType() { return ExternalKeyType_Optional; }
    const FString& GetExternalKeyType() const { return ExternalKeyType_Optional; }
    const FString& GetExternalKeyType(const FString& DefaultValue) const { if (ExternalKeyType_IsSet) return ExternalKeyType_Optional; return DefaultValue; }
    bool GetExternalKeyType(FString& OutValue) const { if (ExternalKeyType_IsSet) OutValue = ExternalKeyType_Optional; return ExternalKeyType_IsSet; }
    FString* GetExternalKeyTypeOrNull() { if (ExternalKeyType_IsSet) return &ExternalKeyType_Optional; return nullptr; }
    const FString* GetExternalKeyTypeOrNull() const { if (ExternalKeyType_IsSet) return &ExternalKeyType_Optional; return nullptr; }
    void SetExternalKeyType(FString NewValue) { ExternalKeyType_Optional = NewValue; ExternalKeyType_IsSet = true; }
    void ClearExternalKeyType() { ExternalKeyType_IsSet = false; }

    /* The time the KeyClaim was created */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString CreatedOn_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CreatedOn_IsSet{ false };
    FString& GetCreatedOn() { return CreatedOn_Optional; }
    const FString& GetCreatedOn() const { return CreatedOn_Optional; }
    const FString& GetCreatedOn(const FString& DefaultValue) const { if (CreatedOn_IsSet) return CreatedOn_Optional; return DefaultValue; }
    bool GetCreatedOn(FString& OutValue) const { if (CreatedOn_IsSet) OutValue = CreatedOn_Optional; return CreatedOn_IsSet; }
    FString* GetCreatedOnOrNull() { if (CreatedOn_IsSet) return &CreatedOn_Optional; return nullptr; }
    const FString* GetCreatedOnOrNull() const { if (CreatedOn_IsSet) return &CreatedOn_Optional; return nullptr; }
    void SetCreatedOn(FString NewValue) { CreatedOn_Optional = NewValue; CreatedOn_IsSet = true; }
    void ClearCreatedOn() { CreatedOn_IsSet = false; }

    /* The time the KeyClaim was last modified */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString LastModifiedOn_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool LastModifiedOn_IsSet{ false };
    FString& GetLastModifiedOn() { return LastModifiedOn_Optional; }
    const FString& GetLastModifiedOn() const { return LastModifiedOn_Optional; }
    const FString& GetLastModifiedOn(const FString& DefaultValue) const { if (LastModifiedOn_IsSet) return LastModifiedOn_Optional; return DefaultValue; }
    bool GetLastModifiedOn(FString& OutValue) const { if (LastModifiedOn_IsSet) OutValue = LastModifiedOn_Optional; return LastModifiedOn_IsSet; }
    FString* GetLastModifiedOnOrNull() { if (LastModifiedOn_IsSet) return &LastModifiedOn_Optional; return nullptr; }
    const FString* GetLastModifiedOnOrNull() const { if (LastModifiedOn_IsSet) return &LastModifiedOn_Optional; return nullptr; }
    void SetLastModifiedOn(FString NewValue) { LastModifiedOn_Optional = NewValue; LastModifiedOn_IsSet = true; }
    void ClearLastModifiedOn() { LastModifiedOn_IsSet = false; }
};
