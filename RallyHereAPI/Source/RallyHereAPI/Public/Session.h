/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Browser.h"
#include "Instance.h"
#include "Match.h"
#include "Matchmaking.h"
#include "PlatformSession.h"
#include "SessionTeam.h"
#include "Session.generated.h"

/*
* FRHAPI_Session
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Session : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* template type */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Type{  };
    FString& GetType() { return Type; }
    const FString& GetType() const { return Type; }
    void SetType(FString NewValue) { Type = NewValue;  }

    /* unique ID for this session within its type */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString SessionId{  };
    FString& GetSessionId() { return SessionId; }
    const FString& GetSessionId() const { return SessionId; }
    void SetSessionId(FString NewValue) { SessionId = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Instance Instance_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Instance_IsSet{ false };
    FRHAPI_Instance& GetInstance() { return Instance_Optional; }
    const FRHAPI_Instance& GetInstance() const { return Instance_Optional; }
    const FRHAPI_Instance& GetInstance(const FRHAPI_Instance& DefaultValue) const { if (Instance_IsSet) return Instance_Optional; return DefaultValue; }
    bool GetInstance(FRHAPI_Instance& OutValue) const { if (Instance_IsSet) OutValue = Instance_Optional; return Instance_IsSet; }
    FRHAPI_Instance* GetInstanceOrNull() { if (Instance_IsSet) return &Instance_Optional; return nullptr; }
    const FRHAPI_Instance* GetInstanceOrNull() const { if (Instance_IsSet) return &Instance_Optional; return nullptr; }
    void SetInstance(FRHAPI_Instance NewValue) { Instance_Optional = NewValue; Instance_IsSet = true; }
    void ClearInstance() { Instance_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Match Match_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Match_IsSet{ false };
    FRHAPI_Match& GetMatch() { return Match_Optional; }
    const FRHAPI_Match& GetMatch() const { return Match_Optional; }
    const FRHAPI_Match& GetMatch(const FRHAPI_Match& DefaultValue) const { if (Match_IsSet) return Match_Optional; return DefaultValue; }
    bool GetMatch(FRHAPI_Match& OutValue) const { if (Match_IsSet) OutValue = Match_Optional; return Match_IsSet; }
    FRHAPI_Match* GetMatchOrNull() { if (Match_IsSet) return &Match_Optional; return nullptr; }
    const FRHAPI_Match* GetMatchOrNull() const { if (Match_IsSet) return &Match_Optional; return nullptr; }
    void SetMatch(FRHAPI_Match NewValue) { Match_Optional = NewValue; Match_IsSet = true; }
    void ClearMatch() { Match_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Matchmaking Matchmaking_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Matchmaking_IsSet{ false };
    FRHAPI_Matchmaking& GetMatchmaking() { return Matchmaking_Optional; }
    const FRHAPI_Matchmaking& GetMatchmaking() const { return Matchmaking_Optional; }
    const FRHAPI_Matchmaking& GetMatchmaking(const FRHAPI_Matchmaking& DefaultValue) const { if (Matchmaking_IsSet) return Matchmaking_Optional; return DefaultValue; }
    bool GetMatchmaking(FRHAPI_Matchmaking& OutValue) const { if (Matchmaking_IsSet) OutValue = Matchmaking_Optional; return Matchmaking_IsSet; }
    FRHAPI_Matchmaking* GetMatchmakingOrNull() { if (Matchmaking_IsSet) return &Matchmaking_Optional; return nullptr; }
    const FRHAPI_Matchmaking* GetMatchmakingOrNull() const { if (Matchmaking_IsSet) return &Matchmaking_Optional; return nullptr; }
    void SetMatchmaking(FRHAPI_Matchmaking NewValue) { Matchmaking_Optional = NewValue; Matchmaking_IsSet = true; }
    void ClearMatchmaking() { Matchmaking_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Browser Browser_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Browser_IsSet{ false };
    FRHAPI_Browser& GetBrowser() { return Browser_Optional; }
    const FRHAPI_Browser& GetBrowser() const { return Browser_Optional; }
    const FRHAPI_Browser& GetBrowser(const FRHAPI_Browser& DefaultValue) const { if (Browser_IsSet) return Browser_Optional; return DefaultValue; }
    bool GetBrowser(FRHAPI_Browser& OutValue) const { if (Browser_IsSet) OutValue = Browser_Optional; return Browser_IsSet; }
    FRHAPI_Browser* GetBrowserOrNull() { if (Browser_IsSet) return &Browser_Optional; return nullptr; }
    const FRHAPI_Browser* GetBrowserOrNull() const { if (Browser_IsSet) return &Browser_Optional; return nullptr; }
    void SetBrowser(FRHAPI_Browser NewValue) { Browser_Optional = NewValue; Browser_IsSet = true; }
    void ClearBrowser() { Browser_IsSet = false; }

    /* Is this session freely joinable by players without an invite? */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Joinable{ false };
    bool& GetJoinable() { return Joinable; }
    const bool& GetJoinable() const { return Joinable; }
    void SetJoinable(bool NewValue) { Joinable = NewValue;  }
    bool IsJoinableDefaultValue() const { return Joinable == false; }
    void SetJoinableToDefault() { Joinable = false;  }

    /* List of teams of players currently in the session */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FRHAPI_SessionTeam> Teams{  };
    TArray<FRHAPI_SessionTeam>& GetTeams() { return Teams; }
    const TArray<FRHAPI_SessionTeam>& GetTeams() const { return Teams; }
    void SetTeams(TArray<FRHAPI_SessionTeam> NewValue) { Teams = NewValue;  }

    /* Child Platform Sessions for this session.  A player joining one of the child platform sessions implicitly joins the parent session */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FRHAPI_PlatformSession> PlatformSession_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlatformSession_IsSet{ false };
    TArray<FRHAPI_PlatformSession>& GetPlatformSession() { return PlatformSession_Optional; }
    const TArray<FRHAPI_PlatformSession>& GetPlatformSession() const { return PlatformSession_Optional; }
    const TArray<FRHAPI_PlatformSession>& GetPlatformSession(const TArray<FRHAPI_PlatformSession>& DefaultValue) const { if (PlatformSession_IsSet) return PlatformSession_Optional; return DefaultValue; }
    bool GetPlatformSession(TArray<FRHAPI_PlatformSession>& OutValue) const { if (PlatformSession_IsSet) OutValue = PlatformSession_Optional; return PlatformSession_IsSet; }
    TArray<FRHAPI_PlatformSession>* GetPlatformSessionOrNull() { if (PlatformSession_IsSet) return &PlatformSession_Optional; return nullptr; }
    const TArray<FRHAPI_PlatformSession>* GetPlatformSessionOrNull() const { if (PlatformSession_IsSet) return &PlatformSession_Optional; return nullptr; }
    void SetPlatformSession(TArray<FRHAPI_PlatformSession> NewValue) { PlatformSession_Optional = NewValue; PlatformSession_IsSet = true; }
    void ClearPlatformSession() { PlatformSession_IsSet = false; }

    /* Leader Player or instance defined custom data about this session */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Created{  };
    FDateTime& GetCreated() { return Created; }
    const FDateTime& GetCreated() const { return Created; }
    void SetCreated(FDateTime NewValue) { Created = NewValue;  }

    /* Preferred site for the instance and match to take place in */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SiteId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SiteId_IsSet{ false };
    int32& GetSiteId() { return SiteId_Optional; }
    const int32& GetSiteId() const { return SiteId_Optional; }
    const int32& GetSiteId(const int32& DefaultValue) const { if (SiteId_IsSet) return SiteId_Optional; return DefaultValue; }
    bool GetSiteId(int32& OutValue) const { if (SiteId_IsSet) OutValue = SiteId_Optional; return SiteId_IsSet; }
    int32* GetSiteIdOrNull() { if (SiteId_IsSet) return &SiteId_Optional; return nullptr; }
    const int32* GetSiteIdOrNull() const { if (SiteId_IsSet) return &SiteId_Optional; return nullptr; }
    void SetSiteId(int32 NewValue) { SiteId_Optional = NewValue; SiteId_IsSet = true; }
    void ClearSiteId() { SiteId_Optional = 0; SiteId_IsSet = false; }
    bool IsSiteIdDefaultValue() const { return SiteId_IsSet && SiteId_Optional == 0; }
    void SetSiteIdToDefault() { SiteId_Optional = 0; SiteId_IsSet = true; }

    /* Flag of whether or not this session was created by matchmaking or not */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CreatedByMatchmaking_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CreatedByMatchmaking_IsSet{ false };
    bool& GetCreatedByMatchmaking() { return CreatedByMatchmaking_Optional; }
    const bool& GetCreatedByMatchmaking() const { return CreatedByMatchmaking_Optional; }
    const bool& GetCreatedByMatchmaking(const bool& DefaultValue) const { if (CreatedByMatchmaking_IsSet) return CreatedByMatchmaking_Optional; return DefaultValue; }
    bool GetCreatedByMatchmaking(bool& OutValue) const { if (CreatedByMatchmaking_IsSet) OutValue = CreatedByMatchmaking_Optional; return CreatedByMatchmaking_IsSet; }
    bool* GetCreatedByMatchmakingOrNull() { if (CreatedByMatchmaking_IsSet) return &CreatedByMatchmaking_Optional; return nullptr; }
    const bool* GetCreatedByMatchmakingOrNull() const { if (CreatedByMatchmaking_IsSet) return &CreatedByMatchmaking_Optional; return nullptr; }
    void SetCreatedByMatchmaking(bool NewValue) { CreatedByMatchmaking_Optional = NewValue; CreatedByMatchmaking_IsSet = true; }
    void ClearCreatedByMatchmaking() { CreatedByMatchmaking_Optional = false; CreatedByMatchmaking_IsSet = false; }
    bool IsCreatedByMatchmakingDefaultValue() const { return CreatedByMatchmaking_IsSet && CreatedByMatchmaking_Optional == false; }
    void SetCreatedByMatchmakingToDefault() { CreatedByMatchmaking_Optional = false; CreatedByMatchmaking_IsSet = true; }
};
