/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "QueueConfig.generated.h"

/*
* FRHAPI_QueueConfig
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_QueueConfig : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* ID to uniquely identify this queue */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString QueueId{  };
    FString& GetQueueId() { return QueueId; }
    const FString& GetQueueId() const { return QueueId; }
    void SetQueueId(FString NewValue) { QueueId = NewValue;  }

    /* Flag for whether or not the queue is active, and can be joined or sessions created from it */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active{ false };
    bool& GetActive() { return Active; }
    const bool& GetActive() const { return Active; }
    void SetActive(bool NewValue) { Active = NewValue;  }
    bool IsActiveDefaultValue() const { return Active == false; }
    void SetActiveToDefault() { Active = false;  }

    /* Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example) */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 RankingType{ 0 };
    int32& GetRankingType() { return RankingType; }
    const int32& GetRankingType() const { return RankingType; }
    void SetRankingType(int32 NewValue) { RankingType = NewValue;  }
    bool IsRankingTypeDefaultValue() const { return RankingType == 0; }
    void SetRankingTypeToDefault() { RankingType = 0;  }

    /* The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 NumSides{ 0 };
    int32& GetNumSides() { return NumSides; }
    const int32& GetNumSides() const { return NumSides; }
    void SetNumSides(int32 NewValue) { NumSides = NewValue;  }
    bool IsNumSidesDefaultValue() const { return NumSides == 0; }
    void SetNumSidesToDefault() { NumSides = 0;  }

    /* The maximum number of players that can be on each team */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 MaxPlayersPerSide{ 0 };
    int32& GetMaxPlayersPerSide() { return MaxPlayersPerSide; }
    const int32& GetMaxPlayersPerSide() const { return MaxPlayersPerSide; }
    void SetMaxPlayersPerSide(int32 NewValue) { MaxPlayersPerSide = NewValue;  }
    bool IsMaxPlayersPerSideDefaultValue() const { return MaxPlayersPerSide == 0; }
    void SetMaxPlayersPerSideToDefault() { MaxPlayersPerSide = 0;  }

    /* The minimum number of players that can be on each team */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 MinPlayersPerSide{ 0 };
    int32& GetMinPlayersPerSide() { return MinPlayersPerSide; }
    const int32& GetMinPlayersPerSide() const { return MinPlayersPerSide; }
    void SetMinPlayersPerSide(int32 NewValue) { MinPlayersPerSide = NewValue;  }
    bool IsMinPlayersPerSideDefaultValue() const { return MinPlayersPerSide == 0; }
    void SetMinPlayersPerSideToDefault() { MinPlayersPerSide = 0;  }

    /* The maximum size of a group that can join this queue */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 MaxQueueGroupSize{ 0 };
    int32& GetMaxQueueGroupSize() { return MaxQueueGroupSize; }
    const int32& GetMaxQueueGroupSize() const { return MaxQueueGroupSize; }
    void SetMaxQueueGroupSize(int32 NewValue) { MaxQueueGroupSize = NewValue;  }
    bool IsMaxQueueGroupSizeDefaultValue() const { return MaxQueueGroupSize == 0; }
    void SetMaxQueueGroupSizeToDefault() { MaxQueueGroupSize = 0;  }

    /* ID for which group of matchmaking templates/rules will be used when joining this queue */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid MatchMakingTemplateGroupId{  };
    FGuid& GetMatchMakingTemplateGroupId() { return MatchMakingTemplateGroupId; }
    const FGuid& GetMatchMakingTemplateGroupId() const { return MatchMakingTemplateGroupId; }
    void SetMatchMakingTemplateGroupId(FGuid NewValue) { MatchMakingTemplateGroupId = NewValue;  }
};
