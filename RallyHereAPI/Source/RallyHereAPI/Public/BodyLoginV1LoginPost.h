/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "GrantType.h"
#include "BodyLoginV1LoginPost.generated.h"

/*
* FRHAPI_BodyLoginV1LoginPost
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_BodyLoginV1LoginPost : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool IncludeRefresh_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool IncludeRefresh_IsSet{ false };
    bool& GetIncludeRefresh() { return IncludeRefresh_Optional; }
    const bool& GetIncludeRefresh() const { return IncludeRefresh_Optional; }
    const bool& GetIncludeRefresh(const bool& DefaultValue) const { if (IncludeRefresh_IsSet) return IncludeRefresh_Optional; return DefaultValue; }
    bool GetIncludeRefresh(bool& OutValue) const { if (IncludeRefresh_IsSet) OutValue = IncludeRefresh_Optional; return IncludeRefresh_IsSet; }
    bool* GetIncludeRefreshOrNull() { if (IncludeRefresh_IsSet) return &IncludeRefresh_Optional; return nullptr; }
    const bool* GetIncludeRefreshOrNull() const { if (IncludeRefresh_IsSet) return &IncludeRefresh_Optional; return nullptr; }
    void SetIncludeRefresh(bool NewValue) { IncludeRefresh_Optional = NewValue; IncludeRefresh_IsSet = true; }
    void ClearIncludeRefresh() { IncludeRefresh_Optional = false; IncludeRefresh_IsSet = false; }
    bool IsIncludeRefreshDefaultValue() const { return IncludeRefresh_IsSet && IncludeRefresh_Optional == false; }
    void SetIncludeRefreshToDefault() { IncludeRefresh_Optional = false; IncludeRefresh_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptEula_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptEula_IsSet{ false };
    bool& GetAcceptEula() { return AcceptEula_Optional; }
    const bool& GetAcceptEula() const { return AcceptEula_Optional; }
    const bool& GetAcceptEula(const bool& DefaultValue) const { if (AcceptEula_IsSet) return AcceptEula_Optional; return DefaultValue; }
    bool GetAcceptEula(bool& OutValue) const { if (AcceptEula_IsSet) OutValue = AcceptEula_Optional; return AcceptEula_IsSet; }
    bool* GetAcceptEulaOrNull() { if (AcceptEula_IsSet) return &AcceptEula_Optional; return nullptr; }
    const bool* GetAcceptEulaOrNull() const { if (AcceptEula_IsSet) return &AcceptEula_Optional; return nullptr; }
    void SetAcceptEula(bool NewValue) { AcceptEula_Optional = NewValue; AcceptEula_IsSet = true; }
    void ClearAcceptEula() { AcceptEula_Optional = false; AcceptEula_IsSet = false; }
    bool IsAcceptEulaDefaultValue() const { return AcceptEula_IsSet && AcceptEula_Optional == false; }
    void SetAcceptEulaToDefault() { AcceptEula_Optional = false; AcceptEula_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptTos_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptTos_IsSet{ false };
    bool& GetAcceptTos() { return AcceptTos_Optional; }
    const bool& GetAcceptTos() const { return AcceptTos_Optional; }
    const bool& GetAcceptTos(const bool& DefaultValue) const { if (AcceptTos_IsSet) return AcceptTos_Optional; return DefaultValue; }
    bool GetAcceptTos(bool& OutValue) const { if (AcceptTos_IsSet) OutValue = AcceptTos_Optional; return AcceptTos_IsSet; }
    bool* GetAcceptTosOrNull() { if (AcceptTos_IsSet) return &AcceptTos_Optional; return nullptr; }
    const bool* GetAcceptTosOrNull() const { if (AcceptTos_IsSet) return &AcceptTos_Optional; return nullptr; }
    void SetAcceptTos(bool NewValue) { AcceptTos_Optional = NewValue; AcceptTos_IsSet = true; }
    void ClearAcceptTos() { AcceptTos_Optional = false; AcceptTos_IsSet = false; }
    bool IsAcceptTosDefaultValue() const { return AcceptTos_IsSet && AcceptTos_Optional == false; }
    void SetAcceptTosToDefault() { AcceptTos_Optional = false; AcceptTos_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptPrivacyPolicy_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AcceptPrivacyPolicy_IsSet{ false };
    bool& GetAcceptPrivacyPolicy() { return AcceptPrivacyPolicy_Optional; }
    const bool& GetAcceptPrivacyPolicy() const { return AcceptPrivacyPolicy_Optional; }
    const bool& GetAcceptPrivacyPolicy(const bool& DefaultValue) const { if (AcceptPrivacyPolicy_IsSet) return AcceptPrivacyPolicy_Optional; return DefaultValue; }
    bool GetAcceptPrivacyPolicy(bool& OutValue) const { if (AcceptPrivacyPolicy_IsSet) OutValue = AcceptPrivacyPolicy_Optional; return AcceptPrivacyPolicy_IsSet; }
    bool* GetAcceptPrivacyPolicyOrNull() { if (AcceptPrivacyPolicy_IsSet) return &AcceptPrivacyPolicy_Optional; return nullptr; }
    const bool* GetAcceptPrivacyPolicyOrNull() const { if (AcceptPrivacyPolicy_IsSet) return &AcceptPrivacyPolicy_Optional; return nullptr; }
    void SetAcceptPrivacyPolicy(bool NewValue) { AcceptPrivacyPolicy_Optional = NewValue; AcceptPrivacyPolicy_IsSet = true; }
    void ClearAcceptPrivacyPolicy() { AcceptPrivacyPolicy_Optional = false; AcceptPrivacyPolicy_IsSet = false; }
    bool IsAcceptPrivacyPolicyDefaultValue() const { return AcceptPrivacyPolicy_IsSet && AcceptPrivacyPolicy_Optional == false; }
    void SetAcceptPrivacyPolicyToDefault() { AcceptPrivacyPolicy_Optional = false; AcceptPrivacyPolicy_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_GrantType GrantType{  };
    ERHAPI_GrantType& GetGrantType() { return GrantType; }
    const ERHAPI_GrantType& GetGrantType() const { return GrantType; }
    void SetGrantType(ERHAPI_GrantType NewValue) { GrantType = NewValue;  }

    /* token or secret used to authenticate the provided grant type */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PortalAccessToken{  };
    FString& GetPortalAccessToken() { return PortalAccessToken; }
    const FString& GetPortalAccessToken() const { return PortalAccessToken; }
    void SetPortalAccessToken(FString NewValue) { PortalAccessToken = NewValue;  }

    /* Some grant types support client-provided names */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PortalDisplayName_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalDisplayName_IsSet{ false };
    FString& GetPortalDisplayName() { return PortalDisplayName_Optional; }
    const FString& GetPortalDisplayName() const { return PortalDisplayName_Optional; }
    const FString& GetPortalDisplayName(const FString& DefaultValue) const { if (PortalDisplayName_IsSet) return PortalDisplayName_Optional; return DefaultValue; }
    bool GetPortalDisplayName(FString& OutValue) const { if (PortalDisplayName_IsSet) OutValue = PortalDisplayName_Optional; return PortalDisplayName_IsSet; }
    FString* GetPortalDisplayNameOrNull() { if (PortalDisplayName_IsSet) return &PortalDisplayName_Optional; return nullptr; }
    const FString* GetPortalDisplayNameOrNull() const { if (PortalDisplayName_IsSet) return &PortalDisplayName_Optional; return nullptr; }
    void SetPortalDisplayName(FString NewValue) { PortalDisplayName_Optional = NewValue; PortalDisplayName_IsSet = true; }
    void ClearPortalDisplayName() { PortalDisplayName_Optional = TEXT(""); PortalDisplayName_IsSet = false; }
    bool IsPortalDisplayNameDefaultValue() const { return PortalDisplayName_IsSet && PortalDisplayName_Optional == TEXT(""); }
    void SetPortalDisplayNameToDefault() { PortalDisplayName_Optional = TEXT(""); PortalDisplayName_IsSet = true; }

    /* Some grant types have 2 tier authentication and require a second token/secret */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PortalParentAccessToken_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalParentAccessToken_IsSet{ false };
    FString& GetPortalParentAccessToken() { return PortalParentAccessToken_Optional; }
    const FString& GetPortalParentAccessToken() const { return PortalParentAccessToken_Optional; }
    const FString& GetPortalParentAccessToken(const FString& DefaultValue) const { if (PortalParentAccessToken_IsSet) return PortalParentAccessToken_Optional; return DefaultValue; }
    bool GetPortalParentAccessToken(FString& OutValue) const { if (PortalParentAccessToken_IsSet) OutValue = PortalParentAccessToken_Optional; return PortalParentAccessToken_IsSet; }
    FString* GetPortalParentAccessTokenOrNull() { if (PortalParentAccessToken_IsSet) return &PortalParentAccessToken_Optional; return nullptr; }
    const FString* GetPortalParentAccessTokenOrNull() const { if (PortalParentAccessToken_IsSet) return &PortalParentAccessToken_Optional; return nullptr; }
    void SetPortalParentAccessToken(FString NewValue) { PortalParentAccessToken_Optional = NewValue; PortalParentAccessToken_IsSet = true; }
    void ClearPortalParentAccessToken() { PortalParentAccessToken_Optional = TEXT(""); PortalParentAccessToken_IsSet = false; }
    bool IsPortalParentAccessTokenDefaultValue() const { return PortalParentAccessToken_IsSet && PortalParentAccessToken_Optional == TEXT(""); }
    void SetPortalParentAccessTokenToDefault() { PortalParentAccessToken_Optional = TEXT(""); PortalParentAccessToken_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PortalParentDisplayName_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PortalParentDisplayName_IsSet{ false };
    FString& GetPortalParentDisplayName() { return PortalParentDisplayName_Optional; }
    const FString& GetPortalParentDisplayName() const { return PortalParentDisplayName_Optional; }
    const FString& GetPortalParentDisplayName(const FString& DefaultValue) const { if (PortalParentDisplayName_IsSet) return PortalParentDisplayName_Optional; return DefaultValue; }
    bool GetPortalParentDisplayName(FString& OutValue) const { if (PortalParentDisplayName_IsSet) OutValue = PortalParentDisplayName_Optional; return PortalParentDisplayName_IsSet; }
    FString* GetPortalParentDisplayNameOrNull() { if (PortalParentDisplayName_IsSet) return &PortalParentDisplayName_Optional; return nullptr; }
    const FString* GetPortalParentDisplayNameOrNull() const { if (PortalParentDisplayName_IsSet) return &PortalParentDisplayName_Optional; return nullptr; }
    void SetPortalParentDisplayName(FString NewValue) { PortalParentDisplayName_Optional = NewValue; PortalParentDisplayName_IsSet = true; }
    void ClearPortalParentDisplayName() { PortalParentDisplayName_Optional = TEXT(""); PortalParentDisplayName_IsSet = false; }
    bool IsPortalParentDisplayNameDefaultValue() const { return PortalParentDisplayName_IsSet && PortalParentDisplayName_Optional == TEXT(""); }
    void SetPortalParentDisplayNameToDefault() { PortalParentDisplayName_Optional = TEXT(""); PortalParentDisplayName_IsSet = true; }
};
