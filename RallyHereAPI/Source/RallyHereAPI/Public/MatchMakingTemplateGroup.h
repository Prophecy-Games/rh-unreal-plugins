/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Containers/Set.h"
#include "MatchMakingTemplate.h"
#include "MatchMakingTemplateGroup.generated.h"

/*
* FRHAPI_MatchMakingTemplateGroup
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchMakingTemplateGroup : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* ID for this set of potential matchmaking templates */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid TemplateGroupId{  };
    FGuid& GetTemplateGroupId() { return TemplateGroupId; }
    const FGuid& GetTemplateGroupId() const { return TemplateGroupId; }
    void SetTemplateGroupId(FGuid NewValue) { TemplateGroupId = NewValue;  }

    /* List of the different matchmaking templates that could be used. The config is chosen based on a set of rules in each MatchMakingTemplate object. If there are no rules, it's the default template */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FRHAPI_MatchMakingTemplate> TemplateOptions{  };
    TArray<FRHAPI_MatchMakingTemplate>& GetTemplateOptions() { return TemplateOptions; }
    const TArray<FRHAPI_MatchMakingTemplate>& GetTemplateOptions() const { return TemplateOptions; }
    void SetTemplateOptions(TArray<FRHAPI_MatchMakingTemplate> NewValue) { TemplateOptions = NewValue;  }

    /* Set of all the item ids that are required to validate every rule contained in this template group */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TSet<int32> RequiredItemIds_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RequiredItemIds_IsSet{ false };
    TSet<int32>& GetRequiredItemIds() { return RequiredItemIds_Optional; }
    const TSet<int32>& GetRequiredItemIds() const { return RequiredItemIds_Optional; }
    const TSet<int32>& GetRequiredItemIds(const TSet<int32>& DefaultValue) const { if (RequiredItemIds_IsSet) return RequiredItemIds_Optional; return DefaultValue; }
    bool GetRequiredItemIds(TSet<int32>& OutValue) const { if (RequiredItemIds_IsSet) OutValue = RequiredItemIds_Optional; return RequiredItemIds_IsSet; }
    TSet<int32>* GetRequiredItemIdsOrNull() { if (RequiredItemIds_IsSet) return &RequiredItemIds_Optional; return nullptr; }
    const TSet<int32>* GetRequiredItemIdsOrNull() const { if (RequiredItemIds_IsSet) return &RequiredItemIds_Optional; return nullptr; }
    void SetRequiredItemIds(TSet<int32> NewValue) { RequiredItemIds_Optional = NewValue; RequiredItemIds_IsSet = true; }
    void ClearRequiredItemIds() { RequiredItemIds_IsSet = false; }
};
