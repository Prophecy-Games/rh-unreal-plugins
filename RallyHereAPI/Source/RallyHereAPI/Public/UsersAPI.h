/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "Portal.h"
#include "BodyUpdatePersonV1PersonPersonIdInfoPost.h"
#include "HTTPAuthorizationCredentials.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "LookupResults.h"
#include "MessageOnly.h"
#include "PersonEmailListRequest.h"
#include "PersonEmailListResponse.h"
#include "PersonInfoResponse.h"
#include "PlayerIdWrapper.h"
#include "PlayerLinkedPortalsResponse.h"
#include "PlayerUuidFromId.h"
#include "PurgeRequest.h"
#include "PurgeResponse.h"
#include "SendInBlueContact.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_CreateUpdateContact;
struct FResponse_CreateUpdateContact;
struct FRequest_DequeueMeForPurge;
struct FResponse_DequeueMeForPurge;
struct FRequest_DequeuePersonForPurge;
struct FResponse_DequeuePersonForPurge;
struct FRequest_DisableCrossProgression;
struct FResponse_DisableCrossProgression;
struct FRequest_EnableCrossProgression;
struct FResponse_EnableCrossProgression;
struct FRequest_GetPerson;
struct FResponse_GetPerson;
struct FRequest_GetPersonEmailList;
struct FResponse_GetPersonEmailList;
struct FRequest_GetPlayerIdFromPlayerUuid;
struct FResponse_GetPlayerIdFromPlayerUuid;
struct FRequest_GetPlayerLinkedPortals;
struct FResponse_GetPlayerLinkedPortals;
struct FRequest_GetPlayerLinks;
struct FResponse_GetPlayerLinks;
struct FRequest_GetPlayerUuidFromPlayerId;
struct FResponse_GetPlayerUuidFromPlayerId;
struct FRequest_GetPlayerUuidFromPlayerIdV2;
struct FResponse_GetPlayerUuidFromPlayerIdV2;
struct FRequest_GetQueuePurgeStatusForMe;
struct FResponse_GetQueuePurgeStatusForMe;
struct FRequest_GetQueuePurgeStatusForPerson;
struct FResponse_GetQueuePurgeStatusForPerson;
struct FRequest_Link;
struct FResponse_Link;
struct FRequest_LookupPlayer;
struct FResponse_LookupPlayer;
struct FRequest_QueueMeForPurge;
struct FResponse_QueueMeForPurge;
struct FRequest_QueuePersonForPurge;
struct FResponse_QueuePersonForPurge;
struct FRequest_Unlink;
struct FResponse_Unlink;
struct FRequest_UpdatePerson;
struct FResponse_UpdatePerson;
struct FRequest_UpdatePersonEmailList;
struct FResponse_UpdatePersonEmailList;

DECLARE_DELEGATE_OneParam(FDelegate_CreateUpdateContact, const FResponse_CreateUpdateContact&);
DECLARE_DELEGATE_OneParam(FDelegate_DequeueMeForPurge, const FResponse_DequeueMeForPurge&);
DECLARE_DELEGATE_OneParam(FDelegate_DequeuePersonForPurge, const FResponse_DequeuePersonForPurge&);
DECLARE_DELEGATE_OneParam(FDelegate_DisableCrossProgression, const FResponse_DisableCrossProgression&);
DECLARE_DELEGATE_OneParam(FDelegate_EnableCrossProgression, const FResponse_EnableCrossProgression&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPerson, const FResponse_GetPerson&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPersonEmailList, const FResponse_GetPersonEmailList&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerIdFromPlayerUuid, const FResponse_GetPlayerIdFromPlayerUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerLinkedPortals, const FResponse_GetPlayerLinkedPortals&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerLinks, const FResponse_GetPlayerLinks&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidFromPlayerId, const FResponse_GetPlayerUuidFromPlayerId&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidFromPlayerIdV2, const FResponse_GetPlayerUuidFromPlayerIdV2&);
DECLARE_DELEGATE_OneParam(FDelegate_GetQueuePurgeStatusForMe, const FResponse_GetQueuePurgeStatusForMe&);
DECLARE_DELEGATE_OneParam(FDelegate_GetQueuePurgeStatusForPerson, const FResponse_GetQueuePurgeStatusForPerson&);
DECLARE_DELEGATE_OneParam(FDelegate_Link, const FResponse_Link&);
DECLARE_DELEGATE_OneParam(FDelegate_LookupPlayer, const FResponse_LookupPlayer&);
DECLARE_DELEGATE_OneParam(FDelegate_QueueMeForPurge, const FResponse_QueueMeForPurge&);
DECLARE_DELEGATE_OneParam(FDelegate_QueuePersonForPurge, const FResponse_QueuePersonForPurge&);
DECLARE_DELEGATE_OneParam(FDelegate_Unlink, const FResponse_Unlink&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePerson, const FResponse_UpdatePerson&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePersonEmailList, const FResponse_UpdatePersonEmailList&);

class RALLYHEREAPI_API FUsersAPI : public FAPI
{
public:
    FUsersAPI();
    virtual ~FUsersAPI();

    FHttpRequestPtr CreateUpdateContact(const FRequest_CreateUpdateContact& Request, const FDelegate_CreateUpdateContact& Delegate = FDelegate_CreateUpdateContact());
    FHttpRequestPtr DequeueMeForPurge(const FRequest_DequeueMeForPurge& Request, const FDelegate_DequeueMeForPurge& Delegate = FDelegate_DequeueMeForPurge());
    FHttpRequestPtr DequeuePersonForPurge(const FRequest_DequeuePersonForPurge& Request, const FDelegate_DequeuePersonForPurge& Delegate = FDelegate_DequeuePersonForPurge());
    FHttpRequestPtr DisableCrossProgression(const FRequest_DisableCrossProgression& Request, const FDelegate_DisableCrossProgression& Delegate = FDelegate_DisableCrossProgression());
    FHttpRequestPtr EnableCrossProgression(const FRequest_EnableCrossProgression& Request, const FDelegate_EnableCrossProgression& Delegate = FDelegate_EnableCrossProgression());
    FHttpRequestPtr GetPerson(const FRequest_GetPerson& Request, const FDelegate_GetPerson& Delegate = FDelegate_GetPerson());
    FHttpRequestPtr GetPersonEmailList(const FRequest_GetPersonEmailList& Request, const FDelegate_GetPersonEmailList& Delegate = FDelegate_GetPersonEmailList());
    FHttpRequestPtr GetPlayerIdFromPlayerUuid(const FRequest_GetPlayerIdFromPlayerUuid& Request, const FDelegate_GetPlayerIdFromPlayerUuid& Delegate = FDelegate_GetPlayerIdFromPlayerUuid());
    FHttpRequestPtr GetPlayerLinkedPortals(const FRequest_GetPlayerLinkedPortals& Request, const FDelegate_GetPlayerLinkedPortals& Delegate = FDelegate_GetPlayerLinkedPortals());
    FHttpRequestPtr GetPlayerLinks(const FRequest_GetPlayerLinks& Request, const FDelegate_GetPlayerLinks& Delegate = FDelegate_GetPlayerLinks());
    FHttpRequestPtr GetPlayerUuidFromPlayerId(const FRequest_GetPlayerUuidFromPlayerId& Request, const FDelegate_GetPlayerUuidFromPlayerId& Delegate = FDelegate_GetPlayerUuidFromPlayerId());
    FHttpRequestPtr GetPlayerUuidFromPlayerIdV2(const FRequest_GetPlayerUuidFromPlayerIdV2& Request, const FDelegate_GetPlayerUuidFromPlayerIdV2& Delegate = FDelegate_GetPlayerUuidFromPlayerIdV2());
    FHttpRequestPtr GetQueuePurgeStatusForMe(const FRequest_GetQueuePurgeStatusForMe& Request, const FDelegate_GetQueuePurgeStatusForMe& Delegate = FDelegate_GetQueuePurgeStatusForMe());
    FHttpRequestPtr GetQueuePurgeStatusForPerson(const FRequest_GetQueuePurgeStatusForPerson& Request, const FDelegate_GetQueuePurgeStatusForPerson& Delegate = FDelegate_GetQueuePurgeStatusForPerson());
    FHttpRequestPtr Link(const FRequest_Link& Request, const FDelegate_Link& Delegate = FDelegate_Link());
    FHttpRequestPtr LookupPlayer(const FRequest_LookupPlayer& Request, const FDelegate_LookupPlayer& Delegate = FDelegate_LookupPlayer());
    FHttpRequestPtr QueueMeForPurge(const FRequest_QueueMeForPurge& Request, const FDelegate_QueueMeForPurge& Delegate = FDelegate_QueueMeForPurge());
    FHttpRequestPtr QueuePersonForPurge(const FRequest_QueuePersonForPurge& Request, const FDelegate_QueuePersonForPurge& Delegate = FDelegate_QueuePersonForPurge());
    FHttpRequestPtr Unlink(const FRequest_Unlink& Request, const FDelegate_Unlink& Delegate = FDelegate_Unlink());
    FHttpRequestPtr UpdatePerson(const FRequest_UpdatePerson& Request, const FDelegate_UpdatePerson& Delegate = FDelegate_UpdatePerson());
    FHttpRequestPtr UpdatePersonEmailList(const FRequest_UpdatePersonEmailList& Request, const FDelegate_UpdatePersonEmailList& Delegate = FDelegate_UpdatePersonEmailList());

private:
    void OnCreateUpdateContactResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateUpdateContact Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnDequeueMeForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DequeueMeForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnDequeuePersonForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DequeuePersonForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnDisableCrossProgressionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DisableCrossProgression Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnEnableCrossProgressionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EnableCrossProgression Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPersonResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPerson Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPersonEmailListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPersonEmailList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerIdFromPlayerUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerIdFromPlayerUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerLinkedPortalsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerLinkedPortals Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerLinksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerLinks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerUuidFromPlayerIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidFromPlayerId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetPlayerUuidFromPlayerIdV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidFromPlayerIdV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetQueuePurgeStatusForMeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetQueuePurgeStatusForMe Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnGetQueuePurgeStatusForPersonResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetQueuePurgeStatusForPerson Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnLinkResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Link Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnLookupPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LookupPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnQueueMeForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_QueueMeForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnQueuePersonForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_QueuePersonForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUnlinkResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Unlink Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdatePersonResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePerson Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);
    void OnUpdatePersonEmailListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePersonEmailList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry);

};

/* Create Update Contact

*/
struct RALLYHEREAPI_API FRequest_CreateUpdateContact : public FRequest
{
    FRequest_CreateUpdateContact();
    virtual ~FRequest_CreateUpdateContact() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_SendInBlueContact SendInBlueContact;
};

struct RALLYHEREAPI_API FResponse_CreateUpdateContact : public FResponse
{
    FResponse_CreateUpdateContact(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateUpdateContact() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_CreateUpdateContact
{
    typedef FRequest_CreateUpdateContact Request;
    typedef FResponse_CreateUpdateContact Response;
    typedef FDelegate_CreateUpdateContact Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.CreateUpdateContact(InRequest, InDelegate); }
};

/* Dequeue Me For Purge

*/
struct RALLYHEREAPI_API FRequest_DequeueMeForPurge : public FRequest
{
    FRequest_DequeueMeForPurge();
    virtual ~FRequest_DequeueMeForPurge() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_DequeueMeForPurge : public FResponse
{
    FResponse_DequeueMeForPurge(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DequeueMeForPurge() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_DequeueMeForPurge
{
    typedef FRequest_DequeueMeForPurge Request;
    typedef FResponse_DequeueMeForPurge Response;
    typedef FDelegate_DequeueMeForPurge Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.DequeueMeForPurge(InRequest, InDelegate); }
};

/* Dequeue Person For Purge

*/
struct RALLYHEREAPI_API FRequest_DequeuePersonForPurge : public FRequest
{
    FRequest_DequeuePersonForPurge();
    virtual ~FRequest_DequeuePersonForPurge() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
};

struct RALLYHEREAPI_API FResponse_DequeuePersonForPurge : public FResponse
{
    FResponse_DequeuePersonForPurge(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DequeuePersonForPurge() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_DequeuePersonForPurge
{
    typedef FRequest_DequeuePersonForPurge Request;
    typedef FResponse_DequeuePersonForPurge Response;
    typedef FDelegate_DequeuePersonForPurge Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.DequeuePersonForPurge(InRequest, InDelegate); }
};

/* Disable Cross Progression

*/
struct RALLYHEREAPI_API FRequest_DisableCrossProgression : public FRequest
{
    FRequest_DisableCrossProgression();
    virtual ~FRequest_DisableCrossProgression() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_DisableCrossProgression : public FResponse
{
    FResponse_DisableCrossProgression(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DisableCrossProgression() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_DisableCrossProgression
{
    typedef FRequest_DisableCrossProgression Request;
    typedef FResponse_DisableCrossProgression Response;
    typedef FDelegate_DisableCrossProgression Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.DisableCrossProgression(InRequest, InDelegate); }
};

/* Enable Cross Progression

*/
struct RALLYHEREAPI_API FRequest_EnableCrossProgression : public FRequest
{
    FRequest_EnableCrossProgression();
    virtual ~FRequest_EnableCrossProgression() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_EnableCrossProgression : public FResponse
{
    FResponse_EnableCrossProgression(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_EnableCrossProgression() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_EnableCrossProgression
{
    typedef FRequest_EnableCrossProgression Request;
    typedef FResponse_EnableCrossProgression Response;
    typedef FDelegate_EnableCrossProgression Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.EnableCrossProgression(InRequest, InDelegate); }
};

/* Get Person

*/
struct RALLYHEREAPI_API FRequest_GetPerson : public FRequest
{
    FRequest_GetPerson();
    virtual ~FRequest_GetPerson() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
};

struct RALLYHEREAPI_API FResponse_GetPerson : public FResponse
{
    FResponse_GetPerson(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPerson() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PersonInfoResponse Content;

};

struct RALLYHEREAPI_API Traits_GetPerson
{
    typedef FRequest_GetPerson Request;
    typedef FResponse_GetPerson Response;
    typedef FDelegate_GetPerson Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPerson(InRequest, InDelegate); }
};

/* Get Person Email List

*/
struct RALLYHEREAPI_API FRequest_GetPersonEmailList : public FRequest
{
    FRequest_GetPersonEmailList();
    virtual ~FRequest_GetPersonEmailList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
};

struct RALLYHEREAPI_API FResponse_GetPersonEmailList : public FResponse
{
    FResponse_GetPersonEmailList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPersonEmailList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PersonEmailListResponse Content;

};

struct RALLYHEREAPI_API Traits_GetPersonEmailList
{
    typedef FRequest_GetPersonEmailList Request;
    typedef FResponse_GetPersonEmailList Response;
    typedef FDelegate_GetPersonEmailList Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPersonEmailList(InRequest, InDelegate); }
};

/* Get Player Id From Player Uuid
 *
 * Get a player&#39;s id from their uuid.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerIdFromPlayerUuid : public FRequest
{
    FRequest_GetPlayerIdFromPlayerUuid();
    virtual ~FRequest_GetPlayerIdFromPlayerUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetPlayerIdFromPlayerUuid : public FResponse
{
    FResponse_GetPlayerIdFromPlayerUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerIdFromPlayerUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerIdWrapper Content;

};

struct RALLYHEREAPI_API Traits_GetPlayerIdFromPlayerUuid
{
    typedef FRequest_GetPlayerIdFromPlayerUuid Request;
    typedef FResponse_GetPlayerIdFromPlayerUuid Response;
    typedef FDelegate_GetPlayerIdFromPlayerUuid Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerIdFromPlayerUuid(InRequest, InDelegate); }
};

/* Get Player Linked Portals

*/
struct RALLYHEREAPI_API FRequest_GetPlayerLinkedPortals : public FRequest
{
    FRequest_GetPlayerLinkedPortals();
    virtual ~FRequest_GetPlayerLinkedPortals() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerLinkedPortals : public FResponse
{
    FResponse_GetPlayerLinkedPortals(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerLinkedPortals() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerLinkedPortalsResponse Content;

};

struct RALLYHEREAPI_API Traits_GetPlayerLinkedPortals
{
    typedef FRequest_GetPlayerLinkedPortals Request;
    typedef FResponse_GetPlayerLinkedPortals Response;
    typedef FDelegate_GetPlayerLinkedPortals Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerLinkedPortals(InRequest, InDelegate); }
};

/* Get Player Links

*/
struct RALLYHEREAPI_API FRequest_GetPlayerLinks : public FRequest
{
    FRequest_GetPlayerLinks();
    virtual ~FRequest_GetPlayerLinks() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetPlayerLinks : public FResponse
{
    FResponse_GetPlayerLinks(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerLinks() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerLinkedPortalsResponse Content;

};

struct RALLYHEREAPI_API Traits_GetPlayerLinks
{
    typedef FRequest_GetPlayerLinks Request;
    typedef FResponse_GetPlayerLinks Response;
    typedef FDelegate_GetPlayerLinks Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerLinks(InRequest, InDelegate); }
};

/* Get Player Uuid From Player Id
 *
 * Get a player&#39;s uuid from their id.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidFromPlayerId : public FRequest
{
    FRequest_GetPlayerUuidFromPlayerId();
    virtual ~FRequest_GetPlayerUuidFromPlayerId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerUuidFromPlayerId : public FResponse
{
    FResponse_GetPlayerUuidFromPlayerId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerUuidFromPlayerId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FGuid Content;

};

struct RALLYHEREAPI_API Traits_GetPlayerUuidFromPlayerId
{
    typedef FRequest_GetPlayerUuidFromPlayerId Request;
    typedef FResponse_GetPlayerUuidFromPlayerId Response;
    typedef FDelegate_GetPlayerUuidFromPlayerId Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerUuidFromPlayerId(InRequest, InDelegate); }
};

/* Get Player Uuid From Player Id V2
 *
 * Get a player&#39;s uuid from their id.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidFromPlayerIdV2 : public FRequest
{
    FRequest_GetPlayerUuidFromPlayerIdV2();
    virtual ~FRequest_GetPlayerUuidFromPlayerIdV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerUuidFromPlayerIdV2 : public FResponse
{
    FResponse_GetPlayerUuidFromPlayerIdV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerUuidFromPlayerIdV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerUuidFromId Content;

};

struct RALLYHEREAPI_API Traits_GetPlayerUuidFromPlayerIdV2
{
    typedef FRequest_GetPlayerUuidFromPlayerIdV2 Request;
    typedef FResponse_GetPlayerUuidFromPlayerIdV2 Response;
    typedef FDelegate_GetPlayerUuidFromPlayerIdV2 Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetPlayerUuidFromPlayerIdV2(InRequest, InDelegate); }
};

/* Get Queue Purge Status For Me

*/
struct RALLYHEREAPI_API FRequest_GetQueuePurgeStatusForMe : public FRequest
{
    FRequest_GetQueuePurgeStatusForMe();
    virtual ~FRequest_GetQueuePurgeStatusForMe() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetQueuePurgeStatusForMe : public FResponse
{
    FResponse_GetQueuePurgeStatusForMe(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetQueuePurgeStatusForMe() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PurgeResponse Content;

};

struct RALLYHEREAPI_API Traits_GetQueuePurgeStatusForMe
{
    typedef FRequest_GetQueuePurgeStatusForMe Request;
    typedef FResponse_GetQueuePurgeStatusForMe Response;
    typedef FDelegate_GetQueuePurgeStatusForMe Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetQueuePurgeStatusForMe(InRequest, InDelegate); }
};

/* Get Queue Purge Status For Person

*/
struct RALLYHEREAPI_API FRequest_GetQueuePurgeStatusForPerson : public FRequest
{
    FRequest_GetQueuePurgeStatusForPerson();
    virtual ~FRequest_GetQueuePurgeStatusForPerson() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
};

struct RALLYHEREAPI_API FResponse_GetQueuePurgeStatusForPerson : public FResponse
{
    FResponse_GetQueuePurgeStatusForPerson(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetQueuePurgeStatusForPerson() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PurgeResponse Content;

};

struct RALLYHEREAPI_API Traits_GetQueuePurgeStatusForPerson
{
    typedef FRequest_GetQueuePurgeStatusForPerson Request;
    typedef FResponse_GetQueuePurgeStatusForPerson Response;
    typedef FDelegate_GetQueuePurgeStatusForPerson Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.GetQueuePurgeStatusForPerson(InRequest, InDelegate); }
};

/* Link

*/
struct RALLYHEREAPI_API FRequest_Link : public FRequest
{
    FRequest_Link();
    virtual ~FRequest_Link() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_HTTPAuthorizationCredentials HTTPAuthorizationCredentials;
};

struct RALLYHEREAPI_API FResponse_Link : public FResponse
{
    FResponse_Link(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_Link() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_Link
{
    typedef FRequest_Link Request;
    typedef FResponse_Link Response;
    typedef FDelegate_Link Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.Link(InRequest, InDelegate); }
};

/* Lookup Player
 *
 * Lookup players by various parameters.  Note that this does NOT find the active player, or other metadata about the resulting players.  It is suggested to call &#x60;/v1/player/{player_id}/linked_portals&#x60; for each player for that info, if necessary.
*/
struct RALLYHEREAPI_API FRequest_LookupPlayer : public FRequest
{
    FRequest_LookupPlayer();
    virtual ~FRequest_LookupPlayer() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Lookup players by display names */
    TOptional<TArray<FString>> DisplayName;
    /* Lookup players by their portal identity for this platform */
    TOptional<ERHAPI_Portal> IdentityPlatform;
    /* Lookup players by their Portal Identity */
    TOptional<TArray<FString>> Identities;
};

struct RALLYHEREAPI_API FResponse_LookupPlayer : public FResponse
{
    FResponse_LookupPlayer(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LookupPlayer() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_LookupResults Content;

};

struct RALLYHEREAPI_API Traits_LookupPlayer
{
    typedef FRequest_LookupPlayer Request;
    typedef FResponse_LookupPlayer Response;
    typedef FDelegate_LookupPlayer Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.LookupPlayer(InRequest, InDelegate); }
};

/* Queue Me For Purge

*/
struct RALLYHEREAPI_API FRequest_QueueMeForPurge : public FRequest
{
    FRequest_QueueMeForPurge();
    virtual ~FRequest_QueueMeForPurge() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_PurgeRequest PurgeRequest;
};

struct RALLYHEREAPI_API FResponse_QueueMeForPurge : public FResponse
{
    FResponse_QueueMeForPurge(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_QueueMeForPurge() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PurgeResponse Content;

};

struct RALLYHEREAPI_API Traits_QueueMeForPurge
{
    typedef FRequest_QueueMeForPurge Request;
    typedef FResponse_QueueMeForPurge Response;
    typedef FDelegate_QueueMeForPurge Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.QueueMeForPurge(InRequest, InDelegate); }
};

/* Queue Person For Purge

*/
struct RALLYHEREAPI_API FRequest_QueuePersonForPurge : public FRequest
{
    FRequest_QueuePersonForPurge();
    virtual ~FRequest_QueuePersonForPurge() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
    FRHAPI_PurgeRequest PurgeRequest;
};

struct RALLYHEREAPI_API FResponse_QueuePersonForPurge : public FResponse
{
    FResponse_QueuePersonForPurge(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_QueuePersonForPurge() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PurgeResponse Content;

};

struct RALLYHEREAPI_API Traits_QueuePersonForPurge
{
    typedef FRequest_QueuePersonForPurge Request;
    typedef FResponse_QueuePersonForPurge Response;
    typedef FDelegate_QueuePersonForPurge Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.QueuePersonForPurge(InRequest, InDelegate); }
};

/* Unlink

*/
struct RALLYHEREAPI_API FRequest_Unlink : public FRequest
{
    FRequest_Unlink();
    virtual ~FRequest_Unlink() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_Unlink : public FResponse
{
    FResponse_Unlink(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_Unlink() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_Unlink
{
    typedef FRequest_Unlink Request;
    typedef FResponse_Unlink Response;
    typedef FDelegate_Unlink Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.Unlink(InRequest, InDelegate); }
};

/* Update Person

*/
struct RALLYHEREAPI_API FRequest_UpdatePerson : public FRequest
{
    FRequest_UpdatePerson();
    virtual ~FRequest_UpdatePerson() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
    FRHAPI_BodyUpdatePersonV1PersonPersonIdInfoPost BodyUpdatePersonV1PersonPersonIdInfoPost;
};

struct RALLYHEREAPI_API FResponse_UpdatePerson : public FResponse
{
    FResponse_UpdatePerson(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePerson() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_UpdatePerson
{
    typedef FRequest_UpdatePerson Request;
    typedef FResponse_UpdatePerson Response;
    typedef FDelegate_UpdatePerson Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdatePerson(InRequest, InDelegate); }
};

/* Update Person Email List

*/
struct RALLYHEREAPI_API FRequest_UpdatePersonEmailList : public FRequest
{
    FRequest_UpdatePersonEmailList();
    virtual ~FRequest_UpdatePersonEmailList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FString GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PersonId;
    FRHAPI_PersonEmailListRequest PersonEmailListRequest;
};

struct RALLYHEREAPI_API FResponse_UpdatePersonEmailList : public FResponse
{
    FResponse_UpdatePersonEmailList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePersonEmailList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_UpdatePersonEmailList
{
    typedef FRequest_UpdatePersonEmailList Request;
    typedef FResponse_UpdatePersonEmailList Response;
    typedef FDelegate_UpdatePersonEmailList Delegate;
    typedef FUsersAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate()) { return InAPI.UpdatePersonEmailList(InRequest, InDelegate); }
};


}
