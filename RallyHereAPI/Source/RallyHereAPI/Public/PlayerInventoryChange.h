/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryRecord.h"
#include "PlayerInventoryChange.generated.h"

/*
* FRHAPI_PlayerInventoryChange
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerInventoryChange : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 BeforeItemId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool BeforeItemId_IsSet{ false };
    int32& GetBeforeItemId() { return BeforeItemId_Optional; }
    const int32& GetBeforeItemId() const { return BeforeItemId_Optional; }
    const int32& GetBeforeItemId(const int32& DefaultValue) const { if (BeforeItemId_IsSet) return BeforeItemId_Optional; return DefaultValue; }
    bool GetBeforeItemId(int32& OutValue) const { if (BeforeItemId_IsSet) OutValue = BeforeItemId_Optional; return BeforeItemId_IsSet; }
    int32* GetBeforeItemIdOrNull() { if (BeforeItemId_IsSet) return &BeforeItemId_Optional; return nullptr; }
    const int32* GetBeforeItemIdOrNull() const { if (BeforeItemId_IsSet) return &BeforeItemId_Optional; return nullptr; }
    void SetBeforeItemId(int32 NewValue) { BeforeItemId_Optional = NewValue; BeforeItemId_IsSet = true; }
    void ClearBeforeItemId() { BeforeItemId_Optional = 0; BeforeItemId_IsSet = false; }
    bool IsBeforeItemIdDefaultValue() const { return BeforeItemId_IsSet && BeforeItemId_Optional == 0; }
    void SetBeforeItemIdToDefault() { BeforeItemId_Optional = 0; BeforeItemId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 AfterItemId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AfterItemId_IsSet{ false };
    int32& GetAfterItemId() { return AfterItemId_Optional; }
    const int32& GetAfterItemId() const { return AfterItemId_Optional; }
    const int32& GetAfterItemId(const int32& DefaultValue) const { if (AfterItemId_IsSet) return AfterItemId_Optional; return DefaultValue; }
    bool GetAfterItemId(int32& OutValue) const { if (AfterItemId_IsSet) OutValue = AfterItemId_Optional; return AfterItemId_IsSet; }
    int32* GetAfterItemIdOrNull() { if (AfterItemId_IsSet) return &AfterItemId_Optional; return nullptr; }
    const int32* GetAfterItemIdOrNull() const { if (AfterItemId_IsSet) return &AfterItemId_Optional; return nullptr; }
    void SetAfterItemId(int32 NewValue) { AfterItemId_Optional = NewValue; AfterItemId_IsSet = true; }
    void ClearAfterItemId() { AfterItemId_Optional = 0; AfterItemId_IsSet = false; }
    bool IsAfterItemIdDefaultValue() const { return AfterItemId_IsSet && AfterItemId_Optional == 0; }
    void SetAfterItemIdToDefault() { AfterItemId_Optional = 0; AfterItemId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_InventoryRecord Before_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Before_IsSet{ false };
    FRHAPI_InventoryRecord& GetBefore() { return Before_Optional; }
    const FRHAPI_InventoryRecord& GetBefore() const { return Before_Optional; }
    const FRHAPI_InventoryRecord& GetBefore(const FRHAPI_InventoryRecord& DefaultValue) const { if (Before_IsSet) return Before_Optional; return DefaultValue; }
    bool GetBefore(FRHAPI_InventoryRecord& OutValue) const { if (Before_IsSet) OutValue = Before_Optional; return Before_IsSet; }
    FRHAPI_InventoryRecord* GetBeforeOrNull() { if (Before_IsSet) return &Before_Optional; return nullptr; }
    const FRHAPI_InventoryRecord* GetBeforeOrNull() const { if (Before_IsSet) return &Before_Optional; return nullptr; }
    void SetBefore(FRHAPI_InventoryRecord NewValue) { Before_Optional = NewValue; Before_IsSet = true; }
    void ClearBefore() { Before_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_InventoryRecord After_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool After_IsSet{ false };
    FRHAPI_InventoryRecord& GetAfter() { return After_Optional; }
    const FRHAPI_InventoryRecord& GetAfter() const { return After_Optional; }
    const FRHAPI_InventoryRecord& GetAfter(const FRHAPI_InventoryRecord& DefaultValue) const { if (After_IsSet) return After_Optional; return DefaultValue; }
    bool GetAfter(FRHAPI_InventoryRecord& OutValue) const { if (After_IsSet) OutValue = After_Optional; return After_IsSet; }
    FRHAPI_InventoryRecord* GetAfterOrNull() { if (After_IsSet) return &After_Optional; return nullptr; }
    const FRHAPI_InventoryRecord* GetAfterOrNull() const { if (After_IsSet) return &After_Optional; return nullptr; }
    void SetAfter(FRHAPI_InventoryRecord NewValue) { After_Optional = NewValue; After_IsSet = true; }
    void ClearAfter() { After_IsSet = false; }
};
