/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SessionTeam.h"
#include "MatchMakingSessionRequest.generated.h"

/*
* FRHAPI_MatchMakingSessionRequest
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchMakingSessionRequest : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* List of teams that are to be invited to session */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FRHAPI_SessionTeam> Teams{  };
    TArray<FRHAPI_SessionTeam>& GetTeams() { return Teams; }
    const TArray<FRHAPI_SessionTeam>& GetTeams() const { return Teams; }
    void SetTeams(TArray<FRHAPI_SessionTeam> NewValue) { Teams = NewValue;  }

    /* List of sessions and tickets the match was made with. Used to verify this match should still be created */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> SessionTickets{  };
    TMap<FString, FString>& GetSessionTickets() { return SessionTickets; }
    const TMap<FString, FString>& GetSessionTickets() const { return SessionTickets; }
    void SetSessionTickets(TMap<FString, FString> NewValue) { SessionTickets = NewValue;  }

    /* Which launch template should be used to request an instance */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid InstanceLaunchTemplateId{  };
    FGuid& GetInstanceLaunchTemplateId() { return InstanceLaunchTemplateId; }
    const FGuid& GetInstanceLaunchTemplateId() const { return InstanceLaunchTemplateId; }
    void SetInstanceLaunchTemplateId(FGuid NewValue) { InstanceLaunchTemplateId = NewValue;  }

    /* Site to start the instance in */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SiteId{ 0 };
    int32& GetSiteId() { return SiteId; }
    const int32& GetSiteId() const { return SiteId; }
    void SetSiteId(int32 NewValue) { SiteId = NewValue;  }
    bool IsSiteIdDefaultValue() const { return SiteId == 0; }
    void SetSiteIdToDefault() { SiteId = 0;  }

    /* Unique ID for this generated match */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString MatchId{  };
    FString& GetMatchId() { return MatchId; }
    const FString& GetMatchId() const { return MatchId; }
    void SetMatchId(FString NewValue) { MatchId = NewValue;  }

    /* Custom data about the match */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }
};
