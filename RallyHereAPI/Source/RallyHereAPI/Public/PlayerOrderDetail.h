/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerInventoryChange.h"
#include "PlayerOrderCreate.h"
#include "PlayerOrderDetailType.h"
#include "PlayerOrderDetail.generated.h"

/*
* FRHAPI_PlayerOrderDetail
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerOrderDetail : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_PlayerOrderDetailType Type{  };
    ERHAPI_PlayerOrderDetailType& GetType() { return Type; }
    const ERHAPI_PlayerOrderDetailType& GetType() const { return Type; }
    void SetType(ERHAPI_PlayerOrderDetailType NewValue) { Type = NewValue;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 LootId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool LootId_IsSet{ false };
    int32& GetLootId() { return LootId_Optional; }
    const int32& GetLootId() const { return LootId_Optional; }
    const int32& GetLootId(const int32& DefaultValue) const { if (LootId_IsSet) return LootId_Optional; return DefaultValue; }
    bool GetLootId(int32& OutValue) const { if (LootId_IsSet) OutValue = LootId_Optional; return LootId_IsSet; }
    int32* GetLootIdOrNull() { if (LootId_IsSet) return &LootId_Optional; return nullptr; }
    const int32* GetLootIdOrNull() const { if (LootId_IsSet) return &LootId_Optional; return nullptr; }
    void SetLootId(int32 NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; }
    void ClearLootId() { LootId_Optional = 0; LootId_IsSet = false; }
    bool IsLootIdDefaultValue() const { return LootId_IsSet && LootId_Optional == 0; }
    void SetLootIdToDefault() { LootId_Optional = 0; LootId_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_PlayerInventoryChange InvChange_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InvChange_IsSet{ false };
    FRHAPI_PlayerInventoryChange& GetInvChange() { return InvChange_Optional; }
    const FRHAPI_PlayerInventoryChange& GetInvChange() const { return InvChange_Optional; }
    const FRHAPI_PlayerInventoryChange& GetInvChange(const FRHAPI_PlayerInventoryChange& DefaultValue) const { if (InvChange_IsSet) return InvChange_Optional; return DefaultValue; }
    bool GetInvChange(FRHAPI_PlayerInventoryChange& OutValue) const { if (InvChange_IsSet) OutValue = InvChange_Optional; return InvChange_IsSet; }
    FRHAPI_PlayerInventoryChange* GetInvChangeOrNull() { if (InvChange_IsSet) return &InvChange_Optional; return nullptr; }
    const FRHAPI_PlayerInventoryChange* GetInvChangeOrNull() const { if (InvChange_IsSet) return &InvChange_Optional; return nullptr; }
    void SetInvChange(FRHAPI_PlayerInventoryChange NewValue) { InvChange_Optional = NewValue; InvChange_IsSet = true; }
    void ClearInvChange() { InvChange_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_PlayerOrderCreate Order_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Order_IsSet{ false };
    FRHAPI_PlayerOrderCreate& GetOrder() { return Order_Optional; }
    const FRHAPI_PlayerOrderCreate& GetOrder() const { return Order_Optional; }
    const FRHAPI_PlayerOrderCreate& GetOrder(const FRHAPI_PlayerOrderCreate& DefaultValue) const { if (Order_IsSet) return Order_Optional; return DefaultValue; }
    bool GetOrder(FRHAPI_PlayerOrderCreate& OutValue) const { if (Order_IsSet) OutValue = Order_Optional; return Order_IsSet; }
    FRHAPI_PlayerOrderCreate* GetOrderOrNull() { if (Order_IsSet) return &Order_Optional; return nullptr; }
    const FRHAPI_PlayerOrderCreate* GetOrderOrNull() const { if (Order_IsSet) return &Order_Optional; return nullptr; }
    void SetOrder(FRHAPI_PlayerOrderCreate NewValue) { Order_Optional = NewValue; Order_IsSet = true; }
    void ClearOrder() { Order_IsSet = false; }
};
