/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "InventoryBucketUseRuleSet.h"
#include "InventoryBucketUseRuleSets.generated.h"

/*
* FRHAPI_InventoryBucketUseRuleSets
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InventoryBucketUseRuleSets : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FRHAPI_InventoryBucketUseRuleSet> RuleSets_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RuleSets_IsSet{ false };
    TMap<FString, FRHAPI_InventoryBucketUseRuleSet>& GetRuleSets() { return RuleSets_Optional; }
    const TMap<FString, FRHAPI_InventoryBucketUseRuleSet>& GetRuleSets() const { return RuleSets_Optional; }
    const TMap<FString, FRHAPI_InventoryBucketUseRuleSet>& GetRuleSets(const TMap<FString, FRHAPI_InventoryBucketUseRuleSet>& DefaultValue) const { if (RuleSets_IsSet) return RuleSets_Optional; return DefaultValue; }
    bool GetRuleSets(TMap<FString, FRHAPI_InventoryBucketUseRuleSet>& OutValue) const { if (RuleSets_IsSet) OutValue = RuleSets_Optional; return RuleSets_IsSet; }
    TMap<FString, FRHAPI_InventoryBucketUseRuleSet>* GetRuleSetsOrNull() { if (RuleSets_IsSet) return &RuleSets_Optional; return nullptr; }
    const TMap<FString, FRHAPI_InventoryBucketUseRuleSet>* GetRuleSetsOrNull() const { if (RuleSets_IsSet) return &RuleSets_Optional; return nullptr; }
    void SetRuleSets(TMap<FString, FRHAPI_InventoryBucketUseRuleSet> NewValue) { RuleSets_Optional = NewValue; RuleSets_IsSet = true; }
    void ClearRuleSets() { RuleSets_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
    void ClearCacheInfo() { CacheInfo_IsSet = false; }
};
