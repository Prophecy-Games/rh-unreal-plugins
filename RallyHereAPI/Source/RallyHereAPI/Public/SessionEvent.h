/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlatformID.h"
#include "SessionEvent.generated.h"

/*
* FRHAPI_SessionEvent
*
* 
*/
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionEvent : public FRHAPI_Model
{
    GENERATED_BODY()

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /* Code that identifies this type of event.  See CommonEventCode for common examples. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString EventCode{  };
    FString& GetEventCode() { return EventCode; }
    const FString& GetEventCode() const { return EventCode; }
    void SetEventCode(FString NewValue) { EventCode = NewValue;  }

    /* Description metadata about the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Description_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Description_IsSet{ false };
    FString& GetDescription() { return Description_Optional; }
    const FString& GetDescription() const { return Description_Optional; }
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
    void ClearDescription() { Description_Optional = TEXT(""); Description_IsSet = false; }
    bool IsDescriptionDefaultValue() const { return Description_IsSet && Description_Optional == TEXT(""); }
    void SetDescriptionToDefault() { Description_Optional = TEXT(""); Description_IsSet = true; }

    /* Player who triggered the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SourcePlayerId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SourcePlayerId_IsSet{ false };
    int32& GetSourcePlayerId() { return SourcePlayerId_Optional; }
    const int32& GetSourcePlayerId() const { return SourcePlayerId_Optional; }
    const int32& GetSourcePlayerId(const int32& DefaultValue) const { if (SourcePlayerId_IsSet) return SourcePlayerId_Optional; return DefaultValue; }
    bool GetSourcePlayerId(int32& OutValue) const { if (SourcePlayerId_IsSet) OutValue = SourcePlayerId_Optional; return SourcePlayerId_IsSet; }
    int32* GetSourcePlayerIdOrNull() { if (SourcePlayerId_IsSet) return &SourcePlayerId_Optional; return nullptr; }
    const int32* GetSourcePlayerIdOrNull() const { if (SourcePlayerId_IsSet) return &SourcePlayerId_Optional; return nullptr; }
    void SetSourcePlayerId(int32 NewValue) { SourcePlayerId_Optional = NewValue; SourcePlayerId_IsSet = true; }
    void ClearSourcePlayerId() { SourcePlayerId_Optional = 0; SourcePlayerId_IsSet = false; }
    bool IsSourcePlayerIdDefaultValue() const { return SourcePlayerId_IsSet && SourcePlayerId_Optional == 0; }
    void SetSourcePlayerIdToDefault() { SourcePlayerId_Optional = 0; SourcePlayerId_IsSet = true; }

    /* Player who triggered the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid SourcePlayerUuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SourcePlayerUuid_IsSet{ false };
    FGuid& GetSourcePlayerUuid() { return SourcePlayerUuid_Optional; }
    const FGuid& GetSourcePlayerUuid() const { return SourcePlayerUuid_Optional; }
    const FGuid& GetSourcePlayerUuid(const FGuid& DefaultValue) const { if (SourcePlayerUuid_IsSet) return SourcePlayerUuid_Optional; return DefaultValue; }
    bool GetSourcePlayerUuid(FGuid& OutValue) const { if (SourcePlayerUuid_IsSet) OutValue = SourcePlayerUuid_Optional; return SourcePlayerUuid_IsSet; }
    FGuid* GetSourcePlayerUuidOrNull() { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
    const FGuid* GetSourcePlayerUuidOrNull() const { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
    void SetSourcePlayerUuid(FGuid NewValue) { SourcePlayerUuid_Optional = NewValue; SourcePlayerUuid_IsSet = true; }
    void ClearSourcePlayerUuid() { SourcePlayerUuid_IsSet = false; }

    /* Player who the event was targetted toward, if relevant */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 TargetPlayerId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TargetPlayerId_IsSet{ false };
    int32& GetTargetPlayerId() { return TargetPlayerId_Optional; }
    const int32& GetTargetPlayerId() const { return TargetPlayerId_Optional; }
    const int32& GetTargetPlayerId(const int32& DefaultValue) const { if (TargetPlayerId_IsSet) return TargetPlayerId_Optional; return DefaultValue; }
    bool GetTargetPlayerId(int32& OutValue) const { if (TargetPlayerId_IsSet) OutValue = TargetPlayerId_Optional; return TargetPlayerId_IsSet; }
    int32* GetTargetPlayerIdOrNull() { if (TargetPlayerId_IsSet) return &TargetPlayerId_Optional; return nullptr; }
    const int32* GetTargetPlayerIdOrNull() const { if (TargetPlayerId_IsSet) return &TargetPlayerId_Optional; return nullptr; }
    void SetTargetPlayerId(int32 NewValue) { TargetPlayerId_Optional = NewValue; TargetPlayerId_IsSet = true; }
    void ClearTargetPlayerId() { TargetPlayerId_Optional = 0; TargetPlayerId_IsSet = false; }
    bool IsTargetPlayerIdDefaultValue() const { return TargetPlayerId_IsSet && TargetPlayerId_Optional == 0; }
    void SetTargetPlayerIdToDefault() { TargetPlayerId_Optional = 0; TargetPlayerId_IsSet = true; }

    /* Player who the event was targetted toward, if relevant */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid TargetPlayerUuid_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TargetPlayerUuid_IsSet{ false };
    FGuid& GetTargetPlayerUuid() { return TargetPlayerUuid_Optional; }
    const FGuid& GetTargetPlayerUuid() const { return TargetPlayerUuid_Optional; }
    const FGuid& GetTargetPlayerUuid(const FGuid& DefaultValue) const { if (TargetPlayerUuid_IsSet) return TargetPlayerUuid_Optional; return DefaultValue; }
    bool GetTargetPlayerUuid(FGuid& OutValue) const { if (TargetPlayerUuid_IsSet) OutValue = TargetPlayerUuid_Optional; return TargetPlayerUuid_IsSet; }
    FGuid* GetTargetPlayerUuidOrNull() { if (TargetPlayerUuid_IsSet) return &TargetPlayerUuid_Optional; return nullptr; }
    const FGuid* GetTargetPlayerUuidOrNull() const { if (TargetPlayerUuid_IsSet) return &TargetPlayerUuid_Optional; return nullptr; }
    void SetTargetPlayerUuid(FGuid NewValue) { TargetPlayerUuid_Optional = NewValue; TargetPlayerUuid_IsSet = true; }
    void ClearTargetPlayerUuid() { TargetPlayerUuid_IsSet = false; }

    /* Instance that was active at the time of the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Instance_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Instance_IsSet{ false };
    FString& GetInstance() { return Instance_Optional; }
    const FString& GetInstance() const { return Instance_Optional; }
    const FString& GetInstance(const FString& DefaultValue) const { if (Instance_IsSet) return Instance_Optional; return DefaultValue; }
    bool GetInstance(FString& OutValue) const { if (Instance_IsSet) OutValue = Instance_Optional; return Instance_IsSet; }
    FString* GetInstanceOrNull() { if (Instance_IsSet) return &Instance_Optional; return nullptr; }
    const FString* GetInstanceOrNull() const { if (Instance_IsSet) return &Instance_Optional; return nullptr; }
    void SetInstance(FString NewValue) { Instance_Optional = NewValue; Instance_IsSet = true; }
    void ClearInstance() { Instance_IsSet = false; }

    /* Match that was active at the time of the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Match_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Match_IsSet{ false };
    FString& GetMatch() { return Match_Optional; }
    const FString& GetMatch() const { return Match_Optional; }
    const FString& GetMatch(const FString& DefaultValue) const { if (Match_IsSet) return Match_Optional; return DefaultValue; }
    bool GetMatch(FString& OutValue) const { if (Match_IsSet) OutValue = Match_Optional; return Match_IsSet; }
    FString* GetMatchOrNull() { if (Match_IsSet) return &Match_Optional; return nullptr; }
    const FString* GetMatchOrNull() const { if (Match_IsSet) return &Match_Optional; return nullptr; }
    void SetMatch(FString NewValue) { Match_Optional = NewValue; Match_IsSet = true; }
    void ClearMatch() { Match_IsSet = false; }

    /* Relevant platform */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_PlatformID PlatformId_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlatformId_IsSet{ false };
    ERHAPI_PlatformID& GetPlatformId() { return PlatformId_Optional; }
    const ERHAPI_PlatformID& GetPlatformId() const { return PlatformId_Optional; }
    const ERHAPI_PlatformID& GetPlatformId(const ERHAPI_PlatformID& DefaultValue) const { if (PlatformId_IsSet) return PlatformId_Optional; return DefaultValue; }
    bool GetPlatformId(ERHAPI_PlatformID& OutValue) const { if (PlatformId_IsSet) OutValue = PlatformId_Optional; return PlatformId_IsSet; }
    ERHAPI_PlatformID* GetPlatformIdOrNull() { if (PlatformId_IsSet) return &PlatformId_Optional; return nullptr; }
    const ERHAPI_PlatformID* GetPlatformIdOrNull() const { if (PlatformId_IsSet) return &PlatformId_Optional; return nullptr; }
    void SetPlatformId(ERHAPI_PlatformID NewValue) { PlatformId_Optional = NewValue; PlatformId_IsSet = true; }
    void ClearPlatformId() { PlatformId_IsSet = false; }

    /* Relevant platform session id */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PlatformSessionIdBase64_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlatformSessionIdBase64_IsSet{ false };
    FString& GetPlatformSessionIdBase64() { return PlatformSessionIdBase64_Optional; }
    const FString& GetPlatformSessionIdBase64() const { return PlatformSessionIdBase64_Optional; }
    const FString& GetPlatformSessionIdBase64(const FString& DefaultValue) const { if (PlatformSessionIdBase64_IsSet) return PlatformSessionIdBase64_Optional; return DefaultValue; }
    bool GetPlatformSessionIdBase64(FString& OutValue) const { if (PlatformSessionIdBase64_IsSet) OutValue = PlatformSessionIdBase64_Optional; return PlatformSessionIdBase64_IsSet; }
    FString* GetPlatformSessionIdBase64OrNull() { if (PlatformSessionIdBase64_IsSet) return &PlatformSessionIdBase64_Optional; return nullptr; }
    const FString* GetPlatformSessionIdBase64OrNull() const { if (PlatformSessionIdBase64_IsSet) return &PlatformSessionIdBase64_Optional; return nullptr; }
    void SetPlatformSessionIdBase64(FString NewValue) { PlatformSessionIdBase64_Optional = NewValue; PlatformSessionIdBase64_IsSet = true; }
    void ClearPlatformSessionIdBase64() { PlatformSessionIdBase64_IsSet = false; }

    /* custom data about this event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
    void ClearCustomData() { CustomData_IsSet = false; }

    /* Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Timestamp{  };
    FDateTime& GetTimestamp() { return Timestamp; }
    const FDateTime& GetTimestamp() const { return Timestamp; }
    void SetTimestamp(FDateTime NewValue) { Timestamp = NewValue;  }
};
