// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "MatchMakingSessionRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_MatchMakingSessionRequest

void FRHAPI_MatchMakingSessionRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("teams"));
    RallyHereAPI::WriteJsonValue(Writer, Teams);
    Writer->WriteIdentifierPrefix(TEXT("session_tickets"));
    RallyHereAPI::WriteJsonValue(Writer, SessionTickets);
    if (InstanceLaunchTemplateId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("instance_launch_template_id"));
        RallyHereAPI::WriteJsonValue(Writer, InstanceLaunchTemplateId_Optional);
    }
    if (InstanceRequestTemplateId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("instance_request_template_id"));
        RallyHereAPI::WriteJsonValue(Writer, InstanceRequestTemplateId_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("region_id"));
    RallyHereAPI::WriteJsonValue(Writer, RegionId);
    Writer->WriteIdentifierPrefix(TEXT("match_id"));
    RallyHereAPI::WriteJsonValue(Writer, MatchId);
    if (CustomData_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("custom_data"));
        RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
    }
    if (HostPlayerUuid_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("host_player_uuid"));
        RallyHereAPI::WriteJsonValue(Writer, HostPlayerUuid_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_MatchMakingSessionRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonTeamsField = (*Object)->TryGetField(TEXT("teams"));
    ParseSuccess &= JsonTeamsField.IsValid() && !JsonTeamsField->IsNull() && TryGetJsonValue(JsonTeamsField, Teams);
    const TSharedPtr<FJsonValue> JsonSessionTicketsField = (*Object)->TryGetField(TEXT("session_tickets"));
    ParseSuccess &= JsonSessionTicketsField.IsValid() && !JsonSessionTicketsField->IsNull() && TryGetJsonValue(JsonSessionTicketsField, SessionTickets);
    const TSharedPtr<FJsonValue> JsonInstanceLaunchTemplateIdField = (*Object)->TryGetField(TEXT("instance_launch_template_id"));
    if (JsonInstanceLaunchTemplateIdField.IsValid() && !JsonInstanceLaunchTemplateIdField->IsNull())
    {
        InstanceLaunchTemplateId_IsSet = TryGetJsonValue(JsonInstanceLaunchTemplateIdField, InstanceLaunchTemplateId_Optional);
        ParseSuccess &= InstanceLaunchTemplateId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInstanceRequestTemplateIdField = (*Object)->TryGetField(TEXT("instance_request_template_id"));
    if (JsonInstanceRequestTemplateIdField.IsValid() && !JsonInstanceRequestTemplateIdField->IsNull())
    {
        InstanceRequestTemplateId_IsSet = TryGetJsonValue(JsonInstanceRequestTemplateIdField, InstanceRequestTemplateId_Optional);
        ParseSuccess &= InstanceRequestTemplateId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
    ParseSuccess &= JsonRegionIdField.IsValid() && !JsonRegionIdField->IsNull() && TryGetJsonValue(JsonRegionIdField, RegionId);
    const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
    ParseSuccess &= JsonMatchIdField.IsValid() && !JsonMatchIdField->IsNull() && TryGetJsonValue(JsonMatchIdField, MatchId);
    const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
    if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
    {
        CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
        ParseSuccess &= CustomData_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonHostPlayerUuidField = (*Object)->TryGetField(TEXT("host_player_uuid"));
    if (JsonHostPlayerUuidField.IsValid() && !JsonHostPlayerUuidField->IsNull())
    {
        HostPlayerUuid_IsSet = TryGetJsonValue(JsonHostPlayerUuidField, HostPlayerUuid_Optional);
        ParseSuccess &= HostPlayerUuid_IsSet;
    }

    return ParseSuccess;
}

