// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "Loot.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_Loot

void FRHAPI_Loot::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("loot_id"));
    RallyHereAPI::WriteJsonValue(Writer, LootId);
    Writer->WriteIdentifierPrefix(TEXT("vendor_id"));
    RallyHereAPI::WriteJsonValue(Writer, VendorId);
    if (ItemId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("item_id"));
        RallyHereAPI::WriteJsonValue(Writer, ItemId_Optional);
    }
    if (Item_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("item"));
        RallyHereAPI::WriteJsonValue(Writer, Item_Optional);
    }
    if (SubVendorId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("sub_vendor_id"));
        RallyHereAPI::WriteJsonValue(Writer, SubVendorId_Optional);
    }
    if (Quantity_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("quantity"));
        RallyHereAPI::WriteJsonValue(Writer, Quantity_Optional);
    }
    if (InventorySelectorType_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("inventory_selector_type"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(InventorySelectorType_Optional));
    }
    if (InventoryOperation_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("inventory_operation"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(InventoryOperation_Optional));
    }
    if (Active_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("active"));
        RallyHereAPI::WriteJsonValue(Writer, Active_Optional);
    }
    if (SortOrder_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("sort_order"));
        RallyHereAPI::WriteJsonValue(Writer, SortOrder_Optional);
    }
    if (DropWeight_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("drop_weight"));
        RallyHereAPI::WriteJsonValue(Writer, DropWeight_Optional);
    }
    if (FillInNewOrder_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("fill_in_new_order"));
        RallyHereAPI::WriteJsonValue(Writer, FillInNewOrder_Optional);
    }
    if (AllowPartialBundles_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("allow_partial_bundles"));
        RallyHereAPI::WriteJsonValue(Writer, AllowPartialBundles_Optional);
    }
    if (RequiredItemId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("required_item_id"));
        RallyHereAPI::WriteJsonValue(Writer, RequiredItemId_Optional);
    }
    if (RequiredItemCount_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("required_item_count"));
        RallyHereAPI::WriteJsonValue(Writer, RequiredItemCount_Optional);
    }
    if (StackLimit_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("stack_limit"));
        RallyHereAPI::WriteJsonValue(Writer, StackLimit_Optional);
    }
    if (UiHint_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("ui_hint"));
        RallyHereAPI::WriteJsonValue(Writer, UiHint_Optional);
    }
    if (EffectiveFrom_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("effective_from"));
        RallyHereAPI::WriteJsonValue(Writer, EffectiveFrom_Optional);
    }
    if (QuantityType_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("quantity_type"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(QuantityType_Optional));
    }
    if (QuantityMultInventoryItemId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("quantity_mult_inventory_item_id"));
        RallyHereAPI::WriteJsonValue(Writer, QuantityMultInventoryItemId_Optional);
    }
    if (IsClaimableByClient_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("is_claimable_by_client"));
        RallyHereAPI::WriteJsonValue(Writer, IsClaimableByClient_Optional);
    }
    if (TimeFrameId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("time_frame_id"));
        RallyHereAPI::WriteJsonValue(Writer, TimeFrameId_Optional);
    }
    if (UseInventoryBucket_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("use_inventory_bucket"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(UseInventoryBucket_Optional));
    }
    if (XpQuantityTransformType_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("xp_quantity_transform_type"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(XpQuantityTransformType_Optional));
    }
    if (CurrentPricePointGuid_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("current_price_point_guid"));
        RallyHereAPI::WriteJsonValue(Writer, CurrentPricePointGuid_Optional);
    }
    if (PreSalePricePointGuid_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("pre_sale_price_point_guid"));
        RallyHereAPI::WriteJsonValue(Writer, PreSalePricePointGuid_Optional);
    }
    if (CacheInfo_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("cache_info"));
        RallyHereAPI::WriteJsonValue(Writer, CacheInfo_Optional);
    }
    if (HardQuantityMaximum_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("hard_quantity_maximum"));
        RallyHereAPI::WriteJsonValue(Writer, HardQuantityMaximum_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_Loot::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("loot_id"), LootId);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("vendor_id"), VendorId);
    if ((*Object)->HasField(TEXT("item_id")))
    {
        ItemId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("item_id"), ItemId_Optional);
        ParseSuccess &= ItemId_IsSet;
    }
    if ((*Object)->HasField(TEXT("item")))
    {
        Item_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("item"), Item_Optional);
        ParseSuccess &= Item_IsSet;
    }
    if ((*Object)->HasField(TEXT("sub_vendor_id")))
    {
        SubVendorId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("sub_vendor_id"), SubVendorId_Optional);
        ParseSuccess &= SubVendorId_IsSet;
    }
    if ((*Object)->HasField(TEXT("quantity")))
    {
        Quantity_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("quantity"), Quantity_Optional);
        ParseSuccess &= Quantity_IsSet;
    }
    if ((*Object)->HasField(TEXT("inventory_selector_type")))
    {
        InventorySelectorType_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("inventory_selector_type"), InventorySelectorType_Optional);
        ParseSuccess &= InventorySelectorType_IsSet;
    }
    if ((*Object)->HasField(TEXT("inventory_operation")))
    {
        InventoryOperation_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("inventory_operation"), InventoryOperation_Optional);
        ParseSuccess &= InventoryOperation_IsSet;
    }
    if ((*Object)->HasField(TEXT("active")))
    {
        Active_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("active"), Active_Optional);
        ParseSuccess &= Active_IsSet;
    }
    if ((*Object)->HasField(TEXT("sort_order")))
    {
        SortOrder_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("sort_order"), SortOrder_Optional);
        ParseSuccess &= SortOrder_IsSet;
    }
    if ((*Object)->HasField(TEXT("drop_weight")))
    {
        DropWeight_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("drop_weight"), DropWeight_Optional);
        ParseSuccess &= DropWeight_IsSet;
    }
    if ((*Object)->HasField(TEXT("fill_in_new_order")))
    {
        FillInNewOrder_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("fill_in_new_order"), FillInNewOrder_Optional);
        ParseSuccess &= FillInNewOrder_IsSet;
    }
    if ((*Object)->HasField(TEXT("allow_partial_bundles")))
    {
        AllowPartialBundles_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("allow_partial_bundles"), AllowPartialBundles_Optional);
        ParseSuccess &= AllowPartialBundles_IsSet;
    }
    if ((*Object)->HasField(TEXT("required_item_id")))
    {
        RequiredItemId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("required_item_id"), RequiredItemId_Optional);
        ParseSuccess &= RequiredItemId_IsSet;
    }
    if ((*Object)->HasField(TEXT("required_item_count")))
    {
        RequiredItemCount_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("required_item_count"), RequiredItemCount_Optional);
        ParseSuccess &= RequiredItemCount_IsSet;
    }
    if ((*Object)->HasField(TEXT("stack_limit")))
    {
        StackLimit_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("stack_limit"), StackLimit_Optional);
        ParseSuccess &= StackLimit_IsSet;
    }
    if ((*Object)->HasField(TEXT("ui_hint")))
    {
        UiHint_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("ui_hint"), UiHint_Optional);
        ParseSuccess &= UiHint_IsSet;
    }
    if ((*Object)->HasField(TEXT("effective_from")))
    {
        EffectiveFrom_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("effective_from"), EffectiveFrom_Optional);
        ParseSuccess &= EffectiveFrom_IsSet;
    }
    if ((*Object)->HasField(TEXT("quantity_type")))
    {
        QuantityType_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("quantity_type"), QuantityType_Optional);
        ParseSuccess &= QuantityType_IsSet;
    }
    if ((*Object)->HasField(TEXT("quantity_mult_inventory_item_id")))
    {
        QuantityMultInventoryItemId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("quantity_mult_inventory_item_id"), QuantityMultInventoryItemId_Optional);
        ParseSuccess &= QuantityMultInventoryItemId_IsSet;
    }
    if ((*Object)->HasField(TEXT("is_claimable_by_client")))
    {
        IsClaimableByClient_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("is_claimable_by_client"), IsClaimableByClient_Optional);
        ParseSuccess &= IsClaimableByClient_IsSet;
    }
    if ((*Object)->HasField(TEXT("time_frame_id")))
    {
        TimeFrameId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("time_frame_id"), TimeFrameId_Optional);
        ParseSuccess &= TimeFrameId_IsSet;
    }
    if ((*Object)->HasField(TEXT("use_inventory_bucket")))
    {
        UseInventoryBucket_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("use_inventory_bucket"), UseInventoryBucket_Optional);
        ParseSuccess &= UseInventoryBucket_IsSet;
    }
    if ((*Object)->HasField(TEXT("xp_quantity_transform_type")))
    {
        XpQuantityTransformType_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("xp_quantity_transform_type"), XpQuantityTransformType_Optional);
        ParseSuccess &= XpQuantityTransformType_IsSet;
    }
    if ((*Object)->HasField(TEXT("current_price_point_guid")))
    {
        CurrentPricePointGuid_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("current_price_point_guid"), CurrentPricePointGuid_Optional);
        ParseSuccess &= CurrentPricePointGuid_IsSet;
    }
    if ((*Object)->HasField(TEXT("pre_sale_price_point_guid")))
    {
        PreSalePricePointGuid_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("pre_sale_price_point_guid"), PreSalePricePointGuid_Optional);
        ParseSuccess &= PreSalePricePointGuid_IsSet;
    }
    if ((*Object)->HasField(TEXT("cache_info")))
    {
        CacheInfo_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("cache_info"), CacheInfo_Optional);
        ParseSuccess &= CacheInfo_IsSet;
    }
    if ((*Object)->HasField(TEXT("hard_quantity_maximum")))
    {
        HardQuantityMaximum_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("hard_quantity_maximum"), HardQuantityMaximum_Optional);
        ParseSuccess &= HardQuantityMaximum_IsSet;
    }

    return ParseSuccess;
}

