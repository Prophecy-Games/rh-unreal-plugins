/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */


#include "SessionTemplate.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_SessionTemplate

void FRHAPI_SessionTemplate::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("session_type"));
    RallyHereAPI::WriteJsonValue(Writer, SessionType);
    if (EngineSessionType_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("engine_session_type"));
        RallyHereAPI::WriteJsonValue(Writer, EngineSessionType_Optional);
    }
    if (CanJoinMatchmaking_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("can_join_matchmaking"));
        RallyHereAPI::WriteJsonValue(Writer, CanJoinMatchmaking_Optional);
    }
    if (CanBeCreatedByPlayersDirectly_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("can_be_created_by_players_directly"));
        RallyHereAPI::WriteJsonValue(Writer, CanBeCreatedByPlayersDirectly_Optional);
    }
    if (Joinable_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("joinable"));
        RallyHereAPI::WriteJsonValue(Writer, Joinable_Optional);
    }
    if (AutoAddToBrowser_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("auto_add_to_browser"));
        RallyHereAPI::WriteJsonValue(Writer, AutoAddToBrowser_Optional);
    }
    if (AutoBrowserParams_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("auto_browser_params"));
        RallyHereAPI::WriteJsonValue(Writer, AutoBrowserParams_Optional);
    }
    if (CanBeAddedToServerBrowser_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("can_be_added_to_server_browser"));
        RallyHereAPI::WriteJsonValue(Writer, CanBeAddedToServerBrowser_Optional);
    }
    if (KeepAliveOnEmpty_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("keep_alive_on_empty"));
        RallyHereAPI::WriteJsonValue(Writer, KeepAliveOnEmpty_Optional);
    }
    if (PlatformTemplates_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("platform_templates"));
        RallyHereAPI::WriteJsonValue(Writer, PlatformTemplates_Optional);
    }
    if (AutoStartupParams_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("auto_startup_params"));
        RallyHereAPI::WriteJsonValue(Writer, AutoStartupParams_Optional);
    }
    if (MinSessionCount_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("min_session_count"));
        RallyHereAPI::WriteJsonValue(Writer, MinSessionCount_Optional);
    }
    if (Metadata_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("metadata"));
        RallyHereAPI::WriteJsonValue(Writer, Metadata_Optional);
    }
    if (NumTeams_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("num_teams"));
        RallyHereAPI::WriteJsonValue(Writer, NumTeams_Optional);
    }
    if (PlayersPerTeam_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("players_per_team"));
        RallyHereAPI::WriteJsonValue(Writer, PlayersPerTeam_Optional);
    }
    if (CanChangeOwnTeam_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("can_change_own_team"));
        RallyHereAPI::WriteJsonValue(Writer, CanChangeOwnTeam_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_SessionTemplate::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("session_type"), SessionType);
    if ((*Object)->HasField(TEXT("engine_session_type")))
    {
        EngineSessionType_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("engine_session_type"), EngineSessionType_Optional);
        ParseSuccess &= EngineSessionType_IsSet;
    }
    if ((*Object)->HasField(TEXT("can_join_matchmaking")))
    {
        CanJoinMatchmaking_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("can_join_matchmaking"), CanJoinMatchmaking_Optional);
        ParseSuccess &= CanJoinMatchmaking_IsSet;
    }
    if ((*Object)->HasField(TEXT("can_be_created_by_players_directly")))
    {
        CanBeCreatedByPlayersDirectly_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("can_be_created_by_players_directly"), CanBeCreatedByPlayersDirectly_Optional);
        ParseSuccess &= CanBeCreatedByPlayersDirectly_IsSet;
    }
    if ((*Object)->HasField(TEXT("joinable")))
    {
        Joinable_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("joinable"), Joinable_Optional);
        ParseSuccess &= Joinable_IsSet;
    }
    if ((*Object)->HasField(TEXT("auto_add_to_browser")))
    {
        AutoAddToBrowser_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("auto_add_to_browser"), AutoAddToBrowser_Optional);
        ParseSuccess &= AutoAddToBrowser_IsSet;
    }
    if ((*Object)->HasField(TEXT("auto_browser_params")))
    {
        AutoBrowserParams_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("auto_browser_params"), AutoBrowserParams_Optional);
        ParseSuccess &= AutoBrowserParams_IsSet;
    }
    if ((*Object)->HasField(TEXT("can_be_added_to_server_browser")))
    {
        CanBeAddedToServerBrowser_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("can_be_added_to_server_browser"), CanBeAddedToServerBrowser_Optional);
        ParseSuccess &= CanBeAddedToServerBrowser_IsSet;
    }
    if ((*Object)->HasField(TEXT("keep_alive_on_empty")))
    {
        KeepAliveOnEmpty_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("keep_alive_on_empty"), KeepAliveOnEmpty_Optional);
        ParseSuccess &= KeepAliveOnEmpty_IsSet;
    }
    if ((*Object)->HasField(TEXT("platform_templates")))
    {
        PlatformTemplates_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("platform_templates"), PlatformTemplates_Optional);
        ParseSuccess &= PlatformTemplates_IsSet;
    }
    if ((*Object)->HasField(TEXT("auto_startup_params")))
    {
        AutoStartupParams_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("auto_startup_params"), AutoStartupParams_Optional);
        ParseSuccess &= AutoStartupParams_IsSet;
    }
    if ((*Object)->HasField(TEXT("min_session_count")))
    {
        MinSessionCount_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("min_session_count"), MinSessionCount_Optional);
        ParseSuccess &= MinSessionCount_IsSet;
    }
    if ((*Object)->HasField(TEXT("metadata")))
    {
        Metadata_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("metadata"), Metadata_Optional);
        ParseSuccess &= Metadata_IsSet;
    }
    if ((*Object)->HasField(TEXT("num_teams")))
    {
        NumTeams_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("num_teams"), NumTeams_Optional);
        ParseSuccess &= NumTeams_IsSet;
    }
    if ((*Object)->HasField(TEXT("players_per_team")))
    {
        PlayersPerTeam_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("players_per_team"), PlayersPerTeam_Optional);
        ParseSuccess &= PlayersPerTeam_IsSet;
    }
    if ((*Object)->HasField(TEXT("can_change_own_team")))
    {
        CanChangeOwnTeam_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("can_change_own_team"), CanChangeOwnTeam_Optional);
        ParseSuccess &= CanChangeOwnTeam_IsSet;
    }

    return ParseSuccess;
}

