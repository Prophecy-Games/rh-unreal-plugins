// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformEntitlementProcessResult.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformEntitlementProcessResult

void FRHAPI_PlatformEntitlementProcessResult::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("request_id"));
    RallyHereAPI::WriteJsonValue(Writer, RequestId);
    Writer->WriteIdentifierPrefix(TEXT("client_type"));
    RallyHereAPI::WriteJsonValue(Writer, EnumToString(ClientType));
    Writer->WriteIdentifierPrefix(TEXT("transaction_id"));
    RallyHereAPI::WriteJsonValue(Writer, TransactionId);
    Writer->WriteIdentifierPrefix(TEXT("platform_region"));
    RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlatformRegion));
    if (Status_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("status"));
        RallyHereAPI::WriteJsonValue(Writer, Status_Optional);
    }
    if (ClientEntitlements_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("client_entitlements"));
        RallyHereAPI::WriteJsonValue(Writer, ClientEntitlements_Optional);
    }
    if (ServerEntitlements_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("server_entitlements"));
        RallyHereAPI::WriteJsonValue(Writer, ServerEntitlements_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("platform_id"));
    RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlatformId));
    Writer->WriteIdentifierPrefix(TEXT("platform_user_id"));
    RallyHereAPI::WriteJsonValue(Writer, PlatformUserId);
    if (SkippedServerEntitlements_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("skipped_server_entitlements"));
        RallyHereAPI::WriteJsonValue(Writer, SkippedServerEntitlements_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformEntitlementProcessResult::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("request_id"), RequestId);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("client_type"), ClientType);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("transaction_id"), TransactionId);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("platform_region"), PlatformRegion);
    if ((*Object)->HasField(TEXT("status")))
    {
        Status_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("status"), Status_Optional);
        ParseSuccess &= Status_IsSet;
    }
    if ((*Object)->HasField(TEXT("client_entitlements")))
    {
        ClientEntitlements_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("client_entitlements"), ClientEntitlements_Optional);
        ParseSuccess &= ClientEntitlements_IsSet;
    }
    if ((*Object)->HasField(TEXT("server_entitlements")))
    {
        ServerEntitlements_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("server_entitlements"), ServerEntitlements_Optional);
        ParseSuccess &= ServerEntitlements_IsSet;
    }
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("platform_id"), PlatformId);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("platform_user_id"), PlatformUserId);
    if ((*Object)->HasField(TEXT("skipped_server_entitlements")))
    {
        SkippedServerEntitlements_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("skipped_server_entitlements"), SkippedServerEntitlements_Optional);
        ParseSuccess &= SkippedServerEntitlements_IsSet;
    }

    return ParseSuccess;
}

