/**
 * NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
 * Do not edit the file manually.
 *
 * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
 * Copyright 2022 HiRez Studios
 * SPDX-License-Identifier: Apache-2.0
 *
 * Rally Here APIs
 * version: 0.1.0
 * Rally Here APIs
 */


#include "PlayerOrder.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlayerOrder

void FRHAPI_PlayerOrder::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (Source_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("source"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(Source_Optional));
    }
    if (ClientOrderRefId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("client_order_ref_id"));
        RallyHereAPI::WriteJsonValue(Writer, ClientOrderRefId_Optional);
    }
    if (PortalId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("portal_id"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(PortalId_Optional));
    }
    if (PortalUserId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("portal_user_id"));
        RallyHereAPI::WriteJsonValue(Writer, PortalUserId_Optional);
    }
    if (InstanceId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("instance_id"));
        RallyHereAPI::WriteJsonValue(Writer, InstanceId_Optional);
    }
    if (MatchId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match_id"));
        RallyHereAPI::WriteJsonValue(Writer, MatchId_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("order_id"));
    RallyHereAPI::WriteJsonValue(Writer, OrderId);
    Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
    RallyHereAPI::WriteJsonValue(Writer, PlayerUuid);
    Writer->WriteIdentifierPrefix(TEXT("created_time"));
    RallyHereAPI::WriteJsonValue(Writer, CreatedTime);
    Writer->WriteIdentifierPrefix(TEXT("entries"));
    RallyHereAPI::WriteJsonValue(Writer, Entries);
    Writer->WriteObjectEnd();
}

bool FRHAPI_PlayerOrder::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    if ((*Object)->HasField(TEXT("source")))
    {
        Source_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("source"), Source_Optional);
        ParseSuccess &= Source_IsSet;
    }
    if ((*Object)->HasField(TEXT("client_order_ref_id")))
    {
        ClientOrderRefId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("client_order_ref_id"), ClientOrderRefId_Optional);
        ParseSuccess &= ClientOrderRefId_IsSet;
    }
    if ((*Object)->HasField(TEXT("portal_id")))
    {
        PortalId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("portal_id"), PortalId_Optional);
        ParseSuccess &= PortalId_IsSet;
    }
    if ((*Object)->HasField(TEXT("portal_user_id")))
    {
        PortalUserId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("portal_user_id"), PortalUserId_Optional);
        ParseSuccess &= PortalUserId_IsSet;
    }
    if ((*Object)->HasField(TEXT("instance_id")))
    {
        InstanceId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("instance_id"), InstanceId_Optional);
        ParseSuccess &= InstanceId_IsSet;
    }
    if ((*Object)->HasField(TEXT("match_id")))
    {
        MatchId_IsSet = RallyHereAPI::TryGetJsonValue(*Object, TEXT("match_id"), MatchId_Optional);
        ParseSuccess &= MatchId_IsSet;
    }
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("order_id"), OrderId);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("player_uuid"), PlayerUuid);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("created_time"), CreatedTime);
    ParseSuccess &= RallyHereAPI::TryGetJsonValue(*Object, TEXT("entries"), Entries);

    return ParseSuccess;
}

